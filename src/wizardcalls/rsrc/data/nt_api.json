{
    "NtAddAtom": {
      "category": "Atom",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 3,
      "arguments": [
        {
          "in_out": "IN",
          "type": "PWCHAR",
          "name": "AtomName"
        },
        {
          "in_out": "IN",
          "type": "ULONG",
          "name": "AtomNameLength"
        },
        {
          "in_out": "OUT",
          "type": "PRTL_ATOM",
          "name": "Atom"
        }
      ]
    },
    "NtAllocateVirtualMemory": {
      "category": "Memory Management",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 6,
      "arguments": [
        {
          "in_out": "__in",
          "type": "HANDLE",
          "name": "ProcessHandle"
        },
        {
          "in_out": "__inout",
          "type": "PVOID",
          "name": "*BaseAddress"
        },
        {
          "in_out": "__in",
          "type": "ULONG_PTR",
          "name": "ZeroBits"
        },
        {
          "in_out": "__inout",
          "type": "PSIZE_T",
          "name": "RegionSize"
        },
        {
          "in_out": "__in",
          "type": "ULONG",
          "name": "AllocationType"
        },
        {
          "in_out": "__in",
          "type": "ULONG",
          "name": "Protection"
        }
      ]
    },
    "NtClose": {
      "category": "Handle and Objects",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 1,
      "arguments": [
        {
          "in_out": "__in",
          "type": "HANDLE",
          "name": "HandleCuckoo"
        }
      ]
    },
    "NtCommitTransaction": {
      "category": "Drivers",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 2,
      "arguments": [
        {
          "in_out": "(n/a)",
          "type": "HANDLE",
          "name": "TransactionHandle"
        },
        {
          "in_out": "BOOLEAN",
          "type": "WaitCopyright",
          "name": "(C)"
        }
      ]
    },
    "NtCompareTokens": {
      "category": "Authorization",
      "dll": "Ntdll.dll",
      "header": "Ntseapi.h",
      "return_type": "NTSTATUS NTAPI",
      "n_arguments": 3,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "FirstTokenHandle",
          "description": "A handle to the first access token to compare. The token must be open for TOKEN_QUERY access."
        },
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "SecondTokenHandle",
          "description": "A handle to the second access token to compare. The token must be open for TOKEN_QUERY access."
        },
        {
          "in_out": "_Out_",
          "type": "PBOOLEAN",
          "name": "Equal",
          "description": "A pointer to a variable that receives a value that indicates whether the tokens represented by the FirstTokenHandle and SecondTokenHandle parameters are equivalent."
        }
      ]
    },
    "NtCreateEvent": {
      "category": "Synchronization",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 5,
      "arguments": [
        {
          "in_out": "__out",
          "type": "PHANDLE",
          "name": "EventHandle"
        },
        {
          "in_out": "__in",
          "type": "ACCESS_MASK",
          "name": "DesiredAccess"
        },
        {
          "in_out": "__in_opt",
          "type": "POBJECT_ATTRIBUTES",
          "name": "ObjectAttributes"
        },
        {
          "in_out": "__in",
          "type": "DWORD",
          "name": "EventType"
        },
        {
          "in_out": "__in",
          "type": "BOOLEAN",
          "name": "InitialStateit"
        }
      ]
    },
    "NtCreateFile": {
      "category": "Files and I/O (Local file system)",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 11,
      "arguments": [
        {
          "in_out": "__out",
          "type": "PHANDLE",
          "name": "FileHandle"
        },
        {
          "in_out": "__in",
          "type": "ACCESS_MASK",
          "name": "DesiredAccess"
        },
        {
          "in_out": "__in",
          "type": "POBJECT_ATTRIBUTES",
          "name": "ObjectAttributes"
        },
        {
          "in_out": "__out",
          "type": "PIO_STATUS_BLOCK",
          "name": "IoStatusBlock"
        },
        {
          "in_out": "__in_opt",
          "type": "PLARGE_INTEGER",
          "name": "AllocationSize"
        },
        {
          "in_out": "__in",
          "type": "ULONG",
          "name": "FileAttributes"
        },
        {
          "in_out": "__in",
          "type": "ULONG",
          "name": "ShareAccess"
        },
        {
          "in_out": "__in",
          "type": "ULONG",
          "name": "CreateDisposition"
        },
        {
          "in_out": "__in",
          "type": "ULONG",
          "name": "CreateOptions"
        },
        {
          "in_out": "__in",
          "type": "PVOID",
          "name": "EaBuffer"
        },
        {
          "in_out": "__in",
          "type": "ULONG",
          "name": "EaLengthMERCHANTABILITY"
        }
      ]
    },
    "NtCreateKey": {
      "category": "Registry",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 7,
      "arguments": [
        {
          "in_out": "__out",
          "type": "PHANDLE",
          "name": "KeyHandle"
        },
        {
          "in_out": "__in",
          "type": "ACCESS_MASK",
          "name": "DesiredAccess"
        },
        {
          "in_out": "__in",
          "type": "POBJECT_ATTRIBUTES",
          "name": "ObjectAttributes"
        },
        {
          "in_out": "__reserved",
          "type": "ULONG",
          "name": "TitleIndex"
        },
        {
          "in_out": "__in_opt",
          "type": "PUNICODE_STRING",
          "name": "Class"
        },
        {
          "in_out": "__in",
          "type": "ULONG",
          "name": "CreateOptions"
        },
        {
          "in_out": "__out_opt",
          "type": "PULONG",
          "name": "Disposition(at"
        }
      ]
    },
    "NtCreateMutant": {
      "category": "Synchronization",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 4,
      "arguments": [
        {
          "in_out": "__out",
          "type": "PHANDLE",
          "name": "MutantHandle"
        },
        {
          "in_out": "__in",
          "type": "ACCESS_MASK",
          "name": "DesiredAccess"
        },
        {
          "in_out": "__in_opt",
          "type": "POBJECT_ATTRIBUTES",
          "name": "ObjectAttributes"
        },
        {
          "in_out": "__in",
          "type": "BOOLEAN",
          "name": "InitialOwnerThis"
        }
      ]
    },
    "NtCreateNamedPipeFile": {
      "category": "Pipes",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 14,
      "arguments": [
        {
          "in_out": "OUT",
          "type": "PHANDLE",
          "name": "NamedPipeFileHandle"
        },
        {
          "in_out": "IN",
          "type": "ACCESS_MASK",
          "name": "DesiredAccess"
        },
        {
          "in_out": "IN",
          "type": "POBJECT_ATTRIBUTES",
          "name": "ObjectAttributes"
        },
        {
          "in_out": "OUT",
          "type": "PIO_STATUS_BLOCK",
          "name": "IoStatusBlock"
        },
        {
          "in_out": "IN",
          "type": "ULONG",
          "name": "ShareAccess"
        },
        {
          "in_out": "IN",
          "type": "ULONG",
          "name": "CreateDisposition"
        },
        {
          "in_out": "IN",
          "type": "ULONG",
          "name": "CreateOptions"
        },
        {
          "in_out": "IN",
          "type": "ULONG",
          "name": "NamedPipeType"
        },
        {
          "in_out": "IN",
          "type": "ULONG",
          "name": "ReadMode"
        },
        {
          "in_out": "IN",
          "type": "ULONG",
          "name": "CompletionMode"
        },
        {
          "in_out": "IN",
          "type": "ULONG",
          "name": "MaxInstances"
        },
        {
          "in_out": "IN",
          "type": "ULONG",
          "name": "InBufferSize"
        },
        {
          "in_out": "IN",
          "type": "ULONG",
          "name": "OutBufferSize"
        },
        {
          "in_out": "IN",
          "type": "PLARGE_INTEGER",
          "name": "DefaultTimeOutYou"
        }
      ]
    },
    "NtCreateSection": {
      "category": "Processes",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 7,
      "arguments": [
        {
          "in_out": "__out",
          "type": "PHANDLE",
          "name": "SectionHandle"
        },
        {
          "in_out": "__in",
          "type": "ACCESS_MASK",
          "name": "DesiredAccess"
        },
        {
          "in_out": "__in_opt",
          "type": "POBJECT_ATTRIBUTES",
          "name": "ObjectAttributes"
        },
        {
          "in_out": "__in_opt",
          "type": "PLARGE_INTEGER",
          "name": "MaximumSize"
        },
        {
          "in_out": "__in",
          "type": "ULONG",
          "name": "SectionPageProtection"
        },
        {
          "in_out": "__in",
          "type": "ULONG",
          "name": "AllocationAttributes"
        },
        {
          "in_out": "__in_opt",
          "type": "HANDLE",
          "name": "FileHandle"
        }
      ]
    },
    "NtCreateThreadEx": {
      "category": "Processes",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 11,
      "arguments": [
        {
          "in_out": "OUT",
          "type": "PHANDLE",
          "name": "hThread"
        },
        {
          "in_out": "IN",
          "type": "ACCESS_MASK",
          "name": "DesiredAccess"
        },
        {
          "in_out": "IN",
          "type": "PVOID",
          "name": "ObjectAttributes"
        },
        {
          "in_out": "IN",
          "type": "HANDLE",
          "name": "ProcessHandle"
        },
        {
          "in_out": "IN",
          "type": "LPTHREAD_START_ROUTINE",
          "name": "StartRoutine"
        },
        {
          "in_out": "IN",
          "type": "PVOID",
          "name": "Argument"
        },
        {
          "in_out": "IN",
          "type": "ULONG",
          "name": "CreateFlags"
        },
        {
          "in_out": "IN",
          "type": "SIZE_T",
          "name": "ZeroBits"
        },
        {
          "in_out": "IN",
          "type": "SIZE_T",
          "name": "StackSize"
        },
        {
          "in_out": "IN",
          "type": "SIZE_T",
          "name": "MaximumStackSize"
        },
        {
          "in_out": "OUT",
          "type": "PVOID",
          "name": "AttributeList"
        }
      ]
    },
    "NtCreateTransaction": {
      "category": "Drivers",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 10,
      "arguments": [
        {
          "in_out": "(n/a)",
          "type": "PHANDLE",
          "name": "TransactionHandle"
        },
        {
          "in_out": "(n/a)",
          "type": "ACCESS_MASK",
          "name": "DesiredAccess"
        },
        {
          "in_out": "(n/a)",
          "type": "POBJECT_ATTRIBUTES",
          "name": "ObjectAttributes"
        },
        {
          "in_out": "(n/a)",
          "type": "LPGUID",
          "name": "Uow"
        },
        {
          "in_out": "(n/a)",
          "type": "HANDLE",
          "name": "TmHandle"
        },
        {
          "in_out": "(n/a)",
          "type": "ULONG",
          "name": "CreateOptions"
        },
        {
          "in_out": "(n/a)",
          "type": "ULONG",
          "name": "IsolationLevel"
        },
        {
          "in_out": "(n/a)",
          "type": "ULONG",
          "name": "IsolationFlags"
        },
        {
          "in_out": "(n/a)",
          "type": "PLARGE_INTEGER",
          "name": "Timeout"
        },
        {
          "in_out": "PUNICODE_STRING",
          "type": "Descriptionbut",
          "name": "WITHOUT"
        }
      ]
    },
    "NtCreateUserProcess": {
      "category": "Processes",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 11,
      "arguments": [
        {
          "in_out": "__out",
          "type": "PHANDLE",
          "name": "ProcessHandle"
        },
        {
          "in_out": "__out",
          "type": "PHANDLE",
          "name": "ThreadHandle"
        },
        {
          "in_out": "__in",
          "type": "ACCESS_MASK",
          "name": "ProcessDesiredAccess"
        },
        {
          "in_out": "__in",
          "type": "ACCESS_MASK",
          "name": "ThreadDesiredAccess"
        },
        {
          "in_out": "__in_opt",
          "type": "POBJECT_ATTRIBUTES",
          "name": "ProcessObjectAttributes"
        },
        {
          "in_out": "__in_opt",
          "type": "POBJECT_ATTRIBUTES",
          "name": "ThreadObjectAttributes"
        },
        {
          "in_out": "__in",
          "type": "ULONG",
          "name": "ProcessFlags"
        },
        {
          "in_out": "__in",
          "type": "ULONG",
          "name": "ThreadFlags"
        },
        {
          "in_out": "__in_opt",
          "type": "PRTL_USER_PROCESS_PARAMETERS",
          "name": "ProcessParameters"
        },
        {
          "in_out": "__inout",
          "type": "PPS_CREATE_INFO",
          "name": "CreateInfo"
        },
        {
          "in_out": "__in_opt",
          "type": "PPS_ATTRIBUTE_LIST",
          "name": "AttributeListMERCHANTABILITY"
        }
      ]
    },
    "NtDelayExecution": {
      "category": "Processes",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 2,
      "arguments": [
        {
          "in_out": "__in",
          "type": "BOOLEAN",
          "name": "Alertable"
        },
        {
          "in_out": "__in",
          "type": "PLARGE_INTEGER",
          "name": "DelayIntervalCopyright"
        }
      ]
    },
    "NtDeleteAtom": {
      "category": "Atom",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 1,
      "arguments": [
        {
          "in_out": "IN",
          "type": "RTL_ATOM",
          "name": "AtomCuckoo"
        }
      ]
    },
    "NtDeleteValueKey": {
      "category": "Registry",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 2,
      "arguments": [
        {
          "in_out": "__in",
          "type": "HANDLE",
          "name": "KeyHandle"
        },
        {
          "in_out": "__in",
          "type": "PUNICODE_STRING",
          "name": "ValueNameCopyright"
        }
      ]
    },
    "NtDeviceIoControlFile": {
      "category": "Device Management",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 10,
      "arguments": [
        {
          "in_out": "__in",
          "type": "HANDLE",
          "name": "FileHandle"
        },
        {
          "in_out": "__in",
          "type": "HANDLE",
          "name": "Event"
        },
        {
          "in_out": "__in",
          "type": "PIO_APC_ROUTINE",
          "name": "ApcRoutine"
        },
        {
          "in_out": "__in",
          "type": "PVOID",
          "name": "ApcContext"
        },
        {
          "in_out": "__out",
          "type": "PIO_STATUS_BLOCK",
          "name": "IoStatusBlock"
        },
        {
          "in_out": "__in",
          "type": "ULONG",
          "name": "IoControlCode"
        },
        {
          "in_out": "__in",
          "type": "PVOID",
          "name": "InputBuffer"
        },
        {
          "in_out": "__in",
          "type": "ULONG",
          "name": "InputBufferLength"
        },
        {
          "in_out": "__out",
          "type": "PVOID",
          "name": "OutputBuffer"
        },
        {
          "in_out": "__in",
          "type": "ULONG",
          "name": "OutputBufferLengthbut"
        }
      ]
    },
    "NtDuplicateObject": {
      "category": "Handle and Objects",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 7,
      "arguments": [
        {
          "in_out": "__in",
          "type": "HANDLE",
          "name": "SourceProcessHandle"
        },
        {
          "in_out": "__in",
          "type": "HANDLE",
          "name": "SourceHandle"
        },
        {
          "in_out": "__in_opt",
          "type": "HANDLE",
          "name": "TargetProcessHandle"
        },
        {
          "in_out": "__out_opt",
          "type": "PHANDLE",
          "name": "TargetHandle"
        },
        {
          "in_out": "__in",
          "type": "ACCESS_MASK",
          "name": "DesiredAccess"
        },
        {
          "in_out": "__in",
          "type": "ULONG",
          "name": "HandleAttributes"
        },
        {
          "in_out": "__in",
          "type": "ULONG",
          "name": "Options(at"
        }
      ]
    },
    "NtEnumerateKey": {
      "category": "Registry",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 6,
      "arguments": [
        {
          "in_out": "__in",
          "type": "HANDLE",
          "name": "KeyHandle"
        },
        {
          "in_out": "__in",
          "type": "ULONG",
          "name": "Index"
        },
        {
          "in_out": "__in",
          "type": "KEY_INFORMATION_CLASS",
          "name": "KeyInformationClass"
        },
        {
          "in_out": "__out_opt",
          "type": "PVOID",
          "name": "KeyInformation"
        },
        {
          "in_out": "__in",
          "type": "ULONG",
          "name": "Length"
        },
        {
          "in_out": "__out",
          "type": "PULONG",
          "name": "ResultLengththe"
        }
      ]
    },
    "NtEnumerateValueKey": {
      "category": "Registry",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 6,
      "arguments": [
        {
          "in_out": "__in",
          "type": "HANDLE",
          "name": "KeyHandle"
        },
        {
          "in_out": "__in",
          "type": "ULONG",
          "name": "Index"
        },
        {
          "in_out": "__in",
          "type": "KEY_VALUE_INFORMATION_CLASS",
          "name": "KeyValueInformationClass"
        },
        {
          "in_out": "__out_opt",
          "type": "PVOID",
          "name": "KeyValueInformation"
        },
        {
          "in_out": "__in",
          "type": "ULONG",
          "name": "Length"
        },
        {
          "in_out": "__out",
          "type": "PULONG",
          "name": "ResultLengththe"
        }
      ]
    },
    "NtFindAtom": {
      "category": "Synchronization",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 3,
      "arguments": [
        {
          "in_out": "IN",
          "type": "PWCHAR",
          "name": "AtomName"
        },
        {
          "in_out": "IN",
          "type": "ULONG",
          "name": "AtomNameLength"
        },
        {
          "in_out": "OUT",
          "type": "PRTL_ATOM",
          "name": "Atom"
        }
      ]
    },
    "NtFlushInstructionCache": {
      "catetory": "",
      "dll": "ntdll.dll",
      "header": "",
      "n_arguments": 4,
      "arguments": [
        {
          "in_out": "IN",
          "type": "HANDLE",
          "name": "ProcessHandle"
        },
        {
          "in_out": "_in_opt_",
          "type": "PVOID",
          "name": "BaseAddress"
        },
        {
          "in_out": "IN",
          "type": "SIZE_T",
          "name": "RegionSize"
        }
        
      ]
    },
    "NtFreeVirtualMemory": {
      "category": "Processes",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 4,
      "arguments": [
        {
          "in_out": "IN",
          "type": "HANDLE",
          "name": "ProcessHandle"
        },
        {
          "in_out": "IN",
          "type": "PVOID",
          "name": "*BaseAddress"
        },
        {
          "in_out": "IN",
          "type": "PSIZE_T",
          "name": "RegionSize"
        },
        {
          "in_out": "IN",
          "type": "ULONG",
          "name": "FreeTypeThis"
        }
      ]
    },
    "NtGetContextThread": {
      "category": "Processes",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 2,
      "arguments": [
        {
          "in_out": "__in",
          "type": "HANDLE",
          "name": "ThreadHandle"
        },
        {
          "in_out": "__inout",
          "type": "LPCONTEXT",
          "name": "ContextCopyright"
        }
      ]
    },
    "NtGetCurrentProcessorNumber": {
      "category": "Processes",
      "dll": "Ntdll.dll",
      "header": "",
      "return_type": "ULONG",
      "n_arguments": 0,
      "arguments": []
    },
    "NtMapViewOfSection": {
      "category": "Processes",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 10,
      "arguments": [
        {
          "in_out": "__in",
          "type": "HANDLE",
          "name": "SectionHandle"
        },
        {
          "in_out": "__in",
          "type": "HANDLE",
          "name": "ProcessHandle"
        },
        {
          "in_out": "__inout",
          "type": "PVOID",
          "name": "*BaseAddress"
        },
        {
          "in_out": "__in",
          "type": "ULONG_PTR",
          "name": "ZeroBits"
        },
        {
          "in_out": "__in",
          "type": "SIZE_T",
          "name": "CommitSize"
        },
        {
          "in_out": "__inout",
          "type": "PLARGE_INTEGER",
          "name": "SectionOffset"
        },
        {
          "in_out": "__inout",
          "type": "PSIZE_T",
          "name": "ViewSize"
        },
        {
          "in_out": "__in",
          "type": "UINT",
          "name": "InheritDisposition"
        },
        {
          "in_out": "__in",
          "type": "ULONG",
          "name": "AllocationType"
        },
        {
          "in_out": "__in",
          "type": "ULONG",
          "name": "Win32Protectbut"
        }
      ]
    },
    "NtOpenDirectoryObject": {
      "category": "Files and I/O (Local file system)",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 3,
      "arguments": [
        {
          "in_out": "__out",
          "type": "PHANDLE",
          "name": "DirectoryHandle"
        },
        {
          "in_out": "__in",
          "type": "ACCESS_MASK",
          "name": "DesiredAccess"
        },
        {
          "in_out": "__in",
          "type": "POBJECT_ATTRIBUTES",
          "name": "ObjectAttributes"
        }
      ]
    },
    "NtOpenEvent": {
      "category": "Handle and Objects",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 3,
      "arguments": [
        {
          "in_out": "__out",
          "type": "PHANDLE",
          "name": "EventHandle"
        },
        {
          "in_out": "__in",
          "type": "ACCESS_MASK",
          "name": "DesiredAccess"
        },
        {
          "in_out": "__in",
          "type": "POBJECT_ATTRIBUTES",
          "name": "ObjectAttributes"
        }
      ]
    },
    "NtOpenFile": {
      "category": "Files and I/O (Local file system)",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 6,
      "arguments": [
        {
          "in_out": "__out",
          "type": "PHANDLE",
          "name": "FileHandle"
        },
        {
          "in_out": "__in",
          "type": "ACCESS_MASK",
          "name": "DesiredAccess"
        },
        {
          "in_out": "__in",
          "type": "POBJECT_ATTRIBUTES",
          "name": "ObjectAttributes"
        },
        {
          "in_out": "__out",
          "type": "PIO_STATUS_BLOCK",
          "name": "IoStatusBlock"
        },
        {
          "in_out": "__in",
          "type": "ULONG",
          "name": "ShareAccess"
        },
        {
          "in_out": "__in",
          "type": "ULONG",
          "name": "OpenOptionsthe"
        }
      ]
    },
    "NtOpenKey": {
      "category": "Registry",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 3,
      "arguments": [
        {
          "in_out": "__out",
          "type": "PHANDLE",
          "name": "KeyHandle"
        },
        {
          "in_out": "__in",
          "type": "ACCESS_MASK",
          "name": "DesiredAccess"
        },
        {
          "in_out": "__in",
          "type": "POBJECT_ATTRIBUTES",
          "name": "ObjectAttributes"
        }
      ]
    },
    "NtOpenKeyEx": {
      "category": "Registry",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 4,
      "arguments": [
        {
          "in_out": "__out",
          "type": "PHANDLE",
          "name": "KeyHandle"
        },
        {
          "in_out": "__in",
          "type": "ACCESS_MASK",
          "name": "DesiredAccess"
        },
        {
          "in_out": "__in",
          "type": "POBJECT_ATTRIBUTES",
          "name": "ObjectAttributes"
        },
        {
          "in_out": "__in",
          "type": "ULONG",
          "name": "OpenOptionsThis"
        }
      ]
    },
    "NtOpenMutant": {
      "category": "Synchronization",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 3,
      "arguments": [
        {
          "in_out": "__out",
          "type": "PHANDLE",
          "name": "MutantHandle"
        },
        {
          "in_out": "__in",
          "type": "ACCESS_MASK",
          "name": "DesiredAccess"
        },
        {
          "in_out": "__in",
          "type": "POBJECT_ATTRIBUTES",
          "name": "ObjectAttributes"
        }
      ]
    },
    "NtOpenProcess": {
      "category": "Processes",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 4,
      "arguments": [
        {
          "in_out": "__out",
          "type": "PHANDLE",
          "name": "ProcessHandle"
        },
        {
          "in_out": "__in",
          "type": "ACCESS_MASK",
          "name": "DesiredAccess"
        },
        {
          "in_out": "__in",
          "type": "PVOID",
          "name": "ObjectAttributes"
        },
        {
          "in_out": "__in_opt",
          "type": "PVOID",
          "name": "ClientId"
        }
      ]
    },
    "NtOpenProcessToken": {
      "category": "Processes",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 3,
      "arguments": [
        {
          "in_out": "__in",
          "type": "HANDLE",
          "name": "ProcessHandle"
        },
        {
          "in_out": "__in",
          "type": "ACCESS_MASK",
          "name": "DesiredAccess"
        },
        {
          "in_out": "__out",
          "type": "PHANDLE",
          "name": "TokenHandle"
        }
      ]
    },
    "NtOpenSection": {
      "category": "Processes",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 3,
      "arguments": [
        {
          "in_out": "__out",
          "type": "PHANDLE",
          "name": "SectionHandle"
        },
        {
          "in_out": "__in",
          "type": "ACCESS_MASK",
          "name": "DesiredAccess"
        },
        {
          "in_out": "__in",
          "type": "POBJECT_ATTRIBUTES",
          "name": "ObjectAttributes"
        }
      ]
    },
    "NtOpenThread": {
      "category": "Processes",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 4,
      "arguments": [
        {
          "in_out": "__out",
          "type": "PHANDLE",
          "name": "ThreadHandle"
        },
        {
          "in_out": "__in",
          "type": "ACCESS_MASK",
          "name": "DesiredAccess"
        },
        {
          "in_out": "__in",
          "type": "POBJECT_ATTRIBUTES",
          "name": "ObjectAttributes"
        },
        {
          "in_out": "__in",
          "type": "PCLIENT_ID",
          "name": "ClientId"
        }
      ]
    },
    "NtProtectVirtualMemory": {
      "category": "Memory Management",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 5,
      "arguments": [
        {
          "in_out": "IN",
          "type": "HANDLE",
          "name": "ProcessHandle"
        },
        {
          "in_out": "IN OUT",
          "type": "PVOID*",
          "name": "BaseAddress"
        },
        {
          "in_out": "IN OUT",
          "type": "PSIZE_T",
          "name": "RegionSize"
        },
        {
          "in_out": "IN",
          "type": "ULONG",
          "name": "NewAccessProtection"
        },
        {
          "in_out": "OUT",
          "type": "PULONG",
          "name": "OldAccessProtection"
        }
      ]
    },
    "NtQueryAttributesFile": {
      "category": "Files and I/O (Local file system)",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 2,
      "arguments": [
        {
          "in_out": "__in",
          "type": "POBJECT_ATTRIBUTES",
          "name": "ObjectAttributes"
        },
        {
          "in_out": "__out",
          "type": "PFILE_BASIC_INFORMATION",
          "name": "FileInformationCopyright"
        }
      ]
    },
    "NtQueryDirectoryFile": {
      "category": "Files and I/O (Local file system)",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 11,
      "arguments": [
        {
          "in_out": "__in",
          "type": "HANDLE",
          "name": "FileHandle"
        },
        {
          "in_out": "__in_opt",
          "type": "HANDLE",
          "name": "Event"
        },
        {
          "in_out": "__in_opt",
          "type": "PIO_APC_ROUTINE",
          "name": "ApcRoutine"
        },
        {
          "in_out": "__in_opt",
          "type": "PVOID",
          "name": "ApcContext"
        },
        {
          "in_out": "__out",
          "type": "PIO_STATUS_BLOCK",
          "name": "IoStatusBlock"
        },
        {
          "in_out": "__out",
          "type": "PVOID",
          "name": "FileInformation"
        },
        {
          "in_out": "__in",
          "type": "ULONG",
          "name": "Length"
        },
        {
          "in_out": "__in",
          "type": "FILE_INFORMATION_CLASS",
          "name": "FileInformationClass"
        },
        {
          "in_out": "__in",
          "type": "BOOLEAN",
          "name": "ReturnSingleEntry"
        },
        {
          "in_out": "__in_opt",
          "type": "PUNICODE_STRING",
          "name": "FileName"
        },
        {
          "in_out": "__in",
          "type": "BOOLEAN",
          "name": "RestartScanMERCHANTABILITY"
        }
      ]
    },
    "NtQueryFullAttributesFile": {
      "category": "Files and I/O (Local file system)",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 2,
      "arguments": [
        {
          "in_out": "__in",
          "type": "POBJECT_ATTRIBUTES",
          "name": "ObjectAttributes"
        },
        {
          "in_out": "__out",
          "type": "PFILE_NETWORK_OPEN_INFORMATION",
          "name": "FileInformationCopyright"
        }
      ]
    },
    "NtQueryInformationAtom": {
      "category": "Synchronization",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 5,
      "arguments": [
        {
          "in_out": "IN",
          "type": "RTL_ATOM",
          "name": "Atom"
        },
        {
          "in_out": "IN",
          "type": "ATOM_INFORMATION_CLASS",
          "name": "AtomInformationClass"
        },
        {
          "in_out": "OUT",
          "type": "PVOID",
          "name": "AtomInformation"
        },
        {
          "in_out": "IN",
          "type": "ULONG",
          "name": "AtomInformationLength"
        },
        {
          "in_out": "OUT",
          "type": "PULONG",
          "name": "ReturnLength"
        }
      ]
    },
    "NtQueryInformationFile": {
      "category": "Files and I/O (Local file system)",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 5,
      "arguments": [
        {
          "in_out": "__in",
          "type": "HANDLE",
          "name": "FileHandle"
        },
        {
          "in_out": "__out",
          "type": "PIO_STATUS_BLOCK",
          "name": "IoStatusBlock"
        },
        {
          "in_out": "__out",
          "type": "PVOID",
          "name": "FileInformation"
        },
        {
          "in_out": "__in",
          "type": "ULONG",
          "name": "Length"
        },
        {
          "in_out": "__in",
          "type": "FILE_INFORMATION_CLASS",
          "name": "FileInformationClassit"
        }
      ]
    },
    "NtQueryInformationProcess": {
      "category": "Processes",
      "dll": "Ntdll.dll",
      "header": "Winternl.h",
      "return_type": "NTSTATUS",
      "n_arguments": 5,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "ProcessHandle",
          "description": "A handle to the process for which information is to be retrieved."
        },
        {
          "in_out": "_In_",
          "type": "PROCESSINFOCLASS",
          "name": "ProcessInformationClass",
          "description": "The type of process information to be retrieved. This parameter can be one of the following values from the PROCESSINFOCLASS enumeration.  ValueMeaning  ProcessBasicInformation 0   Retrieves a pointer to a PEB structure that can be used to determine whether the specified process is being debugged, and a unique value used by the system to identify the specified process.  It is best to use the CheckRemoteDebuggerPresent and GetProcessId  functions to obtain this information.   ProcessDebugPort 7   Retrieves a DWORD_PTR value that is the port number of the debugger for the process. A nonzero value indicates that the process is being run under the control of a ring 3 debugger. It is best to use the CheckRemoteDebuggerPresent or IsDebuggerPresent function.   ProcessWow64Information 26   Determines whether the process is running in the WOW64 environment (WOW64 is the x86 emulator that allows Win32-based applications to run on 64-bit Windows). It is best to use the  IsWow64Process function to obtain this information.   ProcessImageFileName 27   Retrieves a UNICODE_STRING value containing the name of the image file for the process. It is best to use the QueryFullProcessImageName or GetProcessImageFileName function to obtain this information.   ProcessBreakOnTermination 29   Retrieves a ULONG value indicating whether the process is considered critical. Note  This value can be used starting in Windows XP with SP3. Starting in Windows 8.1, IsProcessCritical should be used instead.     ProcessSubsystemInformation 75   Retrieves a SUBSYSTEM_INFORMATION_TYPE value indicating the subsystem type of the process. The buffer pointed to by the ProcessInformation parameter should be large enough to hold a single SUBSYSTEM_INFORMATION_TYPE enumeration."
        },
        {
          "in_out": "_Out_",
          "type": "PVOID",
          "name": "ProcessInformation",
          "description": "A pointer to a buffer supplied by the calling application into which the function writes the requested information. The size of the information written varies depending on the data type of the ProcessInformationClass parameter:   PROCESS_BASIC_INFORMATION  When the ProcessInformationClass  parameter is ProcessBasicInformation,  the buffer pointed to by the ProcessInformation parameter should be large enough to hold a single PROCESS_BASIC_INFORMATION structure having the following layout:       Copy     typedef struct _PROCESS_BASIC_INFORMATION {     PVOID Reserved1;     PPEB PebBaseAddress;     PVOID Reserved2[2];     ULONG_PTR UniqueProcessId;     PVOID Reserved3; } PROCESS_BASIC_INFORMATION;     The UniqueProcessId member points to the system's unique identifier for this process. It is best to use the GetProcessId function to retrieve this information. The PebBaseAddress member points to a PEB structure. The  other members of this structure are reserved for internal use by the operating system.  ULONG_PTR  When the ProcessInformationClass  parameter is ProcessWow64Information,  the buffer pointed to by the ProcessInformation parameter should be large enough to hold a  ULONG_PTR. If this value is nonzero, the process is running in a WOW64 environment; otherwise, if the value is equal to zero, the process is not running in a WOW64 environment. It is best to use the IsWow64Process function to determine whether a process is running in the WOW64 environment.  UNICODE_STRING  When the ProcessInformationClass  parameter is ProcessImageFileName,  the buffer pointed to by the ProcessInformation parameter should be large enough to hold a  UNICODE_STRING structure as well as the string itself. The string stored in the Buffer member is the name of the image file. If the buffer is too small, the function fails with the STATUS_INFO_LENGTH_MISMATCH error code and the ReturnLength parameter is set to the required buffer size."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "ProcessInformationLength",
          "description": "The size of the buffer pointed to by the ProcessInformation parameter, in bytes."
        },
        {
          "in_out": "_Out_opt_",
          "type": "PULONG",
          "name": "ReturnLength",
          "description": "A pointer to a variable in which the function returns the size of the requested information. If the function was successful, this is the size of the information written to the buffer pointed to by the ProcessInformation parameter, but if the buffer was too small, this is the minimum size of buffer needed to receive the information successfully."
        }
      ]
    },
    "NtQueryInformationThread": {
      "category": "Processes",
      "dll": "Ntdll.dll",
      "header": "Winternl.h",
      "return_type": "NTSTATUS",
      "n_arguments": 5,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "ThreadHandle",
          "description": "A handle to the thread about which information is being requested."
        },
        {
          "in_out": "_In_",
          "type": "THREADINFOCLASS",
          "name": "ThreadInformationClass",
          "description": "If this parameter is the ThreadIsIoPending value of the  THREADINFOCLASS enumeration, the function determines whether the thread has any I/O operations pending. Use the public  function GetThreadIOPendingFlag instead to obtain this information. If this parameter is the ThreadQuerySetWin32StartAddress value of the THREADINFOCLASS enumeration, the function returns the start address of the thread. Note that on versions of Windows prior to Windows Vista, the returned start address is only reliable before the thread starts running. If this parameter is the ThreadSubsystemInformation value of the  THREADINFOCLASS enumeration, the function retrieves a SUBSYSTEM_INFORMATION_TYPE value indicating the subsystem type of the thread. The buffer pointed to by the ThreadInformation parameter should be large enough to hold a single SUBSYSTEM_INFORMATION_TYPE enumeration."
        },
        {
          "in_out": "_Inout_",
          "type": "PVOID",
          "name": "ThreadInformation",
          "description": "A pointer to a buffer in which the function writes the requested information. If ThreadIsIoPending is specified for the ThreadInformationClass parameter, this buffer must be large enough to hold a ULONG value, which indicates whether  the specified thread has I/O requests pending. If this value is equal to zero, then there are no I/O operations pending; otherwise, if the value is nonzero, then the thread does have I/O operations pending. Use the public  function GetThreadIOPendingFlag instead to obtain this information. If ThreadQuerySetWin32StartAddress is specified for the ThreadInformationClass parameter, this buffer must be large enough to hold a PVOID value, which is the start address of the thread."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "ThreadInformationLength",
          "description": "The size of the buffer pointed to by the ThreadInformation parameter, in bytes."
        },
        {
          "in_out": "_Out_opt_",
          "type": "PULONG",
          "name": "ReturnLength",
          "description": "A pointer to a variable in which the function returns the size of the requested information. If the function was successful, this is the size of the information written to the buffer pointed to by the ThreadInformation parameter, but if the buffer was too small, this is the minimum size of buffer required to receive the information successfully."
        }
      ]
    },
    "NtQueryInformationToken": {
      "category": "Processes",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 5,
      "arguments": [
        {
          "in_out": "IN",
          "type": "HANDLE",
          "name": "TokenHandle"
        },
        {
          "in_out": "IN",
          "type": "TOKEN_INFORMATION_CLASS",
          "name": "TokenInformationClass"
        },
        {
          "in_out": "OUT",
          "type": "PVOID",
          "name": "TokenInformation"
        },
        {
          "in_out": "IN",
          "type": "ULONG",
          "name": "TokenInformationLength"
        },
        {
          "in_out": "OUT",
          "type": "PULONG",
          "name": "ReturnLength"
        }
      ]
    },
    "NtQueryKey": {
      "category": "Registry",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 5,
      "arguments": [
        {
          "in_out": "__in",
          "type": "HANDLE",
          "name": "KeyHandle"
        },
        {
          "in_out": "__in",
          "type": "KEY_INFORMATION_CLASS",
          "name": "KeyInformationClass"
        },
        {
          "in_out": "__out_opt",
          "type": "PVOID",
          "name": "KeyInformation"
        },
        {
          "in_out": "__in",
          "type": "ULONG",
          "name": "Length"
        },
        {
          "in_out": "__out",
          "type": "PULONG",
          "name": "ResultLengthit"
        }
      ]
    },
    "NtQueryLicenseValue": {
      "category": "Software Licensing",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 5,
      "arguments": [
        {
          "in_out": "__in",
          "type": "PUNICODE_STRING",
          "name": "Name"
        },
        {
          "in_out": "__in_opt",
          "type": "ULONG*",
          "name": "Type"
        },
        {
          "in_out": "__in_opt",
          "type": "PVOID",
          "name": "Buffer"
        },
        {
          "in_out": "__in",
          "type": "ULONG",
          "name": "Length"
        },
        {
          "in_out": "__in",
          "type": "ULONG*",
          "name": "DataLengthit"
        }
      ]
    },
    "NtQuerySystemInformation": {
      "category": "System Information Functions",
      "dll": "Ntdll.dll",
      "header": "Winternl.h",
      "return_type": "NTSTATUS",
      "n_arguments": 4,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "SYSTEM_INFORMATION_CLASS",
          "name": "SystemInformationClass",
          "description": "One of the values enumerated in SYSTEM_INFORMATION_CLASS, which indicate the kind of system information to be retrieved. These include the following values.  SystemBasicInformation   Returns the number of processors in the system in a SYSTEM_BASIC_INFORMATION structure. Use the GetSystemInfo function instead.  SystemCodeIntegrityInformation   Returns a SYSTEM_CODEINTEGRITY_INFORMATION structure that can be used to determine the options being enforced by Code Integrity on the system.  SystemExceptionInformation   Returns an opaque SYSTEM_EXCEPTION_INFORMATION structure that can be used to generate an unpredictable seed for a random number generator. Use the CryptGenRandom function instead.  SystemInterruptInformation   Returns an opaque SYSTEM_INTERRUPT_INFORMATION structure that can be used to generate an unpredictable seed for a random number generator. Use the CryptGenRandom function instead.  SystemLookasideInformation   Returns an opaque SYSTEM_LOOKASIDE_INFORMATION structure that can be used to generate an unpredictable seed for a random number generator. Use the CryptGenRandom function instead.  SystemPerformanceInformation   Returns an opaque SYSTEM_PERFORMANCE_INFORMATION structure that can be used to generate an unpredictable seed for a random number generator. Use the CryptGenRandom function instead.  SystemProcessInformation   Returns an array of SYSTEM_PROCESS_INFORMATION structures, one for each process running in the system.  These structures contain information about the resource usage of each process, including the number of handles used by the process, the peak page-file usage, and the number of memory pages that the process has allocated.  SystemProcessorPerformanceInformation   Returns an array of SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION structures, one for each processor installed in the system.  SystemQueryPerformanceCounterInformation   Returns a SYSTEM_QUERY_PERFORMANCE_COUNTER_INFORMATION structure that can be used to determine whether the system requires a kernel transition to retrieve the high-resolution performance counter information through a QueryPerformanceCounter function call.    SystemRegistryQuotaInformation   Returns a SYSTEM_REGISTRY_QUOTA_INFORMATION structure.  SystemTimeOfDayInformation   Returns an opaque SYSTEM_TIMEOFDAY_INFORMATION structure that can be used to generate an unpredictable seed for a random number generator. Use the CryptGenRandom function instead.  SystemPolicyInformation   Returns policy information in a SYSTEM_POLICY_INFORMATION structure. Use the SLGetWindowsInformation function instead to obtain policy information."
        },
        {
          "in_out": "_Inout_",
          "type": "PVOID",
          "name": "SystemInformation",
          "description": "A pointer to a buffer that receives the requested information. The size and structure of this information varies depending on the value of the SystemInformationClass parameter:  SYSTEM_BASIC_INFORMATION   When the SystemInformationClass  parameter is SystemBasicInformation,  the buffer pointed to by the SystemInformation parameter should be large enough to hold a single SYSTEM_BASIC_INFORMATION structure having the following layout:        Copy     typedef struct _SYSTEM_BASIC_INFORMATION {     BYTE Reserved1[24];     PVOID Reserved2[4];     CCHAR NumberOfProcessors; } SYSTEM_BASIC_INFORMATION;      The NumberOfProcessors member contains the number of processors present in the system. Use GetSystemInfo instead to retrieve this information. The  other members of the structure are reserved for internal use by the operating system.  SYSTEM_CODEINTEGRITY_INFORMATION   When the SystemInformationClass  parameter is SystemCodeIntegrityInformation,  the buffer pointed to by the SystemInformation parameter should be large enough to hold a single SYSTEM_CODEINTEGRITY_INFORMATION structure having the following layout:        Copy     typedef struct _SYSTEM_CODEINTEGRITY_INFORMATION {     ULONG  Length;     ULONG  CodeIntegrityOptions; } SYSTEM_CODEINTEGRITY_INFORMATION, *PSYSTEM_CODEINTEGRITY_INFORMATION;     The Length member contains the size of the structure in bytes. This must be set by the caller. The CodeIntegrityOptions member contains a bitmask to identify code integrity options.   ValueMeaning 0x01CODEINTEGRITY_OPTION_ENABLEDEnforcement of kernel mode Code Integrity is enabled. 0x02CODEINTEGRITY_OPTION_TESTSIGNTest signed content is allowed by Code Integrity. 0x04CODEINTEGRITY_OPTION_UMCI_ENABLEDEnforcement of user mode Code Integrity is enabled. 0x08CODEINTEGRITY_OPTION_UMCI_AUDITMODE_ENABLEDEnforcement of user mode Code Integrity is enabled in audit mode. Executables will be allowed to run/load; however, audit events will be recorded.  0x10CODEINTEGRITY_OPTION_UMCI_EXCLUSIONPATHS_ENABLED User mode binaries being run from certain paths are allowed to run even if they fail code integrity checks. Exclusion paths are listed in the following registry key in REG_MULTI_SZ format:   Key: HKLM\\SYSTEM\\CurrentControlSet\\Control\\CI\\TRSData Value: TestPath  Paths added to this key should be in one of two formats:  Path (absolute or relative): \\Program Files\\TestAutomationPath Binary (specific): \\Program Files\\TestAutomationPath\\mybinary.exe  The following paths are restricted and cannot be added as an exclusion:  \\ \\Windows \\Windows\\System32 \\Program Files  Built-in Path Exclusions: The following paths are excluded by default. You don't need to specifically add these to path exclusions. This only applies on ARM (Windows Runtime).  \\Program Files\\WTT \\Program Files (x86)\\WTT \\WTT\\JobsWorkingDir  \\Program Files\\Common Files\\Model Design Environment \\TAEF  \\$ASITEMP \\ATDEVXCT1\\WTTInstall \\ATUEXCT1\\WTTInstall \\ATESCCT1\\WTTInstall  \\ATCORECT1\\WTTInstall \\ATStressCT1\\WTTInstall \\ATWSCCT1\\WTTInstall  \\ATFUNCT1\\WTTInstall \\ATIDCCT1\\WTTInstall \\ATDNTCT1\\WTTInstall   0x20CODEINTEGRITY_OPTION_TEST_BUILDThe build of Code Integrity is from a test build. 0x40CODEINTEGRITY_OPTION_PREPRODUCTION_BUILDThe build of Code Integrity is from a pre-production build. 0x80CODEINTEGRITY_OPTION_DEBUGMODE_ENABLEDThe kernel debugger is attached and Code Integrity may allow unsigned code to load. 0x100CODEINTEGRITY_OPTION_FLIGHT_BUILDThe build of Code Integrity is from a flight build. 0x200CODEINTEGRITY_OPTION_FLIGHTING_ENABLEDFlight signed content is allowed by Code Integrity. Flight signed content is content signed by the Microsoft Development Root Certificate Authority 2014.  0x400CODEINTEGRITY_OPTION_HVCI_KMCI_ENABLEDHypervisor enforced Code Integrity is enabled for kernel mode components. 0x800CODEINTEGRITY_OPTION_HVCI_KMCI_AUDITMODE_ENABLEDHypervisor enforced Code Integrity is enabled in audit mode. Audit events will be recorded for kernel mode components that are not compatible with HVCI. This bit can be set whether CODEINTEGRITY_OPTION_HVCI_KMCI_ENABLED is set or not. 0x1000CODEINTEGRITY_OPTION_HVCI_KMCI_STRICTMODE_ENABLEDHypervisor enforced Code Integrity is enabled for kernel mode components, but in strict mode.  0x2000CODEINTEGRITY_OPTION_HVCI_IUM_ENABLEDHypervisor enforced Code Integrity is enabled with enforcement of Isolated User Mode component signing.     SYSTEM_EXCEPTION_INFORMATION   When the SystemInformationClass  parameter is SystemExceptionInformation, the buffer pointed to by the SystemInformation parameter should be large enough to hold an opaque SYSTEM_EXCEPTION_INFORMATION structure for use in generating an unpredictable seed for a random number generator. For this purpose, the structure has the following layout:        Copy     typedef struct _SYSTEM_EXCEPTION_INFORMATION {     BYTE Reserved1[16]; } SYSTEM_EXCEPTION_INFORMATION;     Individual members of the structure are reserved for internal use by the operating system. Use the CryptGenRandom  function instead to generate cryptographically random data.  SYSTEM_INTERRUPT_INFORMATION   When the SystemInformationClass  parameter is SystemInterruptInformation, the buffer pointed to by the SystemInformation parameter should be large enough to hold an array that contains as many opaque  SYSTEM_INTERRUPT_INFORMATION structures as there are  processors (CPUs) installed on the system. Each structure, or the array as a whole, can be used to generate an unpredictable seed for a random number generator. For this purpose, the structure has the following layout:        Copy     typedef struct _SYSTEM_INTERRUPT_INFORMATION {     BYTE Reserved1[24]; } SYSTEM_INTERRUPT_INFORMATION;     Individual members of the structure are reserved for internal use by the operating system. Use the CryptGenRandom  function instead to generate cryptographically random data.  SYSTEM_LOOKASIDE_INFORMATION   When the SystemInformationClass  parameter is SystemLookasideInformation, the buffer pointed to by the SystemInformation parameter should be large enough to hold an opaque SYSTEM_LOOKASIDE_INFORMATION structure for use in generating an unpredictable seed for a random number generator. For this purpose, the structure has the following layout:        Copy     typedef struct _SYSTEM_LOOKASIDE_INFORMATION {     BYTE Reserved1[32]; } SYSTEM_LOOKASIDE_INFORMATION;     Individual members of the structure are reserved for internal use by the operating system. Use the CryptGenRandom  function instead to generate cryptographically random data.  SYSTEM_PERFORMANCE_INFORMATION   When the SystemInformationClass  parameter is SystemPerformanceInformation, the buffer pointed to by the SystemInformation parameter should be large enough to hold an opaque SYSTEM_PERFORMANCE_INFORMATION structure for use in generating an unpredictable seed for a random number generator. For this purpose, the structure has the following layout:        Copy     typedef struct _SYSTEM_PERFORMANCE_INFORMATION {     BYTE Reserved1[312]; } SYSTEM_PERFORMANCE_INFORMATION;     Individual members of the structure are reserved for internal use by the operating system. Use the CryptGenRandom  function instead to generate cryptographically random data.  SYSTEM_PROCESS_INFORMATION   When the SystemInformationClass  parameter is SystemProcessInformation,  the buffer pointed to by the SystemInformation parameter should be large enough to hold an array that contains as many SYSTEM_PROCESS_INFORMATION structures as there are processes running in the system. Each structure has the following layout:        Copy     typedef struct _SYSTEM_PROCESS_INFORMATION {     ULONG NextEntryOffset;     BYTE Reserved1[52];     PVOID Reserved2[3];     HANDLE UniqueProcessId;     PVOID Reserved3;     ULONG HandleCount;     BYTE Reserved4[4];     PVOID Reserved5[11];     SIZE_T PeakPagefileUsage;     SIZE_T PrivatePageCount;     LARGE_INTEGER Reserved6[6]; } SYSTEM_PROCESS_INFORMATION;     The start of the next item in the array is the address of the previous item plus the value in the NextEntryOffset member. For the last item in the array, NextEntryOffset is 0. The HandleCount member contains the total number of handles being used by the process in question; use GetProcessHandleCount  to retrieve this information instead. The PeakPagefileUsage member contains the  maximum number of bytes of page-file storage used by the process, and the PrivatePageCount member contains the number of memory pages allocated for the use of this process. You can also retrieve this information using either the GetProcessMemoryInfo function or the Win32_Process class. The  other members of the structure are reserved for internal use by the operating system.  SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION   When the SystemInformationClass  parameter is SystemProcessorPerformanceInformation,  the buffer pointed to by the SystemInformation parameter should be large enough to hold an array that contains as many SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION structures as there are processors (CPUs) installed in the system. Each structure has the following layout:        Copy     typedef struct _SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION {     LARGE_INTEGER IdleTime;     LARGE_INTEGER KernelTime;     LARGE_INTEGER UserTime;     LARGE_INTEGER Reserved1[2];     ULONG Reserved2; } SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION;     The IdleTime member contains the amount of time that the system has been idle, in 100-nanosecond intervals. The KernelTime member contains the amount of time that the system has spent executing in Kernel mode (including all threads in all processes, on all processors), in 100-nanosecond intervals. The UserTime member contains the amount of time that the system has spent executing in User mode (including all threads in all processes, on all processors), in 100-nanosecond intervals. Use GetSystemTimes instead to retrieve this information.  SYSTEM_QUERY_PERFORMANCE_COUNTER_INFORMATION   When the SystemInformationClass parameter is SystemQueryPerformanceCounterInformation, the buffer pointed to by the SystemInformation parameter should be large enough to hold a single SYSTEM_QUERY_PERFORMANCE_COUNTER_INFORMATION structure having the following layout:       Copy     typedef struct _SYSTEM_QUERY_PERFORMANCE_COUNTER_INFORMATION {     ULONG                           Version;     QUERY_PERFORMANCE_COUNTER_FLAGS Flags;     QUERY_PERFORMANCE_COUNTER_FLAGS ValidFlags; } SYSTEM_QUERY_PERFORMANCE_COUNTER_INFORMATION;      The Flags and ValidFlags members are QUERY_PERFORMANCE_COUNTER_FLAGS structures having the following layout:       Copy     typedef struct _QUERY_PERFORMANCE_COUNTER_FLAGS {     union {         struct {             ULONG KernelTransition:1;             ULONG Reserved:31;         };         ULONG ul;     }; } QUERY_PERFORMANCE_COUNTER_FLAGS;     The ValidFlags member of the SYSTEM_QUERY_PERFORMANCE_COUNTER_INFORMATION structure indicates which bits of the Flags member contain valid information. If a kernel transition is required, the KernelTransition bit is set in both ValidFlags and Flags. If a kernel transition is not required, the KernelTransition bit is set in ValidFlags and clear in Flags.  SYSTEM_REGISTRY_QUOTA_INFORMATION   When the SystemInformationClass  parameter is SystemRegistryQuotaInformation,  the buffer pointed to by the SystemInformation parameter should be large enough to hold a single SYSTEM_REGISTRY_QUOTA_INFORMATION structure having the following layout:        Copy     typedef struct _SYSTEM_REGISTRY_QUOTA_INFORMATION {     ULONG RegistryQuotaAllowed;     ULONG RegistryQuotaUsed;     PVOID Reserved1; } SYSTEM_REGISTRY_QUOTA_INFORMATION;     The RegistryQuotaAllowed member contains the maximum size, in bytes, that the Registry can attain on this system. The RegistryQuotaUsed member contains the current size of the Registry, in bytes. Use GetSystemRegistryQuota instead to retrieve this information. The  other member of the structure is reserved for internal use by the operating system.  SYSTEM_TIMEOFDAY_INFORMATION   When the SystemInformationClass  parameter is SystemTimeOfDayInformation, the buffer pointed to by the SystemInformation parameter should be large enough to hold an opaque SYSTEM_TIMEOFDAY_INFORMATION structure for use in generating an unpredictable seed for a random number generator. For this purpose, the structure has the following layout:        Copy     typedef struct _SYSTEM_TIMEOFDAY_INFORMATION {     BYTE Reserved1[48]; } SYSTEM_TIMEOFDAY_INFORMATION;     Individual members of the structure are reserved for internal use by the operating system. Use the CryptGenRandom  function instead to generate cryptographically random data.  SYSTEM_POLICY_INFORMATION   When the SystemInformationClass  parameter is SystemPolicyInformation, the buffer pointed to by the SystemInformation parameter should be large enough to hold a single SYSTEM_POLICY_INFORMATION structure having the following layout:        Copy     typedef struct _SYSTEM_POLICY_INFORMATION {     PVOID Reserved1[2];     ULONG Reserved2[3]; } SYSTEM_POLICY_INFORMATION;     Individual members of the structure are reserved for internal use by the operating system. Use the SLGetWindowsInformation  function instead to obtain policy information."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "SystemInformationLength",
          "description": "The size of the buffer pointed to by the SystemInformation parameter, in bytes."
        },
        {
          "in_out": "_Out_opt_",
          "type": "PULONG",
          "name": "ReturnLength",
          "description": "An optional pointer to a location where the function  writes the actual size of the information requested. If that size is less than or equal to the     SystemInformationLength parameter, the function copies the information into the SystemInformation buffer; otherwise, it returns an NTSTATUS error code and returns in ReturnLength the size of buffer required to receive the requested information."
        }
      ]
    },
    "NtQueryValueKey": {
      "category": "Registry",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 6,
      "arguments": [
        {
          "in_out": "__in",
          "type": "HANDLE",
          "name": "KeyHandle"
        },
        {
          "in_out": "__in",
          "type": "PUNICODE_STRING",
          "name": "ValueName"
        },
        {
          "in_out": "__in",
          "type": "KEY_VALUE_INFORMATION_CLASS",
          "name": "KeyValueInformationClass"
        },
        {
          "in_out": "__out_opt",
          "type": "PVOID",
          "name": "KeyValueInformation"
        },
        {
          "in_out": "__in",
          "type": "ULONG",
          "name": "Length"
        },
        {
          "in_out": "__out",
          "type": "PULONG",
          "name": "ResultLengththe"
        }
      ]
    },
    "NtQueueApcThread": {
      "category": "Processes",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 5,
      "arguments": [
        {
          "in_out": "__in",
          "type": "HANDLE",
          "name": "ThreadHandle"
        },
        {
          "in_out": "__in",
          "type": "PIO_APC_ROUTINE",
          "name": "ApcRoutine"
        },
        {
          "in_out": "__in_opt",
          "type": "PVOID",
          "name": "ApcRoutineContext"
        },
        {
          "in_out": "__in_opt",
          "type": "PIO_STATUS_BLOCK",
          "name": "ApcStatusBlock"
        },
        {
          "in_out": "__in_opt",
          "type": "PVOID",
          "name": "ApcReservedit"
        }
      ]
    },
    "NtRaiseHardError": {
      "category": "Error Handling",
      "dll": "",
      "header": "",
      "return_type": "WINAPI",
      "n_arguments": 6,
      "arguments": [
        {
          "in_out": "IN",
          "type": "NTSTATUS",
          "name": "ErrorStatus"
        },
        {
          "in_out": "IN",
          "type": "ULONG",
          "name": "NumberOfParameters"
        },
        {
          "in_out": "IN",
          "type": "ULONG",
          "name": "UnicodeStringParameterMask"
        },
        {
          "in_out": "IN",
          "type": "PULONG_PTR",
          "name": "Parameters"
        },
        {
          "in_out": "IN",
          "type": "ULONG",
          "name": "ValidResponseOptions"
        },
        {
          "in_out": "OUT",
          "type": "PULONG",
          "name": "Responsethe"
        }
      ]
    },
    "NtReadFile": {
      "category": "Files and I/O (Local file system)",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 9,
      "arguments": [
        {
          "in_out": "__in",
          "type": "HANDLE",
          "name": "FileHandle"
        },
        {
          "in_out": "__in_opt",
          "type": "HANDLE",
          "name": "Event"
        },
        {
          "in_out": "__in_opt",
          "type": "PIO_APC_ROUTINE",
          "name": "ApcRoutine"
        },
        {
          "in_out": "__in_opt",
          "type": "PVOID",
          "name": "ApcContext"
        },
        {
          "in_out": "__out",
          "type": "PIO_STATUS_BLOCK",
          "name": "IoStatusBlock"
        },
        {
          "in_out": "__out",
          "type": "PVOID",
          "name": "Buffer"
        },
        {
          "in_out": "__in",
          "type": "ULONG",
          "name": "Length"
        },
        {
          "in_out": "__in_opt",
          "type": "PLARGE_INTEGER",
          "name": "ByteOffset"
        },
        {
          "in_out": "__in_opt",
          "type": "PULONG",
          "name": "KeyThis"
        }
      ]
    },
    "NtReadVirtualMemory": {
      "category": "Processes",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 5,
      "arguments": [
        {
          "in_out": "__in",
          "type": "HANDLE",
          "name": "ProcessHandle"
        },
        {
          "in_out": "__in",
          "type": "LPCVOID",
          "name": "BaseAddress"
        },
        {
          "in_out": "__out",
          "type": "LPVOID",
          "name": "Buffer"
        },
        {
          "in_out": "__in",
          "type": "SIZE_T",
          "name": "NumberOfBytesToRead"
        },
        {
          "in_out": "__out_opt",
          "type": "PSIZE_T",
          "name": "NumberOfBytesReadit"
        }
      ]
    },
    "NtReleaseMutant": {
      "category": "Synchronization",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 2,
      "arguments": [
        {
          "in_out": "__in",
          "type": "HANDLE",
          "name": "MutantHandle"
        },
        {
          "in_out": "__out_opt",
          "type": "PLONG",
          "name": "PreviousCountCopyright"
        }
      ]
    },
    "NtResumeProcess": {
      "category": "Processes",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 1,
      "arguments": [
        {
          "in_out": "__in",
          "type": "HANDLE",
          "name": "ProcessHandleCuckoo"
        }
      ]
    },
    "NtResumeThread": {
      "category": "Processes",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 2,
      "arguments": [
        {
          "in_out": "__in",
          "type": "HANDLE",
          "name": "ThreadHandle"
        },
        {
          "in_out": "__out_opt",
          "type": "ULONG",
          "name": "*SuspendCountCopyright"
        }
      ]
    },
    "NtSetContextThread": {
      "category": "Processes",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 2,
      "arguments": [
        {
          "in_out": "__in",
          "type": "HANDLE",
          "name": "ThreadHandle"
        },
        {
          "in_out": "__in",
          "type": "CONTEXT",
          "name": "*ContextCopyright"
        }
      ]
    },
    "NtSetInformationFile": {
      "category": "Files and I/O (Local file system)",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 5,
      "arguments": [
        {
          "in_out": "__in",
          "type": "HANDLE",
          "name": "FileHandle"
        },
        {
          "in_out": "__out",
          "type": "PIO_STATUS_BLOCK",
          "name": "IoStatusBlock"
        },
        {
          "in_out": "__in",
          "type": "PVOID",
          "name": "FileInformation"
        },
        {
          "in_out": "__in",
          "type": "ULONG",
          "name": "Length"
        },
        {
          "in_out": "__in",
          "type": "FILE_INFORMATION_CLASS",
          "name": "FileInformationClassit"
        }
      ]
    },
    "NtSetInformationProcess": {
      "category": "Processes",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 4,
      "arguments": [
        {
          "in_out": "__in",
          "type": "HANDLE",
          "name": "ProcessHandle"
        },
        {
          "in_out": "__in",
          "type": "PROCESSINFOCLASS",
          "name": "ProcessInformationClass"
        },
        {
          "in_out": "__in",
          "type": "PVOID",
          "name": "ProcessInformation"
        },
        {
          "in_out": "__in",
          "type": "ULONG",
          "name": "ProcessInformationLengthThis"
        }
      ]
    },
    "NtSetTimerEx": {
      "category": "Timer",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 4,
      "arguments": [
        {
          "in_out": "IN",
          "type": "HANDLE",
          "name": "TimerHandle"
        },
        {
          "in_out": "IN",
          "type": "int",
          "name": "TimerSetInformationClass"
        },
        {
          "in_out": "__inout",
          "type": "PVOID",
          "name": "TimerSetInformation"
        },
        {
          "in_out": "IN",
          "type": "ULONG",
          "name": "TimerSetInformationLengthThis"
        }
      ]
    },
    "NtSetValueKey": {
      "category": "Registry",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 6,
      "arguments": [
        {
          "in_out": "__in",
          "type": "HANDLE",
          "name": "KeyHandle"
        },
        {
          "in_out": "__in",
          "type": "PUNICODE_STRING",
          "name": "ValueName"
        },
        {
          "in_out": "__in_opt",
          "type": "ULONG",
          "name": "TitleIndex"
        },
        {
          "in_out": "__in",
          "type": "ULONG",
          "name": "Type"
        },
        {
          "in_out": "__in_opt",
          "type": "PVOID",
          "name": "Data"
        },
        {
          "in_out": "__in",
          "type": "ULONG",
          "name": "DataSizethe"
        }
      ]
    },
    "NtSuspendThread": {
      "category": "Processes",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 2,
      "arguments": [
        {
          "in_out": "__in",
          "type": "HANDLE",
          "name": "ThreadHandle"
        },
        {
          "in_out": "__out_opt",
          "type": "ULONG",
          "name": "*PreviousSuspendCountCopyright"
        }
      ]
    },
    "NtTerminateProcess": {
      "category": "Processes",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 2,
      "arguments": [
        {
          "in_out": "__in_opt",
          "type": "HANDLE",
          "name": "ProcessHandle"
        },
        {
          "in_out": "__in",
          "type": "NTSTATUS",
          "name": "ExitStatusCopyright"
        }
      ]
    },
    "NtTerminateThread": {
      "category": "Processes",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 2,
      "arguments": [
        {
          "in_out": "__in",
          "type": "HANDLE",
          "name": "ThreadHandle"
        },
        {
          "in_out": "__in",
          "type": "NTSTATUS",
          "name": "ExitStatusCopyright"
        }
      ]
    },
    "NtUnmapViewOfSection": {
      "category": "Processes",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 2,
      "arguments": [
        {
          "in_out": "__in",
          "type": "HANDLE",
          "name": "ProcessHandle"
        },
        {
          "in_out": "__in_opt",
          "type": "PVOID",
          "name": "BaseAddressCopyright"
        }
      ]
    },
    "NtUnmapViewOfSectionEx": {
      "category": "Processes",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 3,
      "arguments": [
        {
          "in_out": "__in",
          "type": "HANDLE",
          "name": "ProcessHandle"
        },
        {
          "in_out": "__in_opt",
          "type": "PVOID",
          "name": "BaseAddress"
        },
        {
          "in_out": "__in",
          "type": "ULONG",
          "name": "Flags"
        }
      ]
    },
    "NtWaitForSingleObject": {
      "category": "Synchronization",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 3,
      "arguments": [
        {
          "in_out": "__in",
          "type": "HANDLE",
          "name": "Handle"
        },
        {
          "in_out": "__in",
          "type": "BOOLEAN",
          "name": "Alertable"
        },
        {
          "in_out": "__in_opt",
          "type": "PLARGE_INTEGER",
          "name": "Timeout"
        }
      ]
    },
    "NtWriteFile": {
      "category": "Files and I/O (Local file system)",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 9,
      "arguments": [
        {
          "in_out": "__in",
          "type": "HANDLE",
          "name": "FileHandle"
        },
        {
          "in_out": "__in_opt",
          "type": "HANDLE",
          "name": "Event"
        },
        {
          "in_out": "__in_opt",
          "type": "PIO_APC_ROUTINE",
          "name": "ApcRoutine"
        },
        {
          "in_out": "__in_opt",
          "type": "PVOID",
          "name": "ApcContext"
        },
        {
          "in_out": "__out",
          "type": "PIO_STATUS_BLOCK",
          "name": "IoStatusBlock"
        },
        {
          "in_out": "__in",
          "type": "PVOID",
          "name": "Buffer"
        },
        {
          "in_out": "__in",
          "type": "ULONG",
          "name": "Length"
        },
        {
          "in_out": "__in_opt",
          "type": "PLARGE_INTEGER",
          "name": "ByteOffset"
        },
        {
          "in_out": "__in_opt",
          "type": "PULONG",
          "name": "KeyThis"
        }
      ]
    },
    "NtWriteVirtualMemory": {
      "category": "Memory Management",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 5,
      "arguments": [
        {
          "in_out": "__in",
          "type": "HANDLE",
          "name": "ProcessHandle"
        },
        {
          "in_out": "__in",
          "type": "LPVOID",
          "name": "BaseAddress"
        },
        {
          "in_out": "__in",
          "type": "LPCVOID",
          "name": "Buffer"
        },
        {
          "in_out": "__in",
          "type": "ULONG",
          "name": "NumberOfBytesToWrite"
        },
        {
          "in_out": "__out_opt",
          "type": "PULONG",
          "name": "NumberOfBytesWritten"
        }
      ]
    },
    "NtYieldExecution": {
      "category": "Processes",
      "dll": "",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 1,
      "arguments": [
        {
          "in_out": "VOIDCuckoo",
          "type": "Sandbox",
          "name": "-"
        }
      ]
    },
    "ZwAllocateLocallyUniqueId": {
      "category": "Driver Support",
      "dll": "NtosKrnl.exe",
      "header": "Ntddk.h (include Ntddk.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 1,
      "arguments": [
        {
          "in_out": "_Out_",
          "type": "PLUID",
          "name": "LUID",
          "description": "Pointer to a caller-allocated buffer to receive a copy of the source LUID structure. The buffer must be at least sizeof(LUID)."
        }
      ]
    },
    "ZwAllocateVirtualMemory": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Ntifs.h (include Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 6,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "ProcessHandle",
          "description": "A handle for the process for which the mapping should be done. Use the NtCurrentProcess macro, defined in Ntddk.h, to specify the current process."
        },
        {
          "in_out": "_Inout_",
          "type": "PVOID*",
          "name": "BaseAddress",
          "description": "A pointer to a variable that will receive the base address of the allocated region of pages. If the initial value of this parameter is non-NULL, the region is allocated starting at the specified virtual address rounded down to the next host page size address boundary. If the initial value of this parameter is NULL, the operating system will determine where to allocate the region."
        },
        {
          "in_out": "_In_",
          "type": "ULONG_PTR",
          "name": "ZeroBits",
          "description": "The number of high-order address bits that must be zero in the base address of the section view. This value must be less than 21 and is used only when the operating system determines where to allocate the region, as when BaseAddress is NULL."
        },
        {
          "in_out": "_Inout_",
          "type": "PSIZE_T",
          "name": "RegionSize",
          "description": "A pointer to a variable that will receive the actual size, in bytes, of the allocated region of pages. The initial value of this parameter specifies the size, in bytes, of the region and is rounded up to the next host page size boundary. *RegionSize cannot be zero on input."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "AllocationType",
          "description": "A bitmask containing flags that specify the type of allocation to be performed. The following table describes these flags.  FlagMeaning  MEM_COMMIT  The specified region of pages is to be committed. One of MEM_COMMIT, MEM_RESET, or MEM_RESERVE must be set.   MEM_PHYSICAL  Allocate physical memory. This flag is solely for use with Address Windowing Extensions (AWE) memory.  If MEM_PHYSICAL is set, MEM_RESERVE must also be set. No other flags may be set. If MEM_PHYSICAL is set, Protect must be set to PAGE_READWRITE.   MEM_RESERVE  The specified region of pages is to be reserved. One of MEM_COMMIT, MEM_RESET, or MEM_RESERVE must be set.   MEM_RESET  Reset the state of the specified region so that if the pages are in paging file, they are discarded and pages of zeros are brought in. If the pages are in memory and modified, they are marked as not modified so that they will not be written out to the paging file. The contents are not zeroed. The Protect parameter is not used, but it must be set to a valid value.  One of MEM_COMMIT, MEM_RESET, or MEM_RESERVE must be set. If MEM_RESET is set, no other flag may be set.   MEM_TOP_DOWN  The specified region should be created at the highest virtual address possible based on ZeroBits."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "Protect",
          "description": "A bitmask containing page protection flags that specify the protection desired for the committed region of pages. The following table describes these flags.  FlagMeaning  PAGE_NOACCESS  No access to the committed region of pages is allowed. An attempt to read, write, or execute the committed region results in an access violation exception, called a general protection (GP) fault.   PAGE_READONLY  Read-only and execute access to the committed region of pages is allowed.  An attempt to write the committed region results in an access violation.   PAGE_READWRITE  Read, write, and execute access to the committed region of pages is allowed.  If write access to the underlying section is allowed, then a single copy of the pages is shared. Otherwise the pages are shared read only/copy on write.   PAGE_EXECUTE  Execute access to the committed region of pages is allowed. An attempt to read or write to the committed region results in an access violation.   PAGE_EXECUTE_READ  Execute and read access to the committed region of pages are allowed. An attempt to write to the committed region results in an access violation.   PAGE_EXECUTE_READWRITE  Execute, read, and write access to the committed region of pages are allowed.   PAGE_GUARD  Pages in the region become guard pages. Any attempt to read from or write to a guard page causes the system to raise a STATUS_GUARD_PAGE exception. Guard pages thus act as a one-shot access alarm.  This flag is a page protection modifier, valid only when used with one of the page protection flags other than PAGE_NOACCESS. When an access attempt leads the system to turn off guard page status, the underlying page protection takes over. If a guard page exception occurs during a system service, the service typically returns a failure status indicator.   PAGE_NOCACHE  The region of pages should be allocated as noncacheable. PAGE_NOCACHE is not allowed for sections.   PAGE_WRITECOMBINE  Enables write combining, that is, coalescing writes from cache to main memory, where the hardware supports it. This flag is used primarily for frame buffer memory so that writes to the same cache line are combined where possible before being written to the device. This can greatly reduce writes across the bus to (for example) video memory. If the hardware does not support write combining, the flag is ignored. This flag is a page protection modifier, valid only when used with one of the page protection flags other than PAGE_NOACCESS."
        }
      ]
    },
    "ZwClose": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h, Ntddk.h, or Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 1,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "Handle",
          "description": "Handle to an object of any type."
        }
      ]
    },
    "ZwCommitComplete": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h or Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 2,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "EnlistmentHandle",
          "description": "A handle to an enlistment object that was obtained by a previous call to ZwCreateEnlistment or ZwOpenEnlistment. The handle must have ENLISTMENT_SUBORDINATE_RIGHTS access to the object."
        },
        {
          "in_out": "_In_opt_",
          "type": "PLARGE_INTEGER",
          "name": "TmVirtualClock",
          "description": "A pointer to a virtual clock value. This parameter is optional and can be NULL."
        }
      ]
    },
    "ZwCommitEnlistment": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h or Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 2,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "EnlistmentHandle",
          "description": "A handle to an enlistment object that was obtained by a previous call to ZwCreateEnlistment or ZwOpenEnlistment. The object must represent a superior enlistment and the handle must have ENLISTMENT_SUPERIOR_RIGHTS access to the object."
        },
        {
          "in_out": "_In_opt_",
          "type": "PLARGE_INTEGER",
          "name": "TmVirtualClock",
          "description": "A pointer to a virtual clock value. This parameter is optional and can be NULL."
        }
      ]
    },
    "ZwCommitTransaction": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h or Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 2,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "TransactionHandle",
          "description": "A handle to a transaction object. Your component receives this handle from ZwCreateTransaction or ZwOpenTransaction. The handle must have TRANSACTION_COMMIT access to the object."
        },
        {
          "in_out": "_In_",
          "type": "BOOLEAN",
          "name": "Wait",
          "description": "A Boolean value that the caller sets to TRUE for synchronous operation or FALSE for asynchronous operation. If this parameter is TRUE, the call returns after the commit operation is complete."
        }
      ]
    },
    "ZwCreateDirectoryObject": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h, Ntddk.h, or Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 3,
      "arguments": [
        {
          "in_out": "_Out_",
          "type": "PHANDLE",
          "name": "DirectoryHandle",
          "description": "Pointer to a HANDLE variable that receives a handle to the object directory."
        },
        {
          "in_out": "_In_",
          "type": "ACCESS_MASK",
          "name": "DesiredAccess",
          "description": "Specifies an ACCESS_MASK value that determines the requested access to the object. In addition to the access rights that are defined for all types of objects (see ACCESS_MASK), the caller can specify one or more of the following access rights, which are specific to object directories:  ACCESS_MASK flagType of access  DIRECTORY_QUERY  Query   DIRECTORY_TRAVERSE  Name lookup   DIRECTORY_CREATE_OBJECT  Name creation   DIRECTORY_CREATE_SUBDIRECTORY  Subdirectory creation   DIRECTORY_ALL_ACCESS  All of the preceding types"
        },
        {
          "in_out": "_In_",
          "type": "POBJECT_ATTRIBUTES",
          "name": "ObjectAttributes",
          "description": "Pointer to an OBJECT_ATTRIBUTES structure that contains the object's attributes, which you must have already initialized by calling InitializeObjectAttributes."
        }
      ]
    },
    "ZwCreateEnlistment": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h, Ntddk.h, or Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 8,
      "arguments": [
        {
          "in_out": "_Out_",
          "type": "PHANDLE",
          "name": "EnlistmentHandle",
          "description": "A pointer to a caller-allocated variable that receives a handle to the new enlistment object if the call to ZwCreateEnlistment succeeds."
        },
        {
          "in_out": "_In_",
          "type": "ACCESS_MASK",
          "name": "DesiredAccess",
          "description": "An ACCESS_MASK value that specifies the caller's requested access to the enlistment object. In addition to the access rights that are defined for all kinds of objects (see ACCESS_MASK), the caller can specify any of the following access right flags for enlistment objects:  ACCESS_MASK flagAllows the caller to  ENLISTMENT_QUERY_INFORMATION  Query information about the enlistment (see ZwQueryInformationEnlistment).    ENLISTMENT_SET_INFORMATION  Set information for the enlistment (see ZwSetInformationEnlistment).    ENLISTMENT_RECOVER  Recover the enlistment (see ZwRecoverEnlistment).    ENLISTMENT_SUBORDINATE_RIGHTS  Perform operations that a resource manager that is not superior performs (see ZwRollbackEnlistment, ZwPrePrepareComplete, ZwPrepareComplete, ZwCommitComplete, ZwRollbackComplete, ZwSinglePhaseReject, ZwReadOnlyEnlistment).    ENLISTMENT_SUPERIOR_RIGHTS  Perform operations that a superior transaction manager must perform (see ZwPrepareEnlistment, ZwPrePrepareEnlistment, ZwCommitEnlistment).      Alternatively, you can specify one or more of the following ACCESS_MASK bitmaps. These bitmaps combine the flags from the previous table with the STANDARD_RIGHTS_XXX flags that are described on the ACCESS_MASK reference page. You can also combine these bitmaps together with additional flags from the previous table. The following table shows how the bitmaps correspond to specific access rights.   Generic access rightSet of specific access rights  ENLISTMENT_GENERIC_READ  STANDARD_RIGHTS_READ and ENLISTMENT_QUERY_INFORMATION   ENLISTMENT_GENERIC_WRITE  STANDARD_RIGHTS_WRITE, ENLISTMENT_SET_INFORMATION, ENLISTMENT_RECOVER, ENLISTMENT_REFERENCE, ENLISTMENT_SUBORDINATE_RIGHTS, and ENLISTMENT_SUPERIOR_RIGHTS   ENLISTMENT_GENERIC_EXECUTE  STANDARD_RIGHTS_EXECUTE, ENLISTMENT_RECOVER, ENLISTMENT_SUBORDINATE_RIGHTS, and ENLISTMENT_SUPERIOR_RIGHTS   ENLISTMENT_ALL_ACCESS  STANDARD_RIGHTS_REQUIRED, ENLISTMENT_GENERIC_READ, ENLISTMENT_GENERIC_WRITE, and ENLISTMENT_GENERIC_EXECUTE"
        },
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "ResourceManagerHandle",
          "description": "A handle to the caller's resource manager object that was obtained by a previous call to ZwCreateResourceManager or ZwOpenResourceManager."
        },
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "TransactionHandle",
          "description": "A handle to a transaction object that was obtained by a previous call to ZwCreateTransaction or ZwOpenTransaction. KTM adds this transaction to the list of transactions that the calling resource manager is handling."
        },
        {
          "in_out": "_In_opt_",
          "type": "POBJECT_ATTRIBUTES",
          "name": "ObjectAttributes",
          "description": "A pointer to an OBJECT_ATTRIBUTES structure that specifies the object name and other attributes. Use the InitializeObjectAttributes routine to initialize this structure. If the caller is not running in a system thread context, it must set the OBJ_KERNEL_HANDLE attribute when it calls InitializeObjectAttributes. This parameter is optional and can be NULL."
        },
        {
          "in_out": "_In_opt_",
          "type": "ULONG",
          "name": "CreateOptions",
          "description": "Enlistment option flags. The following table contains the only available flag.   CreateOptions flagMeaning  ENLISTMENT_SUPERIOR  The caller is enlisting as a superior transaction manager for the specified transaction.     This parameter is optional and can be zero."
        },
        {
          "in_out": "_In_",
          "type": "NOTIFICATION_MASK",
          "name": "NotificationMask",
          "description": "A bitwise OR of TRANSACTION_NOTIFY_XXX values that are defined in Ktmtypes.h. This mask specifies the types of transaction notifications that KTM sends to the caller."
        },
        {
          "in_out": "_In_opt_",
          "type": "PVOID",
          "name": "EnlistmentKey",
          "description": "A pointer to caller-defined information that uniquely identifies the enlistment. The resource manager receives this pointer when it calls ZwGetNotificationResourceManager or when KTM calls the ResourceManagerNotification callback routine. The resource manager can maintain a reference count for this key by calling TmReferenceEnlistmentKey and TmDereferenceEnlistmentKey. This parameter is optional and can be NULL."
        }
      ]
    },
    "ZwCreateEvent": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Ntifs.h (include Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 5,
      "arguments": [
        {
          "in_out": "_Out_",
          "type": "PHANDLE",
          "name": "EventHandle",
          "description": "A pointer to a variable that will receive the event object handle. The handle includes bookkeeping information, such as a reference count and security context."
        },
        {
          "in_out": "_In_",
          "type": "ACCESS_MASK",
          "name": "DesiredAccess",
          "description": "The ACCESS_MASK value that represents the desired types of access for the event object. The following table contains the event-specific ACCESS_MASK values.  ValueDesired access EVENT_QUERY_STATEQuery the state of the event object. EVENT_MODIFY_STATEModify the state of the event object. EVENT_ALL_ACCESSAll possible access rights to the event object."
        },
        {
          "in_out": "_In_opt_",
          "type": "POBJECT_ATTRIBUTES",
          "name": "ObjectAttributes",
          "description": "A pointer to the object attributes structure supplied by the caller to be used for the specified object. These attributes would include the ObjectName and the SECURITY_DESCRIPTOR, for example. This parameter is initialized by calling the InitializeObjectAttributes macro."
        },
        {
          "in_out": "_In_",
          "type": "EVENT_TYPE",
          "name": "EventType",
          "description": "The type of the event, which can be SynchronizationEvent or a NotificationEvent. These values belong to the EVENT_TYPE enumeration, which is defined in the Ntdef.h header file.  The event type can be modified with the REALTIME_OBJECT_FLAG modifier to provide priority-ordered queuing of wait requests."
        },
        {
          "in_out": "_In_",
          "type": "BOOLEAN",
          "name": "InitialState",
          "description": "The initial state of the event object. Set to TRUE to initialize the event object to the Signaled state. Set to FALSE to initialize the event object to the not-Signaled state."
        }
      ]
    },
    "ZwCreateFile": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h, Ntddk.h, or Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 11,
      "arguments": [
        {
          "in_out": "_Out_",
          "type": "PHANDLE",
          "name": "FileHandle",
          "description": "A pointer to a HANDLE variable that receives a handle to the file."
        },
        {
          "in_out": "_In_",
          "type": "ACCESS_MASK",
          "name": "DesiredAccess",
          "description": "Specifies an ACCESS_MASK value that determines the requested access to the object. In addition to the access rights that are defined for all types of objects, the caller can specify any of the following access rights, which are specific to files.  ACCESS_MASK flagAllows caller to do this  FILE_READ_DATA  Read data from the file.   FILE_READ_ATTRIBUTES  Read the attributes of the file. (For more information, see the description of the FileAttributes parameter.)   FILE_READ_EA  Read the extended attributes (EAs) of the file. This flag is irrelevant for device and intermediate drivers.   FILE_WRITE_DATA  Write data to the file.   FILE_WRITE_ATTRIBUTES  Write the attributes of the file. (For more information, see the description of the FileAttributes parameter.)   FILE_WRITE_EA   Change the extended attributes (EAs) of the file. This flag is irrelevant for device and intermediate drivers.   FILE_APPEND_DATA  Append data to the file.   FILE_EXECUTE  Use system paging I/O to read data from the file into memory. This flag is irrelevant for device and intermediate drivers.     Note    Do not specify FILE_READ_DATA, FILE_WRITE_DATA, FILE_APPEND_DATA, or FILE_EXECUTE when you create or open a directory.   The caller can only specify a generic access right, GENERIC_XXX, for a file, not a directory. Generic access rights correspond to specific access rights as shown in the following table.  Generic access rightSet of specific access rights  GENERIC_READ  STANDARD_RIGHTS_READ, FILE_READ_DATA, FILE_READ_ATTRIBUTES,  FILE_READ_EA, and SYNCHRONIZE.   GENERIC_WRITE  STANDARD_RIGHTS_WRITE, FILE_WRITE_DATA, FILE_WRITE_ATTRIBUTES, FILE_WRITE_EA, FILE_APPEND_DATA, and SYNCHRONIZE.   GENERIC_EXECUTE  STANDARD_RIGHTS_EXECUTE, FILE_EXECUTE, FILE_READ_ATTRIBUTES, and SYNCHRONIZE. This value is irrelevant for device and intermediate drivers.   GENERIC_ALL  FILE_ALL_ACCESS.     For example, if you specify GENERIC_READ for a file object, the routine maps this value to the FILE_GENERIC_READ bitmask of specific access rights. In the preceding table, the specific access rights that are listed for GENERIC_READ correspond to the access flags that are contained in the FILE_GENERIC_READ bitmask. If the file is actually a directory, the caller can also specify the following generic access rights.  DesiredAccess flagAllows caller to do this  FILE_LIST_DIRECTORY  List the files in the directory.   FILE_TRAVERSE  Traverse the directory, in other words, include the directory in the path of a file.     For more information about access rights, see ACCESS_MASK."
        },
        {
          "in_out": "_In_",
          "type": "POBJECT_ATTRIBUTES",
          "name": "ObjectAttributes",
          "description": "A pointer to an OBJECT_ATTRIBUTES structure that specifies the object name and other attributes. Use InitializeObjectAttributes to initialize this structure. If the caller is not running in a system thread context, it must set the OBJ_KERNEL_HANDLE attribute when it calls InitializeObjectAttributes."
        },
        {
          "in_out": "_Out_",
          "type": "PIO_STATUS_BLOCK",
          "name": "IoStatusBlock",
          "description": "A pointer to an IO_STATUS_BLOCK structure that receives the final completion status and other information about the requested operation. In particular, the Information member receives one of the following values:   FILE_CREATED   FILE_OPENED   FILE_OVERWRITTEN   FILE_SUPERSEDED   FILE_EXISTS   FILE_DOES_NOT_EXIST"
        },
        {
          "in_out": "_In_opt_",
          "type": "PLARGE_INTEGER",
          "name": "AllocationSize",
          "description": "A pointer to a LARGE_INTEGER that contains the initial allocation size, in bytes, for a file that is created or overwritten. If AllocationSize is NULL, no allocation size is specified. If no file is created or overwritten, AllocationSize is ignored."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "FileAttributes",
          "description": "Specifies one or more FILE_ATTRIBUTE_XXX flags, which represent the file attributes to set if you create or overwrite a file. The caller usually specifies FILE_ATTRIBUTE_NORMAL, which sets the default attributes. For a list of valid FILE_ATTRIBUTE_XXX flags, see the CreateFile routine in the Microsoft Windows SDK documentation. If no file is created or overwritten, FileAttributes is ignored."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "ShareAccess",
          "description": "Type of share access, which is specified as zero or any combination of the following flags.  ShareAccess flagAllows other threads to do this  FILE_SHARE_READ  Read the file   FILE_SHARE_WRITE  Write the file   FILE_SHARE_DELETE  Delete the file     Device and intermediate drivers usually set ShareAccess to zero, which gives the caller exclusive access to the open file."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "CreateDisposition",
          "description": "Specifies the action to perform if the file does or does not exist. CreateDisposition can be one of the values in the following table.  CreateDisposition valueAction if file existsAction if file does not exist  FILE_SUPERSEDE  Replace the file.  Create the file.   FILE_CREATE  Return an error.  Create the file.   FILE_OPEN  Open the file.  Return an error.   FILE_OPEN_IF  Open the file.  Create the file.   FILE_OVERWRITE  Open the file, and overwrite it.  Return an error.   FILE_OVERWRITE_IF  Open the file, and overwrite it.  Create the file."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "CreateOptions",
          "description": "Specifies the options to apply when the driver creates or opens the file. ..."
        },
        {
          "in_out": "_In_opt_",
          "type": "PVOID",
          "name": "EaBuffer",
          "description": "For device and intermediate drivers, this parameter must be a NULL pointer."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "EaLength",
          "description": "For device and intermediate drivers, this parameter must be zero."
        }
      ]
    },
    "ZwCreateKey": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h, Ntddk.h, or Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 7,
      "arguments": [
        {
          "in_out": "_Out_",
          "type": "PHANDLE",
          "name": "KeyHandle",
          "description": "Pointer to a HANDLE variable that receives a handle to the key."
        },
        {
          "in_out": "_In_",
          "type": "ACCESS_MASK",
          "name": "DesiredAccess",
          "description": "Specifies an ACCESS_MASK value that determines the requested access to the object. In addition to the access rights that are defined for all types of objects (see ACCESS_MASK), the caller can specify one or more of the following access rights, which are specific to object directories:  DesiredAccess flagAllows caller to do this  KEY_QUERY_VALUE  Read key values.   KEY_SET_VALUE  Write key values.   KEY_CREATE_SUB_KEY  Create subkeys for the key.   KEY_ENUMERATE_SUB_KEYS  Read the key's subkeys.   KEY_CREATE_LINK  Create a symbolic link to the key. This flag is not used by device and intermediate drivers.   KEY_NOTIFY  Ask to receive notification when the name, value, or attributes of the key change. For more information, see ZwNotifyChangeKey.     The caller can also specify one of the following constants, which combines several ACCESS_MASK flags.  ConstantConsists of these ACCESS_MASK flags  KEY_READ  STANDARD_RIGHTS_READ, KEY_QUERY_VALUE, KEY_ENUMERATE_SUB_KEYS, and KEY_NOTIFY   KEY_WRITE  STANDARD_RIGHTS_WRITE, KEY_SET_VALUE, and KEY_CREATE_SUBKEY   KEY_EXECUTE  Same as KEY_READ.   KEY_ALL_ACCESS  STANDARD_RIGHTS_ALL, KEY_QUERY_VALUE, KEY_SET_VALUE, KEY_CREATE_SUB_KEY, KEY_ENUMERATE_SUB_KEYS, KEY_NOTIFY, and KEY_CREATE_LINK"
        },
        {
          "in_out": "_In_",
          "type": "POBJECT_ATTRIBUTES",
          "name": "ObjectAttributes",
          "description": "Pointer to an OBJECT_ATTRIBUTES structure that specifies the object name and other attributes. Use InitializeObjectAttributes to initialize this structure. If the caller is not running in a system thread context, it must set the OBJ_KERNEL_HANDLE attribute when it calls InitializeObjectAttributes."
        },
        {
          "in_out": "_Reserved_",
          "type": "ULONG",
          "name": "TitleIndex",
          "description": "Device and intermediate drivers set this parameter to zero."
        },
        {
          "in_out": "_In_opt_",
          "type": "PUNICODE_STRING",
          "name": "Class",
          "description": "Pointer to a Unicode string that contains the key's object class. This information is used by the configuration manager."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "CreateOptions",
          "description": "Specifies the options to apply when creating or opening a key, specified as a compatible combination of the following flags.  CreateOptions flagDescription  REG_OPTION_VOLATILE  Key is not preserved when the system is rebooted.   REG_OPTION_NON_VOLATILE  Key is preserved when the system is rebooted.   REG_OPTION_CREATE_LINK  The newly created key is a symbolic link. This flag is not used by device and intermediate drivers.   REG_OPTION_BACKUP_RESTORE  Key should be created or opened with special privileges that allow backup and restore operations. This flag is not used by device and intermediate drivers."
        },
        {
          "in_out": "_Out_opt_",
          "type": "PULONG",
          "name": "Disposition",
          "description": "Pointer to a variable that receives a value indicating whether a new key was created or an existing one opened.  Disposition valueDescription  REG_CREATED_NEW_KEY  A new key was created.   REG_OPENED_EXISTING_KEY  An existing key was opened."
        }
      ]
    },
    "ZwCreateResourceManager": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h, Ntddk.h, or Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 7,
      "arguments": [
        {
          "in_out": "_Out_",
          "type": "PHANDLE",
          "name": "ResourceManagerHandle",
          "description": "A pointer to a caller-allocated variable that receives a handle to the new resource manager object if the call to ZwCreateResourceManager is successful."
        },
        {
          "in_out": "_In_",
          "type": "ACCESS_MASK",
          "name": "DesiredAccess",
          "description": "An ACCESS_MASK value that specifies the caller's requested access to the resource manager object. In addition to the access rights that are defined for all kinds of objects (see ACCESS_MASK), the caller can specify any of the following access right flags for resource manager objects:  ACCESS_MASK flagAllows the caller to  RESOURCEMANAGER_ENLIST  Enlist in transactions (see ZwCreateEnlistment).    RESOURCEMANAGER_GET_NOTIFICATION  Receive notifications about the transactions that are associated with this resource manager (see ZwGetNotificationResourceManager).    RESOURCEMANAGER_REGISTER_PROTOCOL  Not used.    RESOURCEMANAGER_QUERY_INFORMATION  Query information about the resource manager (see ZwQueryInformationResourceManager).    RESOURCEMANAGER_SET_INFORMATION  Not used.    RESOURCEMANAGER_RECOVER  Recover the resource manager (see ZwRecoverResourceManager).    RESOURCEMANAGER_COMPLETE_PROPAGATION  Not used.      Alternatively, you can specify one or more of the following generic ACCESS_MASK flags. (The STANDARD_RIGHTS_Xxx flags are predefined system values that are used to enforce security on system objects.) You can also combine these generic flags with additional flags from the preceding table. The following table shows how generic access rights correspond to specific access rights.   Generic access rightSet of specific access rights  RESOURCEMANAGER_GENERIC_READ  STANDARD_RIGHTS_READ, RESOURCEMANAGER_QUERY_INFORMATION, and SYNCHRONIZE   RESOURCEMANAGER_GENERIC_WRITE  STANDARD_RIGHTS_WRITE, RESOURCEMANAGER_SET_INFORMATION, RESOURCEMANAGER_RECOVER, RESOURCEMANAGER_ENLIST, RESOURCEMANAGER_GET_NOTIFICATION, RESOURCEMANAGER_REGISTER_PROTOCOL, RESOURCEMANAGER_COMPLETE_PROPAGATION, and SYNCHRONIZE   RESOURCEMANAGER_GENERIC_EXECUTE  STANDARD_RIGHTS_EXECUTE, RESOURCEMANAGER_RECOVER, RESOURCEMANAGER_ENLIST, RESOURCEMANAGER_GET_NOTIFICATION, RESOURCEMANAGER_COMPLETE_PROPAGATION, and SYNCHRONIZE   RESOURCEMANAGER_ALL_ACCESS  STANDARD_RIGHTS_REQUIRED, RESOURCEMANAGER_GENERIC_READ, RESOURCEMANAGER_GENERIC_WRITE, and RESOURCEMANAGER_GENERIC_EXECUTE"
        },
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "TmHandle",
          "description": "A handle to a transaction manager object that was obtained by a previous all to ZwCreateTransactionManager or ZwOpenTransactionManager."
        },
        {
          "in_out": "_In_opt_",
          "type": "LPGUID",
          "name": "ResourceManagerGuid",
          "description": "A pointer to a GUID that KTM will use to identify the resource manager. If this pointer is NULL, KTM generates a GUID."
        },
        {
          "in_out": "_In_opt_",
          "type": "POBJECT_ATTRIBUTES",
          "name": "ObjectAttributes",
          "description": "A pointer to an OBJECT_ATTRIBUTES structure that specifies the object name and other attributes. Use the InitializeObjectAttributes routine to initialize this structure. If the caller is not running in a system thread context, it must set the OBJ_KERNEL_HANDLE attribute when it calls InitializeObjectAttributes. This parameter is optional and can be NULL."
        },
        {
          "in_out": "_In_opt_",
          "type": "ULONG",
          "name": "CreateOptions",
          "description": "Optional object creation flags. The following table contains the available flags, which are defined in Ktmtypes.h.   CreateOptions flagMeaning  RESOURCE_MANAGER_COMMUNICATION  For internal use only.    RESOURCE_MANAGER_VOLATILE  The caller will manage volatile resources. It will be non-persistent and will not perform recovery.      This parameter is optional and can be zero."
        },
        {
          "in_out": "_In_opt_",
          "type": "PUNICODE_STRING",
          "name": "Description",
          "description": "A pointer to a caller-supplied UNICODE_STRING structure that contains a NULL-terminated string. The string provides a description of the resource manager. KTM stores a copy of the string and includes the string in messages that it writes to the log stream. The maximum string length is MAX_RESOURCEMANAGER_DESCRIPTION_LENGTH. This parameter is optional and can be NULL."
        }
      ]
    },
    "ZwCreateSection": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 7,
      "arguments": [
        {
          "in_out": "_Out_",
          "type": "PHANDLE",
          "name": "SectionHandle",
          "description": "Pointer to a HANDLE variable that receives a handle to the section object."
        },
        {
          "in_out": "_In_",
          "type": "ACCESS_MASK",
          "name": "DesiredAccess",
          "description": "Specifies an ACCESS_MASK value that determines the requested access to the object. In addition to the access rights that are defined for all types of objects (see ACCESS_MASK), the caller can specify any of the following access rights, which are specific to section objects:  DesiredAccess flagAllows caller to do this  SECTION_EXTEND_SIZE  Dynamically extend the size of the section.   SECTION_MAP_EXECUTE  Execute views of the section.   SECTION_MAP_READ  Read views of the section.   SECTION_MAP_WRITE  Write views of the section.   SECTION_QUERY  Query the section object for information about the section. Drivers should set this flag.   SECTION_ALL_ACCESS  All of the previous flags combined with STANDARD_RIGHTS_REQUIRED."
        },
        {
          "in_out": "_In_opt_",
          "type": "POBJECT_ATTRIBUTES",
          "name": "ObjectAttributes",
          "description": "Pointer to an OBJECT_ATTRIBUTES structure that specifies the object name and other attributes. Use InitializeObjectAttributes to initialize this structure. If the caller is not running in a system thread context, it must set the OBJ_KERNEL_HANDLE attribute when it calls InitializeObjectAttributes."
        },
        {
          "in_out": "_In_opt_",
          "type": "PLARGE_INTEGER",
          "name": "MaximumSize",
          "description": "Specifies the maximum size, in bytes, of the section. ZwCreateSection rounds this value up to the nearest multiple of PAGE_SIZE. If the section is backed by the paging file, MaximumSize specifies the actual size of the section. If the section is backed by an ordinary file, MaximumSize specifies the maximum size that the file can be extended or mapped to."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "SectionPageProtection",
          "description": "Specifies the protection to place on each page in the section. Use one of the following four values: PAGE_READONLY, PAGE_READWRITE, PAGE_EXECUTE, or PAGE_WRITECOPY. For a description of these values, see CreateFileMapping."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "AllocationAttributes",
          "description": "Specifies a bitmask of SEC_XXX flags that determines the allocation attributes of the section. For a description of these flags, see CreateFileMapping."
        },
        {
          "in_out": "_In_opt_",
          "type": "HANDLE",
          "name": "FileHandle",
          "description": "Optionally specifies a handle for an open file object. If the value of FileHandle is NULL, the section is backed by the paging file. Otherwise, the section is backed by the specified file."
        }
      ]
    },
    "ZwCreateTransaction": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h, Ntddk.h, or Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 10,
      "arguments": [
        {
          "in_out": "_Out_",
          "type": "PHANDLE",
          "name": "TransactionHandle",
          "description": "A pointer to a caller-allocated variable that receives a handle to the new transaction object, if the call to ZwCreateTransaction succeeds."
        },
        {
          "in_out": "_In_",
          "type": "ACCESS_MASK",
          "name": "DesiredAccess",
          "description": "An ACCESS_MASK value that specifies the caller's requested access to the transaction object. In addition to the access rights that are defined for all kinds of objects (see ACCESS_MASK), the caller can specify any of the following flags for transaction objects.  Access maskAllows the caller to  TRANSACTION_COMMIT  Commit the transaction (see ZwCommitTransaction).   TRANSACTION_ENLIST  Create an enlistment for the transaction (see ZwCreateEnlistment).   TRANSACTION_PROPAGATE  Do not use.    TRANSACTION_QUERY_INFORMATION  Obtain information about the transaction (see ZwQueryInformationTransaction).   TRANSACTION_ROLLBACK  Roll back the transaction (see ZwRollbackTransaction).   TRANSACTION_SET_INFORMATION  Set information for the transaction (see ZwSetInformationTransaction).     Alternatively, you can specify one or more of the following ACCESS_MASK bitmaps. These bitmaps combine the flags from the previous table with the STANDARD_RIGHTS_XXX flags that are described on the ACCESS_MASK reference page. You can also combine these bitmaps with additional flags from the preceding table. The following table shows how the bitmaps correspond to specific access rights.  Rights bitmapSet of specific access rights  TRANSACTION_GENERIC_READ  STANDARD_RIGHTS_READ, TRANSACTION_QUERY_INFORMATION, and SYNCHRONIZE   TRANSACTION_GENERIC_WRITE  STANDARD_RIGHTS_WRITE, TRANSACTION_SET_INFORMATION, TRANSACTION_COMMIT, TRANSACTION_ENLIST, TRANSACTION_ROLLBACK, TRANSACTION_PROPAGATE, TRANSACTION_SAVEPOINT, and SYNCHRONIZE   TRANSACTION_GENERIC_EXECUTE  STANDARD_RIGHTS_EXECUTE, TRANSACTION_COMMIT, TRANSACTION_ROLLBACK, and SYNCHRONIZE   TRANSACTION_ALL_ACCESS  STANDARD_RIGHTS_REQUIRED, TRANSACTION_GENERIC_READ, TRANSACTION_GENERIC_WRITE, and TRANSACTION_GENERIC_EXECUTE   TRANSACTION_RESOURCE_MANAGER_RIGHTS  STANDARD_RIGHTS_WRITE, TRANSACTION_GENERIC_READ, TRANSACTION_SET_INFORMATION, TRANSACTION_ENLIST, TRANSACTION_ROLLBACK, TRANSACTION_PROPAGATE, and SYNCHRONIZE     Typically, a resource manager specifies TRANSACTION_RESOURCE_MANAGER_RIGHTS. The DesiredAccess value cannot be zero."
        },
        {
          "in_out": "_In_opt_",
          "type": "POBJECT_ATTRIBUTES",
          "name": "ObjectAttributes",
          "description": "A pointer to an OBJECT_ATTRIBUTES structure that specifies the object name and other attributes. Use the InitializeObjectAttributes routine to initialize this structure. If the caller is not running in a system thread context, it must set the OBJ_KERNEL_HANDLE attribute when it calls InitializeObjectAttributes. This parameter is optional and can be NULL."
        },
        {
          "in_out": "_In_opt_",
          "type": "LPGUID",
          "name": "Uow",
          "description": "A pointer to a GUID that KTM uses as the new transaction object's unit of work (UOW) identifier. This parameter is optional and can be NULL. If this parameter is NULL, KTM generates a GUID and assigns it to the transaction object. For more information, see the following Remarks section."
        },
        {
          "in_out": "_In_opt_",
          "type": "HANDLE",
          "name": "TmHandle",
          "description": "A handle to a transaction manager object that was obtained by a previous call to ZwCreateTransactionManager or ZwOpenTransactionManager. KTM assigns the new transaction object to the specified transaction manager object. If this parameter is NULL, KTM assigns the new transaction object to a transaction manager later, when a resource manager creates an enlistment for the transaction."
        },
        {
          "in_out": "_In_opt_",
          "type": "ULONG",
          "name": "CreateOptions",
          "description": "Optional object creation flags. The following table contains the available flags, which are defined in Ktmtypes.h.  Option flagMeaning  TRANSACTION_DO_NOT_PROMOTE  Reserved for future use."
        },
        {
          "in_out": "_In_opt_",
          "type": "ULONG",
          "name": "IsolationLevel",
          "description": "Reserved for future use. Callers must set this parameter to zero."
        },
        {
          "in_out": "_In_opt_",
          "type": "ULONG",
          "name": "IsolationFlags",
          "description": "Reserved for future use. Callers should set this parameter to zero."
        },
        {
          "in_out": "_In_opt_",
          "type": "PLARGE_INTEGER",
          "name": "Timeout",
          "description": "A pointer to a time-out value. If the transaction has not been committed by the time specified by this parameter, KTM rolls back the transaction. The time-out value is expressed in system time units (100-nanosecond intervals), and can specify either an absolute time or a relative time. If the value pointed to by Timeout is negative, the expiration time is relative to the current system time. Otherwise, the expiration time is absolute. This pointer is optional and can be NULL if you do not want the transaction to have a time-out value. If Timeout = NULL or *Timeout = 0, the transaction never times out. (You can also use ZwSetInformationTransaction to set a time-out value.)"
        },
        {
          "in_out": "_In_opt_",
          "type": "PUNICODE_STRING",
          "name": "Description",
          "description": "A pointer to a caller-supplied UNICODE_STRING structure that contains a NULL-terminated string. The string provides a description of the transaction. KTM stores a copy of the string and includes the string in messages that it writes to the log stream. The maximum string length is MAX_TRANSACTION_DESCRIPTION_LENGTH. This parameter is optional and can be NULL."
        }
      ]
    },
    "ZwCreateTransactionManager": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h or Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 6,
      "arguments": [
        {
          "in_out": "_Out_",
          "type": "PHANDLE",
          "name": "TmHandle",
          "description": "A pointer to a caller-allocated variable that receives a handle to the new transaction manager object."
        },
        {
          "in_out": "_In_",
          "type": "ACCESS_MASK",
          "name": "DesiredAccess",
          "description": "An ACCESS_MASK value that specifies the caller's requested access to the transaction manager object. In addition to the access rights that are defined for all kinds of objects (see ACCESS_MASK), the caller can specify any of the following access right flags for transaction manager objects.   ACCESS_MASK flagAllows the caller to  TRANSACTIONMANAGER_CREATE_RM  Create a resource manager (see ZwCreateResourceManager).   TRANSACTIONMANAGER_QUERY_INFORMATION  Obtain information about the transaction manager (see ZwQueryInformationTransactionManager and ZwEnumerateTransactionObject). Also required for ZwOpenResourceManager, ZwCreateTransaction, and ZwOpenTransaction.)    TRANSACTIONMANAGER_RECOVER  Recover the transaction manager (see ZwRecoverTransactionManager and ZwRollforwardTransactionManager).   TRANSACTIONMANAGER_RENAME  Not used.   TRANSACTIONMANAGER_SET_INFORMATION  Not used.     Alternatively, you can specify one or more of the following ACCESS_MASK bitmaps. These bitmaps combine the flags from the previous table with the STANDARD_RIGHTS_XXX flags that are described on the ACCESS_MASK reference page. You can also combine these bitmaps with additional flags from the preceding table. The following table shows how the bitmaps correspond to specific access rights.  Rights bitmapSet of specific access rights  TRANSACTIONMANAGER_GENERIC_READ  STANDARD_RIGHTS_READ and TRANSACTIONMANAGER_QUERY_INFORMATION   TRANSACTIONMANAGER_GENERIC_WRITE  STANDARD_RIGHTS_WRITE, TRANSACTIONMANAGER_SET_INFORMATION, TRANSACTIONMANAGER_RECOVER, TRANSACTIONMANAGER_RENAME, and TRANSACTIONMANAGER_CREATE_RM   TRANSACTIONMANAGER_GENERIC_EXECUTE  STANDARD_RIGHTS_EXECUTE   TRANSACTIONMANAGER_ALL_ACCESS  STANDARD_RIGHTS_REQUIRED, TRANSACTIONMANAGER_GENERIC_READ, TRANSACTIONMANAGER_GENERIC_WRITE, and TRANSACTIONMANAGER_GENERIC_EXECUTE"
        },
        {
          "in_out": "_In_opt_",
          "type": "POBJECT_ATTRIBUTES",
          "name": "ObjectAttributes",
          "description": "A pointer to an OBJECT_ATTRIBUTES structure that specifies the object name and other attributes. Use the InitializeObjectAttributes routine to initialize this structure. If the caller is not running in a system thread context, it must set the OBJ_KERNEL_HANDLE attribute when it calls InitializeObjectAttributes. This parameter is optional and can be NULL."
        },
        {
          "in_out": "_In_opt_",
          "type": "PUNICODE_STRING",
          "name": "LogFileName",
          "description": "A pointer to a UNICODE_STRING structure that contains the path and file name of a CLFS log file stream to be associated with the transaction manager object. This parameter must be NULL if the CreateOptions parameter is TRANSACTION_MANAGER_VOLATILE. Otherwise, this parameter must be non-NULL. For more information, see the following Remarks section."
        },
        {
          "in_out": "_In_opt_",
          "type": "ULONG",
          "name": "CreateOptions",
          "description": "Optional object creation flags. The following table contains the available flags, which are defined in Ktmtypes.h.  Option flagMeaning  TRANSACTION_MANAGER_VOLATILE  The transaction manager object will be volatile. Therefore, it will not use a log file.   TRANSACTION_MANAGER_COMMIT_DEFAULT  For internal use only.   TRANSACTION_MANAGER_COMMIT_SYSTEM_VOLUME  For internal use only.   TRANSACTION_MANAGER_COMMIT_SYSTEM_HIVES  For internal use only.   TRANSACTION_MANAGER_COMMIT_LOWEST  For internal use only.   TRANSACTION_MANAGER_CORRUPT_FOR_RECOVERY  For internal use only.   TRANSACTION_MANAGER_CORRUPT_FOR_PROGRESS  For internal use only."
        },
        {
          "in_out": "_In_opt_",
          "type": "ULONG",
          "name": "CommitStrength",
          "description": "Reserved for future use. This parameter must be zero."
        }
      ]
    },
    "ZwDeleteFile": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Ntifs.h (include Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 1,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "POBJECT_ATTRIBUTES",
          "name": "ObjectAttributes",
          "description": "A pointer to an OBJECT_ATTRIBUTES structure that contains the attributes supplied by the caller to be used for the file object. These attributes would include the ObjectName and the SECURITY_DESCRIPTOR, for example. This parameter is initialized by calling the InitializeObjectAttributes macro."
        }
      ]
    },
    "ZwDeleteKey": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h, Ntddk.h, or Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 1,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "KeyHandle",
          "description": "Handle to the registry key to be deleted. The handle is created by a successful call to ZwCreateKey or ZwOpenKey."
        }
      ]
    },
    "ZwDeleteValueKey": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h, Ntddk.h, Ntifs.h, or Fltkernel.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 2,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "KeyHandle",
          "description": "The handle to the registry key containing the value entry of interest. This key must have been opened with KEY_SET_VALUE set for the desired access. This handle is created by a successful call to ZwCreateKey or ZwOpenKey."
        },
        {
          "in_out": "_In_",
          "type": "PUNICODE_STRING",
          "name": "ValueName",
          "description": "Pointer to a UNICODE_STRING structure that contains the name of the value entry to delete. This parameter can be an empty string if the value entry has no name."
        }
      ]
    },
    "ZwDeviceIoControlFile": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Ntifs.h (include Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 10,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "FileHandle",
          "description": "Handle returned by ZwCreateFile or ZwOpenFile for the file object representing the device to which the control information should be given or from which information should be returned. The file object must have been opened for asynchronous I/O if the caller specifies an Event, ApcRoutine, and an APC context (in ApcContext), or a completion context (in ApcContext). For I/O to an underlying mass-storage device, the file object must have been opened for Direct Access to Storage Device (DASD) access."
        },
        {
          "in_out": "_In_opt_",
          "type": "HANDLE",
          "name": "Event",
          "description": "Handle for a caller-created event. If this parameter is supplied, the caller will be put into a wait state until the requested operation is completed and the given event is set to the Signaled state. This parameter is optional and can be NULL. It must be NULL if the caller will wait for the FileHandle to be set to the Signaled state."
        },
        {
          "in_out": "_In_opt_",
          "type": "PIO_APC_ROUTINE",
          "name": "ApcRoutine",
          "description": "Address of an optional, caller-supplied APC routine to be called when the requested operation completes. This parameter can be NULL. It must be NULL if there is an I/O completion object associated with the file object."
        },
        {
          "in_out": "_In_opt_",
          "type": "PVOID",
          "name": "ApcContext",
          "description": "Pointer to a caller-determined context area. This parameter value is used as the APC context if the caller supplies an APC, or is used as the completion context if an I/O completion object has been associated with the file object. When the operation completes, either the APC context is passed to the APC, if one was specified, or the completion context is included as part of the completion message that the I/O Manager posts to the associated I/O completion object. This parameter is optional and can be NULL. It must be NULL if ApcRoutine is NULL and there is no I/O completion object associated with the file object."
        },
        {
          "in_out": "_Out_",
          "type": "PIO_STATUS_BLOCK",
          "name": "IoStatusBlock",
          "description": "Pointer to a variable that receives the final completion status and information about the operation. For successful calls that return data, the number of bytes written to the OutputBuffer is returned in the Information member."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "IoControlCode",
          "description": "IOCTL_XXX code that indicates which device I/O control operation is to be carried out on, usually by the underlying device driver. The value of this parameter determines the format and required length of the InputBuffer and OutputBuffer, as well as which of the following parameter pairs are required. For detailed information about the system-defined, device-type-specific IOCTL_XXX codes, see the device technology-specific section of the Microsoft Windows Driver Kit (WDK) documentation and Device Input and Output Control Codes in the Microsoft Windows SDK documentation."
        },
        {
          "in_out": "_In_opt_",
          "type": "PVOID",
          "name": "InputBuffer",
          "description": "Pointer to a caller-allocated input buffer that contains device-specific information to be given to the target device. If IoControlCode specifies an operation that does not require input data, this pointer can be NULL."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "InputBufferLength",
          "description": "Size, in bytes, of the buffer at InputBuffer. If InputBuffer is NULL, set InputBufferLength to zero."
        },
        {
          "in_out": "_Out_opt_",
          "type": "PVOID",
          "name": "OutputBuffer",
          "description": "Pointer to a caller-allocated output buffer in which information is returned from the target device. If IoControlCode specifies an operation that does not produce output data, this pointer can be NULL."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "OutputBufferLength",
          "description": "Size, in bytes, of the buffer at OutputBuffer. If OutputBuffer is NULL, set OutputBufferLength to zero."
        }
      ]
    },
    "ZwDuplicateObject": {
      "category": "Drivers",
      "dll": "",
      "header": "Ntifs.h (include Ntdef.h, Ntifs.h, or Fltkernel.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 7,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "SourceProcessHandle",
          "description": "A handle to the source process for the handle being duplicated."
        },
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "SourceHandle",
          "description": "The handle to duplicate."
        },
        {
          "in_out": "_In_opt_",
          "type": "HANDLE",
          "name": "TargetProcessHandle",
          "description": "A handle to the target process that is to receive the new handle. This parameter is optional and can be specified as NULL if the DUPLICATE_CLOSE_SOURCE flag is set in Options."
        },
        {
          "in_out": "_Out_opt_",
          "type": "PHANDLE",
          "name": "TargetHandle",
          "description": "A pointer to a HANDLE variable into which the routine writes the new duplicated handle. The duplicated handle is valid in the specified target process. This parameter is optional and can be specified as NULL if no duplicate handle is to be created."
        },
        {
          "in_out": "_In_",
          "type": "ACCESS_MASK",
          "name": "DesiredAccess",
          "description": "An ACCESS_MASK value that specifies the desired access for the new handle."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "HandleAttributes",
          "description": "A ULONG that specifies the desired attributes for the new handle. For more information about attributes, see the description of the Attributes member in OBJECT_ATTRIBUTES."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "Options",
          "description": "A set of flags to control the behavior of the duplication operation. Set this parameter to zero or to the bitwise OR of one or more of the following flags.  Flag nameDescription DUPLICATE_SAME_ATTRIBUTESInstead of using the HandleAttributes parameter, copy the attributes from the source handle to the target handle. DUPLICATE_SAME_ACCESSInstead of using the DesiredAccess parameter, copy the access rights from the source handle to the target handle. DUPLICATE_CLOSE_SOURCEClose the source handle."
        }
      ]
    },
    "ZwDuplicateToken": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Ntifs.h (include Ntifs.h or FltKernel.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 6,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "ExistingTokenHandle",
          "description": "A handle to an existing access token that was opened with the TOKEN_DUPLICATE access right. This parameter is required and cannot be NULL."
        },
        {
          "in_out": "_In_",
          "type": "ACCESS_MASK",
          "name": "DesiredAccess",
          "description": "Bitmask that specifies the requested access rights for the new token. ZwDuplicateToken compares the requested access rights with the existing token's discretionary access control list (DACL) to determine which rights are granted or denied to the new token. To request the same access rights as the existing token, specify zero. To request all access rights that are valid for the caller, specify MAXIMUM_ALLOWED. This parameter is optional and can either be zero, MAXIMUM_ALLOWED, or a bitwise OR combination of one or more of the following values:  ValueMeaning  DELETE  Required to delete the object.   READ_CONTROL  Required to read the DACL and ownership information for the object. For access to the system access control list (SACL), see ACCESS_SYSTEM_SECURITY later in this table.   WRITE_DAC  Required to change the DACL information for the object.   WRITE_OWNER  Required to change the ownership information in the object's security descriptor (SECURITY_DESCRIPTOR).   ACCESS_SYSTEM_SECURITY  Required to get or set the SACL in an object's ACL. The operating system grants this right to the new token only if the SE_SECURITY_NAME privilege is enabled in the access token of the calling thread.   STANDARD_RIGHTS_READ  Currently defined to equal READ_CONTROL.   STANDARD_RIGHTS_WRITE  Currently defined to equal READ_CONTROL.   STANDARD_RIGHTS_EXECUTE  Currently defined to equal READ_CONTROL.   STANDARD_RIGHTS_REQUIRED  Combines DELETE, READ_CONTROL, WRITE_DAC, and WRITE_OWNER access.   STANDARD_RIGHTS_ALL  Combines DELETE, READ_CONTROL, WRITE_DAC, WRITE_OWNER, and SYNCHRONIZE access. However, the SYNCHRONIZE value is not applicable to token objects. Thus, STANDARD_RIGHTS_ALL has a  functionally equivalent to STANDARD_RIGHTS_REQUIRED.   TOKEN_ADJUST_DEFAULT  Required to change the default owner, primary group, or DACL of an access token.   TOKEN_ADJUST_GROUPS  Required to adjust the attributes of the groups in an access token.   TOKEN_ADJUST_PRIVILEGES  Required to enable or disable the privileges in an access token.   TOKEN_ADJUST_SESSIONID  Required to adjust the session ID (SID) of an access token. The operating system grants this right to the new token only if the SE_TCB_NAME privilege is enabled in the access token of the calling thread.   TOKEN_ASSIGN_PRIMARY  Required to attach a primary token to a process. The operating system grants this right to the new token only if the SE_ASSIGNPRIMARYTOKEN_NAME privilege is enabled in the access token of the calling thread.   TOKEN_DUPLICATE  Required to duplicate an access token. Note that the given ExistingTokenHandle token must contain this right in order to successfully use this routine.   TOKEN_EXECUTE  Combines STANDARD_RIGHTS_EXECUTE and TOKEN_IMPERSONATE.   TOKEN_IMPERSONATE  Required to attach an impersonation access token to a process.   TOKEN_QUERY  Required to query an access token.   TOKEN_QUERY_SOURCE  Required to query the source of an access token.   TOKEN_READ  Combines STANDARD_RIGHTS_READ and TOKEN_QUERY.   TOKEN_WRITE  Combines STANDARD_RIGHTS_WRITE, TOKEN_ADJUST_PRIVILEGES, TOKEN_ADJUST_GROUPS, and TOKEN_ADJUST_DEFAULT.   TOKEN_ALL_ACCESS  Combines all possible token access permissions for a token.     For additional information, see Access Rights for Access-Token Objects in the Microsoft Windows SDK. Note that access tokens do not support the SYNCHRONIZE right."
        },
        {
          "in_out": "_In_",
          "type": "POBJECT_ATTRIBUTES",
          "name": "ObjectAttributes",
          "description": "Pointer to an OBJECT_ATTRIBUTES structure that describes the requested properties for the new token. The ObjectAttributes parameter is optional and can be NULL. If the ObjectAttributes parameter is NULL or if the SecurityDescriptor member of the structure pointed to by the ObjectAttributes parameter is NULL, the new token receives a default security descriptor and the new token handle cannot be inherited. In that case, this default security descriptor is created from the user group, primary group, and DACL information that is stored in the caller's token. When the TokenType parameter is set to TokenImpersonation:   The ObjectAttributes parameter may be used to specify the impersonation level of the new token. This can be accomplished by setting ObjectAttributes->SecurityQualityOfService.ImpersonationLevel to an appropriate SECURITY_IMPERSONATION_LEVEL enumeration value. For more information, see SECURITY_QUALITY_OF_SERVICE in the Microsoft Windows SDK documentation.   If the existing token is an impersonation token and the ObjectAttributes parameter provides no impersonation information, the new token's impersonation level is set to the existing token's impersonation level.   If the existing token is a primary token and no impersonation level information is provided, the new impersonation token will have a SECURITY_IMPERSONATION_LEVEL impersonation level."
        },
        {
          "in_out": "_In_",
          "type": "BOOLEAN",
          "name": "EffectiveOnly",
          "description": "A Boolean value that indicates whether the entire existing token should be duplicated into the new token or just the effective (currently enabled) part of the token. If set to TRUE, only the currently enabled parts of the source token will be duplicated. If set to FALSE, the entire existing token will be duplicated. This provides a means for a caller of a protected subsystem to limit which optional groups and privileges are made available to the protected subsystem. For example, if EffectiveOnly is TRUE, the caller could duplicate a token but remove the Administrators group and the SeTcbPrivilege right. The resulting token could then be passed to a child process (CreateProcessAsUser), which would restrict what the child process can do. This parameter is required."
        },
        {
          "in_out": "_In_",
          "type": "TOKEN_TYPE",
          "name": "TokenType",
          "description": "Specifies one of the following values from the TOKEN_TYPE enumeration.  ValueMeaning  TokenPrimary  The new token is a primary token. If the existing token is an impersonation token, the existing impersonation token must have an impersonation level (as provided by the ObjectAttributes parameter) of SecurityImpersonation or SecurityDelegation. Otherwise, ZwDuplicateToken returns STATUS_BAD_IMPERSONATION_LEVEL is returned.   TokenImpersonation  The new token is an impersonation token. If the existing token is an impersonation token, the requested impersonation level (as provided by the ObjectAttributes parameter) of the new token must not be greater than the impersonation level of the existing token. Otherwise, ZwDuplicateToken returns STATUS_BAD_IMPERSONATION_LEVEL.     The TokenType parameter is required and cannot be NULL."
        },
        {
          "in_out": "_Out_",
          "type": "PHANDLE",
          "name": "NewTokenHandle",
          "description": "A pointer to a caller-allocated variable, of type HANDLE, that receives a handle to the new token. This parameter is required and cannot be NULL."
        }
      ]
    },
    "ZwEnumerateKey": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h, Ntddk.h, or Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 6,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "KeyHandle",
          "description": "Handle to the registry key that contains the subkeys to be enumerated. The handle is created by a successful call to ZwCreateKey or ZwOpenKey."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "Index",
          "description": "The index of the subkey that you want information for. If the key has n subkeys, the subkeys are numbered from 0 to n-1."
        },
        {
          "in_out": "_In_",
          "type": "KEY_INFORMATION_CLASS",
          "name": "KeyInformationClass",
          "description": "Specifies a KEY_INFORMATION_CLASS enumeration value that determines the type of information to be received by the KeyInformation buffer. Set KeyInformationClass to one of the following values:  KeyBasicInformation KeyFullInformation KeyNodeInformation  If any value not in this list is specified, the routine returns error code STATUS_INVALID_PARAMETER."
        },
        {
          "in_out": "_Out_opt_",
          "type": "PVOID",
          "name": "KeyInformation",
          "description": "Pointer to a caller-allocated buffer that receives the requested information. The KeyInformationClass parameter determines the type of information provided."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "Length",
          "description": "Specifies the size, in bytes, of the KeyInformation buffer."
        },
        {
          "in_out": "_Out_",
          "type": "PULONG",
          "name": "ResultLength",
          "description": "Pointer to a variable that receives the size, in bytes, of the registry-key information. If ZwEnumerateKey returns STATUS_SUCCESS, you can use the value of this variable to determine the amount of data returned. If the routine returns STATUS_BUFFER_OVERFLOW or STATUS_BUFFER_TOO_SMALL, you can use the value of this variable to determine the size of buffer required to hold the key information."
        }
      ]
    },
    "ZwEnumerateTransactionObject": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h, Ntddk.h, or Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 5,
      "arguments": [
        {
          "in_out": "_In_opt_",
          "type": "HANDLE",
          "name": "RootObjectHandle",
          "description": "A handle to a KTM object. The routine enumerates the child objects of the specified object. This parameter is optional and can be NULL. For more information about valid values for this parameter, see the table in the following Remarks section."
        },
        {
          "in_out": "_In_",
          "type": "KTMOBJECT_TYPE",
          "name": "QueryType",
          "description": "A KTMOBJECT_TYPE-typed value that identifies the object type to enumerate. For more information about valid values for this parameter, see the table in the following Remarks section."
        },
        {
          "in_out": "_Inout_",
          "type": "PKTMOBJECT_CURSOR",
          "name": "ObjectCursor",
          "description": "A pointer to a caller-allocated buffer that begins with a KTMOBJECT_CURSOR structure. ZwEnumerateTransactionObject uses the buffer to store the GUIDs of objects that it finds."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "ObjectCursorLength",
          "description": "The length, in bytes, of the buffer that ObjectCursor points to."
        },
        {
          "in_out": "_Out_",
          "type": "PULONG",
          "name": "ReturnLength",
          "description": "A pointer to a caller-allocated location that receives the number of bytes that ZwEnumerateTransactionObject returns in the ObjectCursor buffer, including the length of the KTMOBJECT_CURSOR structure and the length of all returned GUIDs."
        }
      ]
    },
    "ZwEnumerateValueKey": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h, Ntddk.h, or Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 6,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "KeyHandle",
          "description": "Handle to the registry key that you want to enumerate value entries for. A successful call to ZwCreateKey or ZwOpenKey creates this handle."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "Index",
          "description": "The zero-based index of the subkey that you want value information for."
        },
        {
          "in_out": "_In_",
          "type": "KEY_VALUE_INFORMATION_CLASS",
          "name": "KeyValueInformationClass",
          "description": "Specifies a KEY_VALUE_INFORMATION_CLASS value that determines the type of information returned in the KeyValueInformation buffer."
        },
        {
          "in_out": "_Out_opt_",
          "type": "PVOID",
          "name": "KeyValueInformation",
          "description": "Pointer to a caller-allocated buffer that receives the requested information."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "Length",
          "description": "Specifies the size, in bytes, of the KeyValueInformation buffer."
        },
        {
          "in_out": "_Out_",
          "type": "PULONG",
          "name": "ResultLength",
          "description": "Pointer to a variable that receives the size, in bytes, of the value information. If this routine returns STATUS_SUCCESS, the variable indicates the amount of data returned. If this routine returns STATUS_BUFFER_OVERFLOW or STATUS_BUFFER_TOO_SMALL, the variable indicates the buffer size that is required to hold the value information."
        }
      ]
    },
    "ZwFlushBuffersFile": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Ntifs.h (include Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 2,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "FileHandle",
          "description": "Handle returned by ZwCreateFile or ZwOpenFile for the file whose buffers will be flushed. This parameter is required and cannot be NULL."
        },
        {
          "in_out": "_Out_",
          "type": "PIO_STATUS_BLOCK",
          "name": "IoStatusBlock",
          "description": "Address of the caller's I/O status block. This parameter is required and cannot be NULL."
        }
      ]
    },
    "ZwFlushBuffersFileEx": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Ntifs.h (include Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 3,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "FileHandle",
          "description": "Handle returned by ZwCreateFile or ZwOpenFile for the file whose buffers will be flushed. This parameter is required and cannot be NULL."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "Flags",
          "description": "Flush operation flags. Flags can be 0 or one of the following values.  ValueMeaning  FLUSH_FLAGS_FILE_DATA_ONLY   If the file is on an NTFS file system, file data in the file cache will be written. No metadata is written and the underlying storage is not synchronized to flush its cache. This flag is not valid with volume handles.   FLUSH_FLAGS_NO_SYNC   If the file is on an NTFS file system, file data and metadata in the file cache will be written. The underlying storage is not synchronized to flush its cache. This flag is not valid with volume handles."
        },
        {
          "in_out": "_Out_",
          "type": "PIO_STATUS_BLOCK",
          "name": "IoStatusBlock",
          "description": "Address of the caller's I/O status block. This parameter is required and cannot be NULL."
        }
      ]
    },
    "ZwFlushKey": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h, Ntddk.h, or Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 1,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "KeyHandle",
          "description": "Handle to the registry key to be flushed to disk. This handle is created by a successful call to ZwCreateKey or ZwOpenKey."
        }
      ]
    },
    "ZwFlushVirtualMemory": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Ntifs.h (include Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 4,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "ProcessHandle",
          "description": "An open handle for the process in whose context the pages to be flushed reside. Use the NtCurrentProcess macro, defined in Ntddk.h, to specify the current process."
        },
        {
          "in_out": "_Inout_",
          "type": "PVOID*",
          "name": "BaseAddress",
          "description": "A pointer to the base address of the virtual address range. On entry, this parameter specifies a pointer to the initial value of the base address of the region of pages to flush. On return, this parameter provides a pointer to a variable that will receive the base address of the flushed region."
        },
        {
          "in_out": "_Inout_",
          "type": "PSIZE_T",
          "name": "RegionSize",
          "description": "The size, in bytes, of the virtual address range. On entry, this parameter specifies a pointer to the initial value of the size in bytes of the region of pages to flush to disk. This argument is rounded up to the next host-page-size boundary by the ZwFlushVirtualMemory. If this value is specified as zero, the mapped range from the base address to the end of the range is flushed. On return, this parameter specifies a pointer to a variable that will receive the actual size in bytes of the flushed region of pages."
        },
        {
          "in_out": "_Out_",
          "type": "PIO_STATUS_BLOCK",
          "name": "IoStatus",
          "description": "A pointer to an IO_STATUS_BLOCK structure. This structure is where the value of the I/O status for the last attempted I/O operation is stored on output."
        }
      ]
    },
    "ZwFreeVirtualMemory": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Ntifs.h (include Ntifs.h or Fltkernel.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 4,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "ProcessHandle",
          "description": "A handle for the process in whose context the pages to be freed reside. Use the NtCurrentProcess macro, defined in Ntddk.h, to specify the current process."
        },
        {
          "in_out": "_Inout_",
          "type": "PVOID*",
          "name": "BaseAddress",
          "description": "A pointer to a variable that will receive the virtual address of the freed region of pages.  If the MEM_RELEASE flag is set in the FreeType parameter, BaseAddress must be the base address returned by ZwAllocateVirtualMemory when the region was reserved."
        },
        {
          "in_out": "_Inout_",
          "type": "PSIZE_T",
          "name": "RegionSize",
          "description": "A pointer to a variable that will receive the actual size, in bytes, of the freed region of pages. The routine rounds the initial value of this variable up to the next host page size boundary and writes the rounded value back to this variable. If the MEM_RELEASE flag is set in the FreeType parameter, the variable pointed to by RegionSize must be zero. ZwFreeVirtualMemory frees the entire region that was reserved in the initial allocation call to ZwAllocateVirtualMemory. If the MEM_DECOMMIT flag is set in the FreeType parameter, ZwFreeVirtualMemory decommits all memory pages that contain one or more bytes in the range from the BaseAddress parameter to (BaseAddress + *RegionSize). This means, for example, that if a two-byte region of memory straddles a page boundary, both pages are decommitted. ZwFreeVirtualMemory decommits the entire region that was reserved by ZwAllocateVirtualMemory. If the following three conditions are met, the entire region enters the reserved state:   The MEM_DECOMMIT flag is set.   BaseAddress is the base address returned by ZwAllocateVirtualMemory when the region was reserved.             *RegionSize is zero."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "FreeType",
          "description": "A bitmask that contains flags that describe the type of free operation that ZwFreeVirtualMemory will perform for the specified region of pages. The possible values are listed in the following table.  FreeType flagsDescription  MEM_DECOMMIT  ZwFreeVirtualMemory will decommit the specified region of pages. The pages enter the reserved state. ZwFreeVirtualMemory does not fail if you attempt to decommit an uncommitted page. This means that you can decommit a range of pages without first determining their current commitment state.   MEM_RELEASE  ZwFreeVirtualMemory will release the specified region of pages. The pages enter the free state. If you specify this flag, *RegionSize must be zero, and BaseAddress must point to the base address returned by ZwAllocateVirtualMemory when the region was reserved. ZwFreeVirtualMemory fails if either of these conditions is not met. If any pages in the region are currently committed, ZwFreeVirtualMemory first decommits and then releases them. ZwFreeVirtualMemory does not fail if you attempt to release pages that are in different states, some reserved and some committed. This means that you can release a range of pages without first determining their current commitment state."
        }
      ]
    },
    "ZwFsControlFile": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Ntifs.h (include Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 10,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "FileHandle",
          "description": "Handle returned by ZwCreateFile or ZwOpenFile for the file object representing the file or directory on which the specified action is to be performed. The file object must have been opened for asynchronous I/O if the caller specifies an Event, ApcRoutine, and an APC context (in ApcContext), or a completion context (in ApcContext)."
        },
        {
          "in_out": "_In_opt_",
          "type": "HANDLE",
          "name": "Event",
          "description": "Handle for a caller-created event. If this parameter is supplied, the caller will be put into a wait state until the requested operation is completed and the given event is set to the Signaled state. This parameter is optional and can be NULL. It must be NULL if the caller will wait for the FileHandle to be set to the Signaled state."
        },
        {
          "in_out": "_In_opt_",
          "type": "PIO_APC_ROUTINE",
          "name": "ApcRoutine",
          "description": "Address of a caller-supplied APC routine to be called when the requested operation completes. This parameter is optional and can be NULL. It must be NULL if there is an I/O completion object associated with the file object."
        },
        {
          "in_out": "_In_opt_",
          "type": "PVOID",
          "name": "ApcContext",
          "description": "Pointer to a caller-determined context area. This parameter value is used as the APC context if the caller supplies an APC, or is used as the completion context if an I/O completion object has been associated with the file object. When the operation completes, either the APC context is passed to the APC, if one was specified, or the completion context is included as part of the completion message that the I/O Manager posts to the associated I/O completion object. This parameter is optional and can be NULL. It must be NULL if ApcRoutine is NULL and there is no I/O completion object associated with the file object."
        },
        {
          "in_out": "_Out_",
          "type": "PIO_STATUS_BLOCK",
          "name": "IoStatusBlock",
          "description": "Pointer to an IO_STATUS_BLOCK structure that receives the final completion status and information about the operation. For successful calls that return data, the number of bytes written to the OutputBuffer is returned in the Information member of this structure."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "FsControlCode",
          "description": "FSCTL_XXX code that indicates which file system control operation is to be carried out. The value of this parameter determines the formats and required lengths of the InputBuffer and OutputBuffer, as well as which of the following parameter pairs are required. For detailed information about the system-defined FSCTL_XXX codes, see the \"Remarks\" section of the reference entry for DeviceIoControl in the Microsoft Windows SDK documentation."
        },
        {
          "in_out": "_In_opt_",
          "type": "PVOID",
          "name": "InputBuffer",
          "description": "Pointer to a caller-allocated input buffer that contains device-specific information to be given to the target driver. If FsControlCode specifies an operation that does not require input data, this pointer is optional and can be NULL."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "InputBufferLength",
          "description": "Size, in bytes, of the buffer at InputBuffer. This value is ignored if InputBuffer is NULL."
        },
        {
          "in_out": "_Out_opt_",
          "type": "PVOID",
          "name": "OutputBuffer",
          "description": "Pointer to a caller-allocated output buffer in which information is returned from the target driver. If FsControlCode specifies an operation that does not produce output data, this pointer is optional and can be NULL."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "OutputBufferLength",
          "description": "Size, in bytes, of the buffer at OutputBuffer. This value is ignored if OutputBuffer is NULL."
        }
      ]
    },
    "ZwGetNotificationResourceManager": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h or Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 7,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "ResourceManagerHandle",
          "description": "A handle to a resource manager object that was obtained by a previous call to ZwCreateResourceManager or ZwOpenResourceManager. The handle must have RESOURCEMANAGER_GET_NOTIFICATION access to the object."
        },
        {
          "in_out": "_Out_",
          "type": "PTRANSACTION_NOTIFICATION",
          "name": "TransactionNotification",
          "description": "A pointer to a caller-allocated buffer that receives information about the retrieved notification. The buffer must be large enough to contain a TRANSACTION_NOTIFICATION structure plus additional notification-specific arguments."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "NotificationLength",
          "description": "The length, in bytes, of the buffer that the TransactionNotification parameter points to."
        },
        {
          "in_out": "_In_",
          "type": "PLARGE_INTEGER",
          "name": "Timeout",
          "description": "A pointer to a value that specifies a relative or absolute time, in units of 100 nanoseconds. This pointer is optional and can be NULL. If the pointer is NULL, ZwGetNotificationResourceManager does not return until a transaction notification is available. If a time value is specified, ZwGetNotificationResourceManager returns when a notification is available or after the specified time elapses, whichever comes first. A negative value specifies a time that is relative to the current system time. For example, a relative time value of five seconds causes ZwGetNotificationResourceManager to time out five seconds after it is called.  A positive value specifies an absolute time, which is actually relative to 00:00, January 1, 1601. If an absolute time value is specified, the operating system adds the absolute time value to the time value that represents 00:00, January 1, 1601. If the caller specifies a zero value (instead of a NULL pointer), ZwGetNotificationResourceManager returns immediately, whether a notification is available or not."
        },
        {
          "in_out": "_Out_opt_",
          "type": "PULONG",
          "name": "ReturnLength",
          "description": "An optional pointer to a variable. If this pointer is not NULL, and if the NotificationLength parameter's value is too small, ZwGetNotificationResourceManager supplies the required length in the variable and returns STATUS_BUFFER_TOO_SMALL."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "Asynchronous",
          "description": "A ULONG value that must be zero. ZwGetNotificationResourceManager does not support asynchronous notifications. Use TmEnableCallbacks to enable asynchronous notifications."
        },
        {
          "in_out": "_In_opt_",
          "type": "ULONG_PTR",
          "name": "AsynchronousContext",
          "description": "A pointer to a ULONG value. This pointer must be NULL."
        }
      ]
    },
    "ZwLoadDriver": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h, Ntddk.h, or Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 1,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "PUNICODE_STRING",
          "name": "DriverServiceName",
          "description": "Pointer to a counted Unicode string that specifies a path to the driver's registry key, \\Registry\\Machine\\System\\CurrentControlSet\\Services\\DriverName, where DriverName is the name of the driver."
        }
      ]
    },
    "ZwLockFile": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Ntifs.h (include Ntifs.h or FltKernel.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 10,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "FileHandle",
          "description": "A handle for the file on which a byte-range lock is requested."
        },
        {
          "in_out": "_In_opt_",
          "type": "HANDLE",
          "name": "Event",
          "description": "A handle to a caller-created event. If not NULL, the caller is placed into a wait state until the operation succeeds, at which time the event is set into the Signaled state."
        },
        {
          "in_out": "_In_opt_",
          "type": "PIO_APC_ROUTINE",
          "name": "ApcRoutine",
          "description": "A pointer to a caller-supplied APC routine that is executed after the operation completes. Can be NULL."
        },
        {
          "in_out": "_In_opt_",
          "type": "PVOID",
          "name": "ApcContext",
          "description": "A pointer to a caller-specified context for the APC routine. This value is passed to the APC routine when it is executed. Can be NULL."
        },
        {
          "in_out": "_Out_",
          "type": "PIO_STATUS_BLOCK",
          "name": "IoStatusBlock",
          "description": "A pointer to an IO_STATUS_BLOCK structure that contains the final status."
        },
        {
          "in_out": "_In_",
          "type": "PLARGE_INTEGER",
          "name": "ByteOffset",
          "description": "A pointer to a variable that specifies the starting byte offset of the range to lock."
        },
        {
          "in_out": "_In_",
          "type": "PLARGE_INTEGER",
          "name": "Length",
          "description": "A pointer to a variable that specifies the length in bytes of the range to lock."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "Key",
          "description": "A caller-assigned value used to describe groups of related locks. This value should be set to zero."
        },
        {
          "in_out": "_In_",
          "type": "BOOLEAN",
          "name": "FailImmediately",
          "description": "If TRUE, immediately return if the file cannot be locked. If FALSE, wait for the lock request to be granted."
        },
        {
          "in_out": "_In_",
          "type": "BOOLEAN",
          "name": "ExclusiveLock",
          "description": "If TRUE, byte-range lock is exclusive; otherwise, shared lock."
        }
      ]
    },
    "ZwMakeTemporaryObject": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h, Ntddk.h, or Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 1,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "Handle",
          "description": "Handle to an object of any type."
        }
      ]
    },
    "ZwMapViewOfSection": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h, Ntddk.h, or Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 10,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "SectionHandle",
          "description": "Handle to a section object. This handle is created by a successful call to ZwCreateSection or ZwOpenSection."
        },
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "ProcessHandle",
          "description": "Handle to the object that represents the process that the view should be mapped into. Use the ZwCurrentProcess macro to specify the current process. The handle must have been opened with PROCESS_VM_OPERATION access (described in the Microsoft Windows SDK documentation)."
        },
        {
          "in_out": "_Inout_",
          "type": "PVOID*",
          "name": "BaseAddress",
          "description": "Pointer to a variable that receives the base address of the view. If the value of this parameter is not NULL, the view is allocated starting at the specified virtual address rounded down to the next 64-kilobyte address boundary."
        },
        {
          "in_out": "_In_",
          "type": "ULONG_PTR",
          "name": "ZeroBits",
          "description": "Specifies the number of high-order address bits that must be zero in the base address of the section view. ..."
        },
        {
          "in_out": "_In_",
          "type": "SIZE_T",
          "name": "CommitSize",
          "description": "Specifies the size, in bytes, of the initially committed region of the view. CommitSize is meaningful only for page-file backed sections and is rounded up to the nearest multiple of PAGE_SIZE. (For sections that map files, both the data and the image are committed at section-creation time.)"
        },
        {
          "in_out": "_Inout_opt_",
          "type": "PLARGE_INTEGER",
          "name": "SectionOffset",
          "description": "A pointer to a variable that receives the offset, in bytes, from the beginning of the section to the view. If this pointer is not NULL, the offset is rounded down to the next allocation-granularity size boundary."
        },
        {
          "in_out": "_Inout_",
          "type": "PSIZE_T",
          "name": "ViewSize",
          "description": "A pointer to a SIZE_T variable. If the initial value of this variable is zero, ZwMapViewOfSection maps a view of the section that starts at SectionOffset and continues to the end of the section. Otherwise, the initial value specifies the view's size, in bytes. ZwMapViewOfSection always rounds this value up to the nearest multiple of PAGE_SIZE before mapping the view. On return, the value receives the actual size, in bytes, of the view."
        },
        {
          "in_out": "_In_",
          "type": "SECTION_INHERIT",
          "name": "InheritDisposition",
          "description": "Specifies how the view is to be shared with child processes. The possible values are:   ViewShare  The view will be mapped into any child processes that are created in the future.  ViewUnmap  The view will not be mapped into child processes.   Drivers should typically specify ViewUnmap for this parameter."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "AllocationType",
          "description": "Specifies a set of flags that describes the type of allocation to be performed for the specified region of pages. The valid flags are MEM_LARGE_PAGES, MEM_RESERVE, and MEM_TOP_DOWN. Although MEM_COMMIT is not allowed, it is implied unless MEM_RESERVE is specified. For more information about the MEM_XXX flags, see the description of the VirtualAlloc routine."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "Win32Protect",
          "description": "Specifies the type of protection for the region of initially committed pages. Device and intermediate drivers should set this value to PAGE_READWRITE."
        }
      ]
    },
    "ZwNotifyChangeKey": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Ntifs.h (include Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 10,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "KeyHandle",
          "description": "Handle to the key to register a notification routine for. This handle is created by a successful call to ZwCreateKey or ZwOpenKey. The caller must have specified KEY_NOTIFY access."
        },
        {
          "in_out": "_In_opt_",
          "type": "HANDLE",
          "name": "Event",
          "description": "Handle to a caller-created event. If not NULL, the caller is placed into a wait state until the operation succeeds, at which time the event is set to the Signaled state."
        },
        {
          "in_out": "_In_opt_",
          "type": "PIO_APC_ROUTINE",
          "name": "ApcRoutine",
          "description": "For a user-mode call, this parameter points to a caller-supplied APC routine that is run after the operation is completed. This parameter is optional and can be NULL.   For a kernel-mode call, this parameter must be NULL."
        },
        {
          "in_out": "_In_opt_",
          "type": "PVOID",
          "name": "ApcContext",
          "description": "The meaning of this parameter depends on whether the routine is called from kernel mode or from user mode. For a kernel-mode call, set this parameter to one of the following WORK_QUEUE_TYPE enumeration values:   CriticalWorkQueue   DelayedWorkQueue   The parameter value must be cast to type PVOID. For a user-mode call, this parameter points to a caller-specified context for the APC routine. This value is passed to the APC routine when it is run."
        },
        {
          "in_out": "_Out_",
          "type": "PIO_STATUS_BLOCK",
          "name": "IoStatusBlock",
          "description": "Pointer to an IO_STATUS_BLOCK structure that contains the final status and information about the operation. For successful calls that return data, the number of bytes written to Buffer is supplied in IoStatusBlock->Information."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "CompletionFilter",
          "description": "Bitmask of operations that cause the driver to be notified. Specify one or more of the following flags:   REG_NOTIFY_CHANGE_NAME  Notify the caller if a subkey is added or deleted.  REG_NOTIFY_CHANGE_ATTRIBUTES  Notify the caller of changes to the attributes of the key, such as the security descriptor information.  REG_NOTIFY_CHANGE_LAST_SET  Notify the caller of changes to a value of the key. This can include adding or deleting a value, or changing an existing value. (The caller receives no notification if the new value written to the key matches the previous value of the key.)  REG_NOTIFY_CHANGE_SECURITY  Notify the caller of changes to the security descriptor of the key."
        },
        {
          "in_out": "_In_",
          "type": "BOOLEAN",
          "name": "WatchTree",
          "description": "If TRUE, the driver is notified about changes to all subkeys of the specified key. If FALSE, the driver is only notified for changes to the specified key."
        },
        {
          "in_out": "_Out_opt_",
          "type": "PVOID",
          "name": "Buffer",
          "description": "Reserved. Specify NULL."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "BufferSize",
          "description": "Reserved. Specify zero."
        },
        {
          "in_out": "_In_",
          "type": "BOOLEAN",
          "name": "Asynchronous",
          "description": "If FALSE, the routine does not return until the specified event occurs. If TRUE, the routine returns immediately."
        }
      ]
    },
    "ZwOpenDirectoryObject": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Ntifs.h (include Ntdef.h, Ntifs.h, or Fltkernel.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 3,
      "arguments": [
        {
          "in_out": "_Out_",
          "type": "PHANDLE",
          "name": "DirectoryHandle",
          "description": "Handle for the newly opened directory object."
        },
        {
          "in_out": "_In_",
          "type": "ACCESS_MASK",
          "name": "DesiredAccess",
          "description": "An ACCESS_MASK structure specifying the requested types of access being requested for this directory object. A caller can specify one or a combination of the following.  DesiredAccess FlagsMeaning  DIRECTORY_QUERY  Query access to the directory object   DIRECTORY_TRAVERSE  Name-lookup access to the directory object   DIRECTORY_CREATE_OBJECT  Name-creation access to the directory object   DIRECTORY_CREATE_SUBDIRECTORY  Subdirectory-creation access to the directory object   DIRECTORY_ALL_ACCESS  All of the preceding rights plus STANDARD_RIGHTS_REQUIRED.     These requested access types are compared with the object's discretionary access-control list (DACL) to determine which accesses are granted or denied."
        },
        {
          "in_out": "_In_",
          "type": "POBJECT_ATTRIBUTES",
          "name": "ObjectAttributes",
          "description": "Specified attributes for the directory object supplied by the caller. This parameter is initialized by calling the InitializeObjectAttributes macro."
        }
      ]
    },
    "ZwOpenEnlistment": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h or Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 5,
      "arguments": [
        {
          "in_out": "_Out_",
          "type": "PHANDLE",
          "name": "EnlistmentHandle",
          "description": "A pointer to a caller-allocated variable that receives a handle to an enlistment object if the call to ZwOpenEnlistment succeeds."
        },
        {
          "in_out": "_In_",
          "type": "ACCESS_MASK",
          "name": "DesiredAccess",
          "description": "An ACCESS_MASK-typed value that specifies the requested access to the enlistment object. For more information about how to specify this parameter, see the DesiredAccess parameter of ZwCreateEnlistment. This parameter cannot be zero."
        },
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "RmHandle",
          "description": "A handle to a resource manager object that was obtained by a previous call to ZwCreateResourceManager or ZwOpenResourceManager."
        },
        {
          "in_out": "_In_",
          "type": "LPGUID",
          "name": "EnlistmentGuid",
          "description": "A pointer to a GUID that identifies the enlistment. For more information, see the following Remarks section."
        },
        {
          "in_out": "_In_opt_",
          "type": "POBJECT_ATTRIBUTES",
          "name": "ObjectAttributes",
          "description": "A pointer to an OBJECT_ATTRIBUTES structure that specifies the object's attributes. Use the InitializeObjectAttributes routine to initialize this structure, but specify only that routine's InitializedAttributes and Attributes parameters. If the caller is not running in a system thread context, it must set the OBJ_KERNEL_HANDLE flag in the Attributes parameter. This parameter is optional and can be NULL."
        }
      ]
    },
    "ZwOpenEvent": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 3,
      "arguments": [
        {
          "in_out": "_Out_",
          "type": "PHANDLE",
          "name": "EventHandle",
          "description": "A pointer to a variable that will receive the event object handle. The handle includes bookkeeping information, such as a reference count and security context."
        },
        {
          "in_out": "_In_",
          "type": "ACCESS_MASK",
          "name": "DesiredAccess",
          "description": "The ACCESS_MASK value that represents the desired types of access for the event object. The following table contains the event-specific ACCESS_MASK values.  ValueDesired access EVENT_QUERY_STATEQuery the state of the event object. EVENT_MODIFY_STATEModify the state of the event object. EVENT_ALL_ACCESSAll possible access rights to the event object."
        },
        {
          "in_out": "_In_",
          "type": "POBJECT_ATTRIBUTES",
          "name": "ObjectAttributes",
          "description": "A pointer to the object attributes structure that the caller supplied to be used for the specified object. These attributes would include the ObjectName and the handle attributes, for example. This parameter is initialized by calling the InitializeObjectAttributes macro."
        }
      ]
    },
    "ZwOpenFile": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h, Ntddk.h, or Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 6,
      "arguments": [
        {
          "in_out": "_Out_",
          "type": "PHANDLE",
          "name": "FileHandle",
          "description": "Pointer to a HANDLE variable that receives a handle to the file."
        },
        {
          "in_out": "_In_",
          "type": "ACCESS_MASK",
          "name": "DesiredAccess",
          "description": "Specifies an ACCESS_MASK value that determines the requested access to the object. For more information, see the DesiredAccess parameter of ZwCreateFile."
        },
        {
          "in_out": "_In_",
          "type": "POBJECT_ATTRIBUTES",
          "name": "ObjectAttributes",
          "description": "Pointer to an OBJECT_ATTRIBUTES structure that specifies the object name and other attributes. Use InitializeObjectAttributes to initialize this structure. If the caller is not running in a system thread context, it must set the OBJ_KERNEL_HANDLE attribute when it calls InitializeObjectAttributes."
        },
        {
          "in_out": "_Out_",
          "type": "PIO_STATUS_BLOCK",
          "name": "IoStatusBlock",
          "description": "Pointer to an IO_STATUS_BLOCK structure that receives the final completion status and information about the requested operation."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "ShareAccess",
          "description": "Specifies the type of share access for the file. For more information, see the ShareAccess parameter of ZwCreateFile."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "OpenOptions",
          "description": "Specifies the options to apply when opening the file. For more information, see the CreateOptions parameter of ZwCreateFile."
        }
      ]
    },
    "ZwOpenKey": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h, Ntddk.h, or Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 3,
      "arguments": [
        {
          "in_out": "_Out_",
          "type": "PHANDLE",
          "name": "KeyHandle",
          "description": "Pointer to the HANDLE variable that receives the handle to the key."
        },
        {
          "in_out": "_In_",
          "type": "ACCESS_MASK",
          "name": "DesiredAccess",
          "description": "Specifies an ACCESS_MASK value that determines the requested access to the object. For more information, see the DesiredAccess parameter of ZwCreateKey."
        },
        {
          "in_out": "_In_",
          "type": "POBJECT_ATTRIBUTES",
          "name": "ObjectAttributes",
          "description": "Pointer to an OBJECT_ATTRIBUTES structure that specifies the object name and other attributes. Use InitializeObjectAttributes to initialize this structure. If the caller is not running in a system thread context, it must set the OBJ_KERNEL_HANDLE attribute when it calls InitializeObjectAttributes."
        }
      ]
    },
    "ZwOpenProcess": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Ntddk.h (include Ntddk.h or Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 4,
      "arguments": [
        {
          "in_out": "_Out_",
          "type": "PHANDLE",
          "name": "ProcessHandle",
          "description": "A pointer to a variable of type HANDLE. The ZwOpenProcess routine writes the process handle to the variable that this parameter points to."
        },
        {
          "in_out": "_In_",
          "type": "ACCESS_MASK",
          "name": "DesiredAccess",
          "description": "An ACCESS_MASK value that contains the access rights that the caller has requested to the process object."
        },
        {
          "in_out": "_In_",
          "type": "POBJECT_ATTRIBUTES",
          "name": "ObjectAttributes",
          "description": "A pointer to an OBJECT_ATTRIBUTES structure that specifies the attributes to apply to the process object handle. In Windows Vista and later versions of Windows, the ObjectName field of this structure must be set to NULL. In Windows Server 2003, Windows XP, and Windows 2000, this field can, as an option, point to an object name. For more information, see the following Remarks section."
        },
        {
          "in_out": "_In_opt_",
          "type": "PCLIENT_ID",
          "name": "ClientId",
          "description": "A pointer to a client ID that identifies the thread whose process is to be opened. In Windows Vista and later versions of Windows, this parameter must be a non-NULL pointer to a valid client ID. In Windows Server 2003, Windows XP, and Windows 2000, this parameter is optional and can be set to NULL if the OBJECT_ATTRIBUTES structure that ObjectAttributes points to specifies an object name. For more information, see the following Remarks section."
        }
      ]
    },
    "ZwOpenProcessTokenEx": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Ntifs.h (include Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 4,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "ProcessHandle",
          "description": "Handle to the process whose access token is to be opened. The handle must have PROCESS_QUERY_INFORMATION access. Use the NtCurrentProcess macro, defined in Ntddk.h, to specify the current process."
        },
        {
          "in_out": "_In_",
          "type": "ACCESS_MASK",
          "name": "DesiredAccess",
          "description": "ACCESS_MASK structure specifying the requested types of access to the access token. These requested access types are compared with the token's discretionary access-control list (DACL) to determine which accesses are granted or denied."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "HandleAttributes",
          "description": "Attributes for the access token handle. Only OBJ_KERNEL_HANDLE is currently supported. If the caller is not running in the system process context, it must specify OBJ_KERNEL_HANDLE for this parameter."
        },
        {
          "in_out": "_Out_",
          "type": "PHANDLE",
          "name": "TokenHandle",
          "description": "Pointer to a caller-allocated variable that receives a handle to the newly opened access token."
        }
      ]
    },
    "ZwOpenResourceManager": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h or Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 5,
      "arguments": [
        {
          "in_out": "_Out_",
          "type": "PHANDLE",
          "name": "ResourceManagerHandle",
          "description": "A pointer to a caller-allocated variable that receives the resource manager handle if the call to ZwOpenResourceManager succeeds."
        },
        {
          "in_out": "_In_",
          "type": "ACCESS_MASK",
          "name": "DesiredAccess",
          "description": "An ACCESS_MASK value that specifies the caller's requested access to the resource manager object. For more information about how to specify this parameter, see the DesiredAccess parameter of ZwCreateResourceManager. This parameter cannot be zero."
        },
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "TmHandle",
          "description": "A handle to a transaction manager object that was obtained by a previous call to ZwCreateTransactionManager or ZwOpenTransactionManager."
        },
        {
          "in_out": "_In_",
          "type": "LPGUID",
          "name": "ResourceManagerGuid",
          "description": "A pointer to the GUID that identifies the resource manager to open."
        },
        {
          "in_out": "_In_opt_",
          "type": "POBJECT_ATTRIBUTES",
          "name": "ObjectAttributes",
          "description": "A pointer to an OBJECT_ATTRIBUTES structure that specifies the object's attributes. Use the InitializeObjectAttributes routine to initialize this structure, but specify only that routine's InitializedAttributes and Attributes parameters. If the caller is not running in a system thread context, it must set the OBJ_KERNEL_HANDLE flag in the Attributes parameter. This parameter is optional and can be NULL."
        }
      ]
    },
    "ZwOpenSection": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h, Ntddk.h, or Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 3,
      "arguments": [
        {
          "in_out": "_Out_",
          "type": "PHANDLE",
          "name": "SectionHandle",
          "description": "Pointer to a HANDLE variable that receives a handle to the section object."
        },
        {
          "in_out": "_In_",
          "type": "ACCESS_MASK",
          "name": "DesiredAccess",
          "description": "Specifies an ACCESS_MASK value that determines the requested access to the object. For more information, see the DesiredAccess parameter of ZwCreateSection."
        },
        {
          "in_out": "_In_",
          "type": "POBJECT_ATTRIBUTES",
          "name": "ObjectAttributes",
          "description": "Pointer to an OBJECT_ATTRIBUTES structure that specifies the object name and other attributes. Use InitializeObjectAttributes to initialize this structure. If the caller is not running in a system thread context, it must set the OBJ_KERNEL_HANDLE attribute when it calls InitializeObjectAttributes."
        }
      ]
    },
    "ZwOpenSymbolicLinkObject": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h, Ntddk.h, or Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 3,
      "arguments": [
        {
          "in_out": "_Out_",
          "type": "PHANDLE",
          "name": "LinkHandle",
          "description": "Pointer to a HANDLE variable that receives a handle to the symbolic link object."
        },
        {
          "in_out": "_In_",
          "type": "ACCESS_MASK",
          "name": "DesiredAccess",
          "description": "Specifies an ACCESS_MASK value that determines the requested access to the object. The caller usually specified GENERIC_READ, so that the handle can be passed to ZwQuerySymbolicLinkObject."
        },
        {
          "in_out": "_In_",
          "type": "POBJECT_ATTRIBUTES",
          "name": "ObjectAttributes",
          "description": "Pointer to an OBJECT_ATTRIBUTES structure that specifies the object name and other attributes. Use InitializeObjectAttributes to initialize this structure. If the caller is not running in a system thread context, it must set the OBJ_KERNEL_HANDLE attribute when it calls InitializeObjectAttributes."
        }
      ]
    },
    "ZwOpenThreadTokenEx": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Ntifs.h (include Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 5,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "ThreadHandle",
          "description": "Handle to the thread whose access token is to be opened. The handle must have THREAD_QUERY_INFORMATION access. Use the NtCurrentThread macro to specify the current thread."
        },
        {
          "in_out": "_In_",
          "type": "ACCESS_MASK",
          "name": "DesiredAccess",
          "description": "ACCESS_MASK structure specifying the requested types of access to the access token. These requested access types are compared with the token's discretionary access-control list (DACL) to determine which access rights are granted or denied."
        },
        {
          "in_out": "_In_",
          "type": "BOOLEAN",
          "name": "OpenAsSelf",
          "description": "Boolean value specifying whether the access check is to be made against the security context of the thread calling ZwOpenThreadTokenEx or against the security context of the process for the calling thread.  If this parameter is FALSE, the access check is performed using the security context for the calling thread. If the thread is impersonating a client, this security context can be that of a client process. If this parameter is TRUE, the access check is made using the security context of the process for the calling thread."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "HandleAttributes",
          "description": "Attributes for the created handle. Only OBJ_KERNEL_HANDLE is currently supported. If the caller is not running in the system process context, it must specify OBJ_KERNEL_HANDLE for this parameter."
        },
        {
          "in_out": "_Out_",
          "type": "PHANDLE",
          "name": "TokenHandle",
          "description": "Pointer to a caller-allocated variable that receives a handle to the newly opened access token."
        }
      ]
    },
    "ZwOpenTransaction": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h or Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 5,
      "arguments": [
        {
          "in_out": "_Out_",
          "type": "PHANDLE",
          "name": "TransactionHandle",
          "description": "A pointer to a caller-allocated variable that receives a handle to the transaction object if ZwOpenTransaction returns STATUS_SUCCESS."
        },
        {
          "in_out": "_In_",
          "type": "ACCESS_MASK",
          "name": "DesiredAccess",
          "description": "An ACCESS_MASK value that specifies the caller's requested access to the transaction object. For information about how to specify this parameter, see the DesiredAccess parameter of ZwCreateTransaction."
        },
        {
          "in_out": "_In_opt_",
          "type": "POBJECT_ATTRIBUTES",
          "name": "ObjectAttributes",
          "description": "A pointer to an OBJECT_ATTRIBUTES structure that specifies the object's attributes. Use the InitializeObjectAttributes routine to initialize this structure, but specify only that routine's InitializedAttributes and Attributes parameters. If the caller is not running in a system thread context, it must set the OBJ_KERNEL_HANDLE flag in the Attributes parameter. The ObjectAttributes parameter is optional and can be NULL."
        },
        {
          "in_out": "_In_",
          "type": "LPGUID",
          "name": "Uow",
          "description": "A pointer to a GUID that is a transaction object's unit of work (UOW) identifier. This GUID identifies the transaction object to open."
        },
        {
          "in_out": "_In_opt_",
          "type": "HANDLE",
          "name": "TmHandle",
          "description": "A handle to a transaction manager object. If this parameter is not NULL, KTM searches only for transaction objects that belong to the specified transaction manager object. If this parameter is NULL, KTM searches all transaction objects."
        }
      ]
    },
    "ZwOpenTransactionManager": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h or Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 6,
      "arguments": [
        {
          "in_out": "_Out_",
          "type": "PHANDLE",
          "name": "TmHandle",
          "description": "A pointer to a caller-allocated variable that receives a handle to the transaction manager object if ZwOpenTransactionManager returns STATUS_SUCCESS."
        },
        {
          "in_out": "_In_",
          "type": "ACCESS_MASK",
          "name": "DesiredAccess",
          "description": "An ACCESS_MASK value that specifies the caller's requested access to the transaction manager object. For information about how to specify this parameter, see the DesiredAccess parameter of ZwCreateTransactionManager."
        },
        {
          "in_out": "_In_opt_",
          "type": "POBJECT_ATTRIBUTES",
          "name": "ObjectAttributes",
          "description": "A pointer to an OBJECT_ATTRIBUTES structure that specifies the object name and other attributes. Use the InitializeObjectAttributes routine to initialize this structure. If the caller is not running in a system thread context, it must set the OBJ_KERNEL_HANDLE attribute when it calls InitializeObjectAttributes. This parameter is optional and can be NULL."
        },
        {
          "in_out": "_In_opt_",
          "type": "PUNICODE_STRING",
          "name": "LogFileName",
          "description": "A pointer to a UNICODE_STRING structure that contains the path and file name of the log file stream that was created when the transaction manager object was created. For more information, see the LogFileName parameter of ZwCreateTransactionManager. This parameter is optional and can be NULL."
        },
        {
          "in_out": "_In_opt_",
          "type": "LPGUID",
          "name": "TmIdentity",
          "description": "A pointer to a GUID that identifies the transaction manager object.  This parameter is optional and can be NULL."
        },
        {
          "in_out": "_In_opt_",
          "type": "ULONG",
          "name": "OpenOptions",
          "description": "This parameter is not used and must be zero."
        }
      ]
    },
    "ZwPowerInformation": {
      "category": "Drivers",
      "dll": "Ntoskrnl.lib",
      "header": "Ntddk.h",
      "return_type": "NTSTATUS",
      "n_arguments": 5,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "POWER_INFORMATION_LEVEL",
          "name": "InformationLevel",
          "description": "Specifies the requested information level, which indicates the specific power information to be set or retrieved. Currently, the only supported POWER_INFORMATION_LEVEL value is PlatformInformation.  ValueMeaning  PlatformInformation   Information represents the currently supported power capabilities of the system. Information may change as drivers are installed. For example, the installation of legacy device drivers that do not support power management might modify the capabilities of the system."
        },
        {
          "in_out": "_In_opt_",
          "type": "PVOID",
          "name": "InputBuffer",
          "description": "Pointer to a caller-allocated input buffer. This parameter must be NULL, otherwise ERROR_INVALID_PARAMETER is returned."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "InputBufferLength",
          "description": "Size, in bytes, of the buffer at InputBuffer. The parameter must be set to zero."
        },
        {
          "in_out": "_Out_opt_",
          "type": "PVOID",
          "name": "OutputBuffer",
          "description": "A pointer to an output buffer. The data type of this buffer depends on the information level requested in the InformationLevel parameter. For the PlatformInformation level, the only currently supported value, the OutputBuffer  parameter is required and should be of the POWER_PLATFORM_INFORMATION type."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "OutputBufferLength",
          "description": "Size, in bytes, of the output buffer. Depending on the information level requested, the buffer may be variably sized. PlatformInformation, the only currently supported value, requires a buffer that is the size of a POWER_PLATFORM_INFORMATION structure."
        }
      ]
    },
    "ZwPrePrepareComplete": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h or Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 2,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "EnlistmentHandle",
          "description": "A handle to an enlistment object that was obtained by a previous call to ZwCreateEnlistment or ZwOpenEnlistment. The handle must have ENLISTMENT_SUBORDINATE_RIGHTS access to the object."
        },
        {
          "in_out": "_In_opt_",
          "type": "PLARGE_INTEGER",
          "name": "TmVirtualClock",
          "description": "A pointer to a virtual clock value. This parameter is optional and can be NULL."
        }
      ]
    },
    "ZwPrePrepareEnlistment": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h or Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 2,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "EnlistmentHandle",
          "description": "A handle to an enlistment object that was obtained by a previous call to ZwCreateEnlistment or ZwOpenEnlistment. The object must represent a superior enlistment and the handle must have ENLISTMENT_SUPERIOR_RIGHTS access to the object."
        },
        {
          "in_out": "_In_opt_",
          "type": "PLARGE_INTEGER",
          "name": "TmVirtualClock",
          "description": "A pointer to a virtual clock value. This parameter is optional and can be NULL."
        }
      ]
    },
    "ZwPrepareComplete": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h or Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 2,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "EnlistmentHandle",
          "description": "A handle to an enlistment object that was obtained by a previous call to ZwCreateEnlistment or ZwOpenEnlistment. The handle must have ENLISTMENT_SUBORDINATE_RIGHTS access to the object."
        },
        {
          "in_out": "_In_opt_",
          "type": "PLARGE_INTEGER",
          "name": "TmVirtualClock",
          "description": "A pointer to a virtual clock value. This parameter is optional and can be NULL."
        }
      ]
    },
    "ZwPrepareEnlistment": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h or Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 2,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "EnlistmentHandle",
          "description": "A handle to an enlistment object that was obtained by a previous call to ZwCreateEnlistment or ZwOpenEnlistment. The object must represent a superior enlistment and the handle must have ENLISTMENT_SUPERIOR_RIGHTS access to the object."
        },
        {
          "in_out": "_In_opt_",
          "type": "PLARGE_INTEGER",
          "name": "TmVirtualClock",
          "description": "A pointer to a virtual clock value. This parameter is optional and can be NULL."
        }
      ]
    },
    "ZwQueryDirectoryFile": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Ntifs.h (include Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 11,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "FileHandle",
          "description": "A handle returned by ZwCreateFile or ZwOpenFile for the file object that represents the directory for which information is being requested. The file object must have been opened for asynchronous I/O if the caller specifies a non-NULL value for Event or ApcRoutine."
        },
        {
          "in_out": "_In_opt_",
          "type": "HANDLE",
          "name": "Event",
          "description": "An optional handle for a caller-created event. If this parameter is supplied, the caller will be put into a wait state until the requested operation is completed and the given event is set to the Signaled state. This parameter is optional and can be NULL. It must be NULL if the caller will wait for the FileHandle to be set to the Signaled state."
        },
        {
          "in_out": "_In_opt_",
          "type": "PIO_APC_ROUTINE",
          "name": "ApcRoutine",
          "description": "An address of an optional, caller-supplied APC routine to be called when the requested operation completes. This parameter is optional and can be NULL. If there is an I/O completion object associated with the file object, this parameter must be NULL."
        },
        {
          "in_out": "_In_opt_",
          "type": "PVOID",
          "name": "ApcContext",
          "description": "An optional pointer to a caller-determined context area if the caller supplies an APC or if an I/O completion object is associated with the file object. When the operation completes, this context is passed to the APC, if one was specified, or is included as part of the completion message that the I/O Manager posts to the associated I/O completion object.  This parameter is optional and can be NULL. It must be NULL if ApcRoutine is NULL and there is no I/O completion object associated with the file object."
        },
        {
          "in_out": "_Out_",
          "type": "PIO_STATUS_BLOCK",
          "name": "IoStatusBlock",
          "description": "A pointer to an IO_STATUS_BLOCK structure that receives the final completion status and information about the operation. For successful calls that return data, the number of bytes written to the FileInformation buffer is returned in the structure's Information member."
        },
        {
          "in_out": "_Out_",
          "type": "PVOID",
          "name": "FileInformation",
          "description": "A pointer to a buffer that receives the desired information about the file. The structure of the information returned in the buffer is defined by the FileInformationClass parameter."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "Length",
          "description": "The size, in bytes, of the buffer pointed to by FileInformation. The caller should set this parameter according to the given FileInformationClass."
        },
        {
          "in_out": "_In_",
          "type": "FILE_INFORMATION_CLASS",
          "name": "FileInformationClass",
          "description": "The type of information to be returned about files in the directory. One of the following.   ValueMeaning  FileBothDirectoryInformation  Return a FILE_BOTH_DIR_INFORMATION structure for each file.   FileDirectoryInformation  Return a FILE_DIRECTORY_INFORMATION structure for each file.   FileFullDirectoryInformation  Return a FILE_FULL_DIR_INFORMATION structure for each file.   FileIdBothDirectoryInformation  Return a FILE_ID_BOTH_DIR_INFORMATION structure for each file.   FileIdFullDirectoryInformation  Return a FILE_ID_FULL_DIR_INFORMATION structure for each file.   FileNamesInformation  Return a FILE_NAMES_INFORMATION structure for each file.   FileObjectIdInformation  Return a FILE_OBJECTID_INFORMATION structure for each file. This information class is valid only for NTFS volumes on Windows 2000 and later versions of Windows.   FileReparsePointInformation  Return a single FILE_REPARSE_POINT_INFORMATION structure for the directory."
        },
        {
          "in_out": "_In_",
          "type": "BOOLEAN",
          "name": "ReturnSingleEntry",
          "description": "Set to TRUE if only a single entry should be returned, FALSE otherwise. If this parameter is TRUE, ZwQueryDirectoryFile returns only the first entry that is found."
        },
        {
          "in_out": "_In_opt_",
          "type": "PUNICODE_STRING",
          "name": "FileName",
          "description": "An optional pointer to a caller-allocated Unicode string containing the name of a file (or multiple files, if wildcards are used) within the directory specified by FileHandle. This parameter is optional and can be NULL.  If FileName is not NULL, only files whose names match the FileName string are included in the directory scan. If FileName is NULL, all files are included.  The FileName is used as a search expression and is captured on the very first call to ZwQueryDirectoryFile for a given handle. Subsequent calls to ZwQueryDirectoryFile will use the search expression set in the first call. The FileName parameter passed to subsequent calls will be ignored."
        },
        {
          "in_out": "_In_",
          "type": "BOOLEAN",
          "name": "RestartScan",
          "description": "Set to TRUE if the scan is to start at the first entry in the directory. Set to FALSE if resuming the scan from a previous call. When the ZwQueryDirectoryFile routine is called for a particular handle, the RestartScan parameter is treated as if it were set to TRUE, regardless of its value. On subsequent ZwQueryDirectoryFile calls, the value of the RestartScan parameter is honored."
        }
      ]
    },
    "ZwQueryFullAttributesFile": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h, Ntddk.h, or Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 2,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "POBJECT_ATTRIBUTES",
          "name": "ObjectAttributes",
          "description": "A pointer to an OBJECT_ATTRIBUTES structure that supplies the attributes to be used for the file object."
        },
        {
          "in_out": "_Out_",
          "type": "PFILE_NETWORK_OPEN_INFORMATION",
          "name": "FileInformation",
          "description": "A pointer to a FILE_NETWORK_OPEN_INFORMATION structure that receives the returned file attributes information."
        }
      ]
    },
    "ZwQueryInformationEnlistment": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h, Ntddk.h, or Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 5,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "EnlistmentHandle",
          "description": "A handle to an enlistment object that was obtained by a previous call to ZwCreateEnlistment or ZwOpenEnlistment. The handle must have ENLISTMENT_QUERY_INFORMATION access to the object."
        },
        {
          "in_out": "_In_",
          "type": "ENLISTMENT_INFORMATION_CLASS",
          "name": "EnlistmentInformationClass",
          "description": "An ENLISTMENT_INFORMATION_CLASS-typed enumeration value that specifies the information to be obtained. This value must be one of the following values:   EnlistmentBasicInformation   EnlistmentRecoveryInformation   The enumeration's EnlistmentFullInformation value is not used with ZwQueryInformationEnlistment."
        },
        {
          "in_out": "_Out_",
          "type": "PVOID",
          "name": "EnlistmentInformation",
          "description": "A pointer to a caller-allocated buffer that receives the information that the EnlistmentInformationClass parameter specifies. If the EnlistmentInformationClass parameter's value is EnlistmentBasicInformation, this buffer's structure type must be ENLISTMENT_BASIC_INFORMATION. If the EnlistmentInformationClass parameter's value is EnlistmentRecoveryInformation, this buffer's type must match the caller-defined type that the caller used when it called ZwSetInformationEnlistment."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "EnlistmentInformationLength",
          "description": "The length, in bytes, of the buffer that the EnlistmentInformation parameter points to."
        },
        {
          "in_out": "_Out_opt_",
          "type": "PULONG",
          "name": "ReturnLength",
          "description": "A pointer to a caller-allocated variable that receives the length, in bytes, of the information that KTM writes to the EnlistmentInformation buffer. This parameter is optional and can be NULL."
        }
      ]
    },
    "ZwQueryInformationFile": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h, Ntddk.h, or Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 5,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "FileHandle",
          "description": "Handle to a file object. The handle is created by a successful call to ZwCreateFile or ZwOpenFile."
        },
        {
          "in_out": "_Out_",
          "type": "PIO_STATUS_BLOCK",
          "name": "IoStatusBlock",
          "description": "Pointer to an IO_STATUS_BLOCK structure that receives the final completion status and information about the operation. The Information member receives the number of bytes that this routine actually writes to the FileInformation buffer."
        },
        {
          "in_out": "_Out_",
          "type": "PVOID",
          "name": "FileInformation",
          "description": "Pointer to a caller-allocated buffer into which the routine writes the requested information about the file object. The FileInformationClass parameter specifies the type of information that the caller requests."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "Length",
          "description": "The size, in bytes, of the buffer pointed to by FileInformation."
        },
        {
          "in_out": "_In_",
          "type": "FILE_INFORMATION_CLASS",
          "name": "FileInformationClass",
          "description": "Specifies the type of information to be returned about the file, in the buffer that FileInformation points to. Device and intermediate drivers can specify any of the following FILE_INFORMATION_CLASS values.  FILE_INFORMATION_CLASS valueType of information returned  FileAccessInformation  A FILE_ACCESS_INFORMATION structure. This structure contains an access mask. For more information about access masks, see ACCESS_MASK.   FileAlignmentInformation  A FILE_ALIGNMENT_INFORMATION structure. The caller can query this information as long as the file is open, without any particular requirements for DesiredAccess. This information is useful if the file was opened with the FILE_NO_INTERMEDIATE_BUFFERING flag specified in the CreateOptions parameter.   FileAllInformation  A FILE_ALL_INFORMATION structure. By combining several file-information structures into a single structure, FILE_ALL_INFORMATION reduces the number of queries required to obtain information about a file.   FileAttributeTagInformation  A FILE_ATTRIBUTE_TAG_INFORMATION structure. The caller must have opened the file with the FILE_READ_ATTRIBUTES flag specified in the DesiredAccess parameter.   FileBasicInformation  A FILE_BASIC_INFORMATION structure. The caller must have opened the file with the FILE_READ_ATTRIBUTES flag specified in the DesiredAccess parameter.   FileEaInformation  A FILE_EA_INFORMATION structure. This structure specifies the size of the extended attributes block that is associated with the file.   FileInternalInformation  A FILE_INTERNAL_INFORMATION structure. This structure specifies a 64-bit file ID that uniquely identifies a file in NTFS. On other file systems, this file ID is not guaranteed to be unique.   FileIoPriorityHintInformation  A FILE_IO_PRIORITY_HINT_INFORMATION structure. The caller must have opened the file with the FILE_READ_DATA flag specified in the DesiredAccess parameter.   FileModeInformation  A FILE_MODE_INFORMATION structure. This structure contains a set of flags that specify the mode in which the file can be accessed. These flags are a subset of the options that can be specified in the CreateOptions parameter of the IoCreateFile routine.   FileNameInformation  A FILE_NAME_INFORMATION structure. The structure can contain the file's full path or only a portion of it. The caller can query this information as long as the file is open, without any particular requirements for DesiredAccess. For more information about the file-name syntax, see the Remarks section later in this topic.   FileNetworkOpenInformation  A FILE_NETWORK_OPEN_INFORMATION structure. The caller must have opened the file with the FILE_READ_ATTRIBUTES flag specified in the DesiredAccess parameter.   FilePositionInformation  A FILE_POSITION_INFORMATION structure. The caller must have opened the file with the DesiredAccess FILE_READ_DATA or FILE_WRITE_DATA flag specified in the DesiredAccess parameter, and with the FILE_SYNCHRONOUS_IO_ALERT or FILE_SYNCHRONOUS_IO_NONALERT flag specified in the CreateOptions parameter.   FileStandardInformation  A FILE_STANDARD_INFORMATION structure. The caller can query this information as long as the file is open, without any particular requirements for DesiredAccess.   FileIsRemoteDeviceInformation  A FILE_IS_REMOTE_DEVICE_INFORMATION structure. The caller can query this information as  long as the file is open, without any particular requirements for DesiredAccess."
        }
      ]
    },
    "ZwQueryInformationProcess": {
      "category": "Processes",
      "dll": "Ntdll.dll",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 5,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "ProcessHandle",
          "description": "A handle to the process for which information is to be retrieved."
        },
        {
          "in_out": "_In_",
          "type": "PROCESSINFOCLASS",
          "name": "ProcessInformationClass",
          "description": "The type of process information to be retrieved. This parameter can be one of the following values from the PROCESSINFOCLASS enumeration.  ValueMeaning  ProcessBasicInformation 0   Retrieves a pointer to a PEB structure that can be used to determine whether the specified process is being debugged, and a unique value used by the system to identify the specified process.  It is best to use the CheckRemoteDebuggerPresent and GetProcessId  functions to obtain this information.   ProcessDebugPort 7   Retrieves a DWORD_PTR value that is the port number of the debugger for the process. A nonzero value indicates that the process is being run under the control of a ring 3 debugger. It is best to use the CheckRemoteDebuggerPresent or IsDebuggerPresent function.   ProcessWow64Information 26   Determines whether the process is running in the WOW64 environment (WOW64 is the x86 emulator that allows Win32-based applications to run on 64-bit Windows). It is best to use the  IsWow64Process function to obtain this information.   ProcessImageFileName 27   Retrieves a UNICODE_STRING value containing the name of the image file for the process.   ProcessBreakOnTermination 29   Retrieves a ULONG value indicating whether the process is considered critical. Note  This value can be used starting in Windows XP with SP3. Starting in Windows 8.1, IsProcessCritical should be used instead."
        },
        {
          "in_out": "_Out_",
          "type": "PVOID",
          "name": "ProcessInformation",
          "description": "A pointer to a buffer supplied by the calling application into which the function writes the requested information. The size of the information written varies depending on the value of the ProcessInformationClass parameter:   PROCESS_BASIC_INFORMATION  When the ProcessInformationClass  parameter is ProcessBasicInformation,  the buffer pointed to by the ProcessInformation parameter should be large enough to hold a single PROCESS_BASIC_INFORMATION structure having the following layout:       Copy     typedef struct _PROCESS_BASIC_INFORMATION {     PVOID Reserved1;     PPEB PebBaseAddress;     PVOID Reserved2[2];     ULONG_PTR UniqueProcessId;     PVOID Reserved3; } PROCESS_BASIC_INFORMATION;     The UniqueProcessId member points to the system's unique identifier for this process. It is best to use the GetProcessId function to retrieve this information. The PebBaseAddress member points to a PEB structure. The  other members of this structure are reserved for internal use by the operating system.  ULONG_PTR  When the ProcessInformationClass  parameter is ProcessWow64Information,  the buffer pointed to by the ProcessInformation parameter should be large enough to hold a  ULONG_PTR. If this value is nonzero, the process is running in a WOW64 environment; otherwise, if the value is equal to zero, the process is not running in a WOW64 environment. It is best to use the IsWow64Process function to determine whether a process is running in the WOW64 environment.  UNICODE_STRING  When the ProcessInformationClass  parameter is ProcessImageFileName,  the buffer pointed to by the ProcessInformation parameter should be large enough to hold a  UNICODE_STRING structure as well as the string itself. The string stored in the Buffer member is the name of the image file. If the buffer is too small, the function fails with the STATUS_INFO_LENGTH_MISMATCH error code and the ReturnLength parameter is set to the required buffer size."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "ProcessInformationLength",
          "description": "The size of the buffer pointed to by the ProcessInformation parameter, in bytes."
        },
        {
          "in_out": "_Out_opt_",
          "type": "PULONG",
          "name": "ReturnLength",
          "description": "A pointer to a variable in which the function returns the size of the requested information. If the function was successful, this is the size of the information written to the buffer pointed to by the ProcessInformation parameter, but if the buffer was too small, this is the minimum size of buffer needed to receive the information successfully."
        }
      ]
    },
    "ZwQueryInformationResourceManager": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h, Ntddk.h, or Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 5,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "ResourceManagerHandle",
          "description": "A handle to a resource manager object that was obtained by a previous call to ZwCreateResourceManager or ZwOpenResourceManager. The handle must have RESOURCEMANAGER_QUERY_INFORMATION access to the object."
        },
        {
          "in_out": "_In_",
          "type": "RESOURCEMANAGER_INFORMATION_CLASS",
          "name": "ResourceManagerInformationClass",
          "description": "A RESOURCEMANAGER_INFORMATION_CLASS-typed value that specifies the information to retrieve. This value must be ResourceManagerBasicInformation."
        },
        {
          "in_out": "_Out_",
          "type": "PVOID",
          "name": "ResourceManagerInformation",
          "description": "A pointer to a caller-allocated RESOURCEMANAGER_BASIC_INFORMATION structure that receives information from ZwQueryInformationResourceManager."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "ResourceManagerInformationLength",
          "description": "The length, in bytes, of the buffer that the ResourceManagerInformation parameter points to."
        },
        {
          "in_out": "_Out_opt_",
          "type": "PULONG",
          "name": "ReturnLength",
          "description": "A pointer to a caller-allocated variable that receives the length, in bytes, of the information that KTM writes to the ResourceManagerInformation buffer. This parameter is optional and can be NULL."
        }
      ]
    },
    "ZwQueryInformationToken": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Ntifs.h (include Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 5,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "TokenHandle",
          "description": "Handle for an access token from which information is to be retrieved. If TokenInformationClass is set to TokenSource, the handle must have TOKEN_QUERY_SOURCE access. For all other TokenInformationClass values, the handle must have TOKEN_QUERY access. For more information about access rights for access-token objects, see the Security section of the Windows SDK documentation."
        },
        {
          "in_out": "_In_",
          "type": "TOKEN_INFORMATION_CLASS",
          "name": "TokenInformationClass",
          "description": "A value from the TOKEN_INFORMATION_CLASS enumerated type identifying the type of information to be retrieved. The possible values for this parameter are listed in the TokenInformationClass Value column of the table shown in the description of the TokenInformation parameter."
        },
        {
          "in_out": "_Out_",
          "type": "PVOID",
          "name": "TokenInformation",
          "description": "Pointer to a caller-allocated buffer that receives the requested information about the token. The structure put into this buffer depends upon the value of TokenInformationClass, as shown in the following table. All structures must be aligned on a 32-bit boundary.  TokenInformationClass ValueEffect on TokenInformation Buffer  TokenDefaultDacl  The buffer receives a TOKEN_DEFAULT_DACL structure containing the default DACL for newly created objects.    TokenGroups  The buffer receives a TOKEN_GROUPS structure containing the group accounts associated with the token.   TokenImpersonationLevel  The buffer receives a SECURITY_IMPERSONATION_LEVEL value indicating the impersonation level of the token. If the access token is not an impersonation token, the call to ZwQueryInformationToken fails.    TokenOwner  The buffer receives a TOKEN_OWNER structure containing the default owner SID for newly created objects.   TokenPrimaryGroup  The buffer receives a TOKEN_PRIMARY_GROUP structure containing the default primary group SID for newly created objects.    TokenPrivileges  The buffer receives a TOKEN_PRIVILEGES structure containing the token's privileges.   TokenSessionId  The buffer receives a 32-bit value specifying the Terminal Services session identifier associated with the token. If the token is associated with the Terminal Server console session, the session identifier is zero. A nonzero session identifier indicates a Terminal Services client session. In a non-Terminal Services environment, the session identifier is zero.   TokenSource  The buffer receives a TOKEN_SOURCE structure containing the source of the token. TOKEN_QUERY_SOURCE access is needed to retrieve this information.   TokenStatistics  The buffer receives a TOKEN_STATISTICS structure containing various token statistics.   TokenType  The buffer receives a TOKEN_TYPE value indicating whether the token is a primary or impersonation token.    TokenUser  The buffer receives a TOKEN_USER structure containing the token's user account."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "TokenInformationLength",
          "description": "Length, in bytes, of the caller-allocated TokenInformation buffer."
        },
        {
          "in_out": "_Out_",
          "type": "PULONG",
          "name": "ReturnLength",
          "description": "Pointer to a caller-allocated variable that receives the actual length, in bytes, of the information returned in the TokenInformation buffer. If either of the following conditions is true, no data is returned in the TokenInformation buffer:    The size of the requested token information structure is greater than TokenInformationLength. In this case, ReturnLength receives the actual number of bytes needed to store the requested information.    The value of TokenInformationClass is TokenDefaultDacl, and there is no default DACL established for the token. In this case, ReturnLength receives zero."
        }
      ]
    },
    "ZwQueryInformationTransaction": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h, Ntddk.h, or Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 5,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "TransactionHandle",
          "description": "A handle to a transaction object that was obtained by a previous call to ZwCreateTransaction or ZwOpenTransaction. The handle must have TRANSACTION_QUERY_INFORMATION access to the object."
        },
        {
          "in_out": "_In_",
          "type": "TRANSACTION_INFORMATION_CLASS",
          "name": "TransactionInformationClass",
          "description": "A TRANSACTION_INFORMATION_CLASS-typed value that specifies the information to obtain. The value must be one of the following values:   TransactionBasicInformation   TransactionPropertiesInformation   TransactionEnlistmentInformation   The TransactionFullInformation value is not used with ZwQueryInformationTransaction."
        },
        {
          "in_out": "_Out_",
          "type": "PVOID",
          "name": "TransactionInformation",
          "description": "A pointer to a caller-allocated buffer that receives the information that the TransactionInformationClass parameter specifies. The buffer's structure type must be TRANSACTION_BASIC_INFORMATION, TRANSACTION_PROPERTIES_INFORMATION, or TRANSACTION_ENLISTMENTS_INFORMATION."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "TransactionInformationLength",
          "description": "The length, in bytes, of the buffer that the TransactionInformation parameter points to, including the length of any additional array elements that the caller has allocated to receive information."
        },
        {
          "in_out": "_Out_opt_",
          "type": "PULONG",
          "name": "ReturnLength",
          "description": "A pointer to a caller-allocated variable that receives the length, in bytes, of the information that KTM writes to the TransactionInformation buffer. This parameter is optional and can be NULL."
        }
      ]
    },
    "ZwQueryInformationTransactionManager": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h, Ntddk.h, or Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 5,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "TransactionManagerHandle",
          "description": "A handle to a transaction manager object that was obtained by a previous call to ZwCreateTransactionManager or ZwOpenTransactionManager. The handle must have TRANSACTIONMANAGER_QUERY_INFORMATION access to the object."
        },
        {
          "in_out": "_In_",
          "type": "TRANSACTIONMANAGER_INFORMATION_CLASS",
          "name": "TransactionManagerInformationClass",
          "description": "A TRANSACTIONMANAGER_INFORMATION_CLASS-typed enumeration value that specifies the information to be obtained. This value must be one of the following:   TransactionManagerBasicInformation   TransactionManagerLogInformation   TransactionManagerLogPathInformation   The enumeration's TransactionManagerOnlineProbeInformation value is not used with ZwQueryInformationTransactionManager."
        },
        {
          "in_out": "_Out_",
          "type": "PVOID",
          "name": "TransactionManagerInformation",
          "description": "A pointer to a caller-allocated buffer that receives the information that the TransactionManagerInformationClass parameter specifies. The buffer's structure type must be TRANSACTIONMANAGER_BASIC_INFORMATION, TRANSACTIONMANAGER_LOG_INFORMATION, TRANSACTIONMANAGER_LOGPATH_INFORMATION, or TRANSACTIONMANAGER_RECOVERY_INFORMATION."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "TransactionManagerInformationLength",
          "description": "The length, in bytes, of the buffer that the TransactionManagerInformation parameter points to, including the length of any additional array elements that the caller has allocated to receive information."
        },
        {
          "in_out": "_Out_opt_",
          "type": "PULONG",
          "name": "ReturnLength",
          "description": "A pointer to a caller-allocated variable that receives the length, in bytes, of the information that KTM writes to the TransactionManagerInformation buffer. This parameter is optional and can be NULL."
        }
      ]
    },
    "ZwQueryKey": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h, Ntddk.h, or Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 5,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "KeyHandle",
          "description": "Handle to the registry key to obtain information about. This handle is created by a successful call to ZwCreateKey or ZwOpenKey."
        },
        {
          "in_out": "_In_",
          "type": "KEY_INFORMATION_CLASS",
          "name": "KeyInformationClass",
          "description": "Specifies a KEY_INFORMATION_CLASS value that determines the type of information returned in the KeyInformation buffer."
        },
        {
          "in_out": "_Out_opt_",
          "type": "PVOID",
          "name": "KeyInformation",
          "description": "Pointer to a caller-allocated buffer that receives the requested information."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "Length",
          "description": "Specifies the size, in bytes, of the KeyInformation buffer."
        },
        {
          "in_out": "_Out_",
          "type": "PULONG",
          "name": "ResultLength",
          "description": "Pointer to a variable that receives the size, in bytes, of the requested key information. If ZwQueryKey returns STATUS_SUCCESS, the variable contains the amount of data returned. If ZwQueryKey returns STATUS_BUFFER_OVERFLOW or STATUS_BUFFER_TOO_SMALL, you can use the value of the variable to determine the required buffer size."
        }
      ]
    },
    "ZwQueryObject": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Ntifs.h (include Ntifs.h or FltKernel.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 5,
      "arguments": [
        {
          "in_out": "_In_opt_",
          "type": "HANDLE",
          "name": "Handle",
          "description": "A handle to the object to obtain information about."
        },
        {
          "in_out": "_In_",
          "type": "OBJECT_INFORMATION_CLASS",
          "name": "ObjectInformationClass",
          "description": "Specifies an OBJECT_INFORMATION_CLASS value that determines the type of information returned in the ObjectInformation buffer."
        },
        {
          "in_out": "_Out_opt_",
          "type": "PVOID",
          "name": "ObjectInformation",
          "description": "A pointer to a caller-allocated buffer that receives the requested information."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "ObjectInformationLength",
          "description": "Specifies the size, in bytes, of the ObjectInformation buffer."
        },
        {
          "in_out": "_Out_opt_",
          "type": "PULONG",
          "name": "ReturnLength",
          "description": "A pointer to a variable that receives the size, in bytes, of the requested key information. If ZwQueryObject returns STATUS_SUCCESS, the variable contains the amount of data returned. If ZwQueryObject returns STATUS_BUFFER_OVERFLOW or STATUS_BUFFER_TOO_SMALL, you can use the value of the variable to determine the required buffer size."
        }
      ]
    },
    "ZwQueryQuotaInformationFile": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Ntifs.h (include Ntifs.h or FltKernel.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 9,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "FileHandle",
          "description": "A handle for the file object that represents the file or volume for which the quota information is requested."
        },
        {
          "in_out": "_Out_",
          "type": "PIO_STATUS_BLOCK",
          "name": "IoStatusBlock",
          "description": "The address of the caller's I/O status block."
        },
        {
          "in_out": "_Out_",
          "type": "PVOID",
          "name": "Buffer",
          "description": "A buffer to receive the quota information for the volume. The quota information is formatted as one or more FILE_QUOTA_INFORMATION structures. The NextEntryOffset field in the FILE_QUOTA_INFORMATION structure contains the offset, in bytes, of the next quota entry in the list. If there are no more entries after the current one, this member is zero."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "Length",
          "description": "The length in bytes of the buffer."
        },
        {
          "in_out": "_In_",
          "type": "BOOLEAN",
          "name": "ReturnSingleEntry",
          "description": "A Boolean value that indicates if only a single entry should be returned rather than filling the buffer with as many entries as possible."
        },
        {
          "in_out": "_In_opt_",
          "type": "PVOID",
          "name": "SidList",
          "description": "An optional list of SIDs whose quota information is to be returned. Each entry in the list is a FILE_GET_QUOTA_INFORMATION structure. The NextEntryOffset field in the FILE_GET_QUOTA_INFORMATION structure contains the offset, in bytes, of the next quota entry in the list. If there are no more entries after the current one, this member is zero."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "SidListLength",
          "description": "The length in bytes of the SID list, if one was specified."
        },
        {
          "in_out": "_In_opt_",
          "type": "PSID",
          "name": "StartSid",
          "description": "An optional pointer to the SID of the entry at which to begin scanning the quota information. This parameter should be set if the returned information is to start with an entry other than the first SID. This parameter is ignored if a SidList parameter is specified."
        },
        {
          "in_out": "_In_",
          "type": "BOOLEAN",
          "name": "RestartScan",
          "description": "A Boolean value that indicates whether the scan of the quota information is to be restarted from the beginning. Set this parameter to TRUE if the scan of the quota information is to start at the first entry in the volume's quota information list. Set to FALSE if resuming the scan from a previous call to ZwQueryQuotaInformationFile. The caller must set this parameter to TRUE when calling ZwQueryQuotaInformationFile for the first time."
        }
      ]
    },
    "ZwQuerySecurityObject": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Ntifs.h (include Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 5,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "Handle",
          "description": "Handle for the object whose security descriptor is to be queried. This handle must have the access specified in the Meaning column of the table shown in the description of the SecurityInformation parameter."
        },
        {
          "in_out": "_In_",
          "type": "SECURITY_INFORMATION",
          "name": "SecurityInformation",
          "description": "Pointer to a SECURITY_INFORMATION value specifying the information to be queried.  ValueMeaning  DACL_SECURITY_INFORMATION  Indicates the discretionary access control list (DACL) of the object is being queried. Requires READ_CONTROL access.    GROUP_SECURITY_INFORMATION  Indicates the primary group identifier of the object is being queried. Requires READ_CONTROL access.    OWNER_SECURITY_INFORMATION  Indicates the owner identifier of the object is being queried. Requires READ_CONTROL access.    SACL_SECURITY_INFORMATION  Indicates the system ACL (SACL) of the object is being queried. Requires ACCESS_SYSTEM_SECURITY access."
        },
        {
          "in_out": "_Out_",
          "type": "PSECURITY_DESCRIPTOR",
          "name": "SecurityDescriptor",
          "description": "Caller-allocated buffer that ZwQuerySecurityObject fills with a copy of the specified security descriptor. The SECURITY_DESCRIPTOR structure is returned in self-relative format."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "Length",
          "description": "Size, in bytes, of the buffer pointed to by SecurityDescriptor."
        },
        {
          "in_out": "_Out_",
          "type": "PULONG",
          "name": "LengthNeeded",
          "description": "Pointer to a caller-allocated variable that receives the number of bytes required to store the copied security descriptor."
        }
      ]
    },
    "ZwQuerySymbolicLinkObject": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h, Ntddk.h, or Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 3,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "LinkHandle",
          "description": "Handle to the symbolic-link object that you want to query. This handle is created by a successful call to ZwOpenSymbolicLinkObject."
        },
        {
          "in_out": "_Inout_",
          "type": "PUNICODE_STRING",
          "name": "LinkTarget",
          "description": "Pointer to an initialized Unicode string that receives the target of the symbolic link."
        },
        {
          "in_out": "_Out_opt_",
          "type": "PULONG",
          "name": "ReturnedLength",
          "description": "contains the maximum number of bytes to copy into the Unicode string at LinkTarget. On output, the unsigned long integer contains the length of the Unicode string naming the target of the symbolic link."
        }
      ]
    },
    "ZwQuerySystemInformation": {
      "category": "System Information Functions",
      "dll": "Ntdll.dll",
      "header": "",
      "return_type": "NTSTATUS",
      "n_arguments": 4,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "SYSTEM_INFORMATION_CLASS",
          "name": "SystemInformationClass",
          "description": "The type of system information to be retrieved. This parameter can be one of the following values from the SYSTEM_INFORMATION_CLASS enumeration type.  SystemBasicInformation   The number of processors in the system in a SYSTEM_BASIC_INFORMATION structure. Use the GetSystemInfo function instead.  SystemPerformanceInformation   An opaque SYSTEM_PERFORMANCE_INFORMATION structure that can be used to generate an unpredictable seed for a random number generator. Use the CryptGenRandom function instead.  SystemTimeOfDayInformation   An opaque SYSTEM_TIMEOFDAY_INFORMATION structure that can be used to generate an unpredictable seed for a random number generator. Use the CryptGenRandom function instead.  SystemProcessInformation   An array of SYSTEM_PROCESS_INFORMATION structures, one for each process running in the system.  These structures contain information about the resource usage of each process, including the number of handles used by the process, the peak page-file usage, and the number of memory pages that the process has allocated.  SystemProcessorPerformanceInformation   An array of SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION structures, one for each processor installed in the system.  SystemInterruptInformation   An opaque SYSTEM_INTERRUPT_INFORMATION structure that can be used to generate an unpredictable seed for a random number generator. Use the CryptGenRandom function instead.  SystemExceptionInformation   An opaque SYSTEM_EXCEPTION_INFORMATION structure that can be used to generate an unpredictable seed for a random number generator. Use the CryptGenRandom function instead.  SystemRegistryQuotaInformation   A SYSTEM_REGISTRY_QUOTA_INFORMATION structure.  SystemLookasideInformation   An opaque SYSTEM_LOOKASIDE_INFORMATION structure that can be used to generate an unpredictable seed for a random number generator. Use the CryptGenRandom function instead."
        },
        {
          "in_out": "_Inout_",
          "type": "PVOID",
          "name": "SystemInformation",
          "description": "A pointer to a buffer that receives the requested information. The size and structure of this information varies depending on the value of the SystemInformationClass parameter, as indicated in the following table.  SYSTEM_BASIC_INFORMATION   When the SystemInformationClass  parameter is SystemBasicInformation,  the buffer pointed to by the SystemInformation parameter should be large enough to hold a single SYSTEM_BASIC_INFORMATION structure having the following layout:        Copy     typedef struct _SYSTEM_BASIC_INFORMATION {     BYTE Reserved1[24];     PVOID Reserved2[4];     CCHAR NumberOfProcessors; } SYSTEM_BASIC_INFORMATION;      The NumberOfProcessors member contains the number of processors present in the system. Use GetSystemInfo instead to retrieve this information. The  other members of the structure are reserved for internal use by the operating system.  SYSTEM_PERFORMANCE_INFORMATION   When the SystemInformationClass  parameter is SystemPerformanceInformation, the buffer pointed to by the SystemInformation parameter should be large enough to hold an opaque SYSTEM_PERFORMANCE_INFORMATION structure for use in generating an unpredictable seed for a random number generator. For this purpose, the structure has the following layout:        Copy     typedef struct _SYSTEM_PERFORMANCE_INFORMATION {     BYTE Reserved1[312]; } SYSTEM_PERFORMANCE_INFORMATION;     Individual members of the structure are reserved for internal use by the operating system. Use the CryptGenRandom  function instead to generate cryptographically random data.  SYSTEM_TIMEOFDAY_INFORMATION   When the SystemInformationClass  parameter is SystemTimeOfDayInformation, the buffer pointed to by the SystemInformation parameter should be large enough to hold an opaque SYSTEM_TIMEOFDAY_INFORMATION structure for use in generating an unpredictable seed for a random number generator. For this purpose, the structure has the following layout:        Copy     typedef struct _SYSTEM_TIMEOFDAY_INFORMATION {     BYTE Reserved1[48]; } SYSTEM_TIMEOFDAY_INFORMATION;     Individual members of the structure are reserved for internal use by the operating system. Use the CryptGenRandom  function instead to generate cryptographically random data.  SYSTEM_PROCESS_INFORMATION   When the SystemInformationClass  parameter is SystemProcessInformation,  the buffer pointed to by the SystemInformation parameter should be large enough to hold an array that contains as many SYSTEM_PROCESS_INFORMATION structures as there are processes running in the system. Each structure has the following layout:       Copy     typedef struct _SYSTEM_PROCESS_INFORMATION {     ULONG NextEntryOffset;     ULONG NumberOfThreads;     BYTE Reserved1[48];     PVOID Reserved2[3];     HANDLE UniqueProcessId;     PVOID Reserved3;     ULONG HandleCount;     BYTE Reserved4[4];     PVOID Reserved5[11];     SIZE_T PeakPagefileUsage;     SIZE_T PrivatePageCount;     LARGE_INTEGER Reserved6[6]; } SYSTEM_PROCESS_INFORMATION;     The NumberOfThreads member contains the total number of currently running threads in the process. The HandleCount member contains the total number of handles being used by the process in question; use GetProcessHandleCount  to retrieve this information instead. The PeakPagefileUsage member contains the  maximum number of bytes of page-file storage used by the process, and the PrivatePageCount member contains the number of memory pages allocated for the use of this process. You can also retrieve this information using either the GetProcessMemoryInfo function or the Win32_Process class. The  other members of the structure are reserved for internal use by the operating system.  SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION   When the SystemInformationClass  parameter is SystemProcessorPerformanceInformation,  the buffer pointed to by the SystemInformation parameter should be large enough to hold an array that contains as many SYSTEM_PROCESS_INFORMATION structures as there are processors (CPUs) installed in the system. Each structure has the following layout:       Copy     typedef struct _SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION {     LARGE_INTEGER IdleTime;     LARGE_INTEGER KernelTime;     LARGE_INTEGER UserTime;     LARGE_INTEGER Reserved1[2];     ULONG Reserved2; } SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION;     The IdleTime member contains the amount of time that the system has been idle, in 1/100ths of a nanosecond. The KernelTime member contains the amount of time that the system has spent executing in Kernel mode (including all threads in all processes, on all processors), in 1/100ths of a nanosecond. The UserTime member contains the amount of time that the system has spent executing in User mode (including all threads in all processes, on all processors), in 1/100ths of a nanosecond. Use GetSystemTimes instead to retrieve this information.  SYSTEM_INTERRUPT_INFORMATION   When the SystemInformationClass  parameter is SystemInterruptInformation, the buffer pointed to by the SystemInformation parameter should be large enough to hold an array that contains as many opaque  SYSTEM_INTERRUPT_INFORMATION structures as there are  processors (CPUs) installed on the system. Each structure, or the array as a whole, can be used to generate an unpredictable seed for a random number generator. For this purpose, the structure has the following layout:        Copy     typedef struct _SYSTEM_INTERRUPT_INFORMATION {     BYTE Reserved1[24]; } SYSTEM_INTERRUPT_INFORMATION;     Individual members of the structure are reserved for internal use by the operating system. Use the CryptGenRandom  function instead to generate cryptographically random data.  SYSTEM_EXCEPTION_INFORMATION   When the SystemInformationClass  parameter is SystemExceptionInformation, the buffer pointed to by the SystemInformation parameter should be large enough to hold an opaque SYSTEM_EXCEPTION_INFORMATION structure for use in generating an unpredictable seed for a random number generator. For this purpose, the structure has the following layout:        Copy     typedef struct _SYSTEM_EXCEPTION_INFORMATION {     BYTE Reserved1[16]; } SYSTEM_EXCEPTION_INFORMATION;     Individual members of the structure are reserved for internal use by the operating system. Use the CryptGenRandom  function instead to generate cryptographically random data.  SYSTEM_REGISTRY_QUOTA_INFORMATION   When the SystemInformationClass  parameter is SystemRegistryQuotaInformation,  the buffer pointed to by the SystemInformation parameter should be large enough to hold a single SYSTEM_REGISTRY_QUOTA_INFORMATION structure having the following layout:       Copy     typedef struct _SYSTEM_REGISTRY_QUOTA_INFORMATION {     ULONG RegistryQuotaAllowed;     ULONG RegistryQuotaUsed;     PVOID Reserved1; } SYSTEM_REGISTRY_QUOTA_INFORMATION;     The RegistryQuotaAllowed member contains the maximum size, in bytes, that the Registry can attain on this system. The RegistryQuotaUsed member contains the current size of the Registry, in bytes. Use GetSystemRegistryQuota instead to retrieve this information. The  other member of the structure is reserved for internal use by the operating system.  SYSTEM_LOOKASIDE_INFORMATION   When the SystemInformationClass  parameter is SystemLookasideInformation, the buffer pointed to by the SystemInformation parameter should be large enough to hold an opaque SYSTEM_LOOKASIDE_INFORMATION structure for use in generating an unpredictable seed for a random number generator. For this purpose, the structure has the following layout:        Copy     typedef struct _SYSTEM_LOOKASIDE_INFORMATION {     BYTE Reserved1[32]; } SYSTEM_LOOKASIDE_INFORMATION;     Individual members of the structure are reserved for internal use by the operating system. Use the CryptGenRandom  function instead to generate cryptographically random data."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "SystemInformationLength",
          "description": "The size of the buffer pointed to by the SystemInformation parameter, in bytes."
        },
        {
          "in_out": "_Out_opt_",
          "type": "PULONG",
          "name": "ReturnLength",
          "description": "An optional pointer to a location where the function  writes the actual size of the information requested. If that size is less than or equal to the     SystemInformationLength parameter, the function copies the information into the SystemInformation buffer; otherwise, it returns an NTSTATUS error code and returns in ReturnLength the size of buffer required to receive the requested information."
        }
      ]
    },
    "ZwQueryValueKey": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h, Ntddk.h, or Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 6,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "KeyHandle",
          "description": "Handle to the key to read value entries from. This handle is created by a successful call to ZwCreateKey or ZwOpenKey."
        },
        {
          "in_out": "_In_",
          "type": "PUNICODE_STRING",
          "name": "ValueName",
          "description": "Pointer to the name of the value entry to obtain data for."
        },
        {
          "in_out": "_In_",
          "type": "KEY_VALUE_INFORMATION_CLASS",
          "name": "KeyValueInformationClass",
          "description": "A KEY_VALUE_INFORMATION_CLASS value that determines the type of information returned in the KeyValueInformation buffer."
        },
        {
          "in_out": "_Out_opt_",
          "type": "PVOID",
          "name": "KeyValueInformation",
          "description": "Pointer to a caller-allocated buffer that receives the requested information."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "Length",
          "description": "Specifies the size, in bytes, of the KeyValueInformation buffer."
        },
        {
          "in_out": "_Out_",
          "type": "PULONG",
          "name": "ResultLength",
          "description": "Pointer to a variable that receives the size, in bytes, of the key information. If the ZwQueryValueKey routine returns STATUS_SUCCESS, callers can use the value of this variable to determine the amount of data returned. If the routine returns STATUS_BUFFER_OVERFLOW or STATUS_BUFFER_TOO_SMALL, callers can use the value of this variable to determine the size of buffer required to hold the key information."
        }
      ]
    },
    "ZwQueryVirtualMemory": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Ntifs.h",
      "return_type": "NTSTATUS",
      "n_arguments": 6,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "ProcessHandle",
          "description": "A handle for the process in whose context the pages to be queried reside. Use the ZwCurrentProcess macro to specify the current process."
        },
        {
          "in_out": "_In_opt_",
          "type": "PVOID",
          "name": "BaseAddress",
          "description": "The base address of the region of pages to be                   queried. This value is rounded down to the next host-page-                   address boundary."
        },
        {
          "in_out": "_In_",
          "type": "MEMORY_INFORMATION_CLASS",
          "name": "MemoryInformationClass",
          "description": "The memory information class about which                              to retrieve information. Currently, the only supported MEMORY_INFORMATION_CLASS value is MemoryBasicInformation."
        },
        {
          "in_out": "_Out_",
          "type": "PVOID",
          "name": "MemoryInformation",
          "description": "A pointer to a buffer that receives the specified                         information.  The format and content of the buffer                         depend on the specified information class specified in the MemoryInformationClass parameter. When the value MemoryBasicInformation is passed to MemoryInformationClass, the MemoryInformationClass parameter value is a MEMORY_BASIC_INFORMATION."
        },
        {
          "in_out": "_In_",
          "type": "SIZE_T",
          "name": "MemoryInformationLength",
          "description": "Specifies the length in bytes of                               the memory information buffer."
        },
        {
          "in_out": "_Out_opt_",
          "type": "PSIZE_T",
          "name": "ReturnLength",
          "description": "An optional pointer which, if specified, receives the                    number of bytes placed in the memory information buffer."
        }
      ]
    },
    "ZwQueryVolumeInformationFile": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Ntifs.h (include Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 5,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "FileHandle",
          "description": "A handle to a file object returned by ZwCreateFile or ZwOpenFile for an open file, directory, storage device, or volume for which volume information is being requested."
        },
        {
          "in_out": "_Out_",
          "type": "PIO_STATUS_BLOCK",
          "name": "IoStatusBlock",
          "description": "A pointer to an IO_STATUS_BLOCK structure that receives the final completion status and information about the query operation. For successful calls that return data, the number of bytes written to the FsInformation buffer is returned in the structure's Information member."
        },
        {
          "in_out": "_Out_",
          "type": "PVOID",
          "name": "FsInformation",
          "description": "A pointer to a caller-allocated buffer that receives the desired information about the volume. The structure of the information returned in the buffer is defined by the FsInformationClass parameter."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "Length",
          "description": "Size in bytes of the buffer pointed to by FsInformation. The caller should set this parameter according to the given FsInformationClass."
        },
        {
          "in_out": "_In_",
          "type": "FS_INFORMATION_CLASS",
          "name": "FsInformationClass",
          "description": "Type of information to be returned about the volume. Set this member to one of the following FS_INFORMATION_CLASS enumeration values.  ValueMeaning  FileFsAttributeInformation  Return a FILE_FS_ATTRIBUTE_INFORMATION structure containing attribute information about the file system responsible for the volume.   FileFsControlInformation  Return a FILE_FS_CONTROL_INFORMATION structure containing file system control information about the volume.   FileFsDeviceInformation  Return a FILE_FS_DEVICE_INFORMATION structure containing device information for the volume.   FileFsDriverPathInformation  Return a FILE_FS_DRIVER_PATH_INFORMATION structure containing information about whether a specified driver is in the I/O path for the volume. The caller must store the name of the driver into the FILE_FS_DRIVER_PATH_INFORMATION structure before calling ZwQueryVolumeInformationFile.   FileFsFullSizeInformation  Return a FILE_FS_FULL_SIZE_INFORMATION structure containing information about the total amount of space available on the volume.   FileFsObjectIdInformation  Return a FILE_FS_OBJECTID_INFORMATION structure containing file system-specific object ID information for the volume. Note that this is not the same as the (GUID-based) unique volume name assigned by the operating system.   FileFsSizeInformation  Return a FILE_FS_SIZE_INFORMATION structure containing information about the amount of space on the volume that is available to the user associated with the calling thread.   FileFsVolumeInformation  Return a FILE_FS_VOLUME_INFORMATION containing information about the volume such as the volume label, serial number, and creation time.   FileFsSectorSizeInformation  Return a FILE_FS_SECTOR_SIZE_INFORMATION structure that contains information about the physical and logical sector sizes of a volume."
        }
      ]
    },
    "ZwReadFile": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h, Ntddk.h, or Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 9,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "FileHandle",
          "description": "Handle to the file object. This handle is created by a successful call to ZwCreateFile or ZwOpenFile."
        },
        {
          "in_out": "_In_opt_",
          "type": "HANDLE",
          "name": "Event",
          "description": "Optionally, a handle to an event object to set to the signaled state after the read operation completes. Device and intermediate drivers should set this parameter to NULL."
        },
        {
          "in_out": "_In_opt_",
          "type": "PIO_APC_ROUTINE",
          "name": "ApcRoutine",
          "description": "This parameter is reserved. Device and intermediate drivers should set this pointer to NULL."
        },
        {
          "in_out": "_In_opt_",
          "type": "PVOID",
          "name": "ApcContext",
          "description": "This parameter is reserved. Device and intermediate drivers should set this pointer to NULL."
        },
        {
          "in_out": "_Out_",
          "type": "PIO_STATUS_BLOCK",
          "name": "IoStatusBlock",
          "description": "Pointer to an IO_STATUS_BLOCK structure that receives the final completion status and information about the requested read operation. The Information member receives the number of bytes actually read from the file."
        },
        {
          "in_out": "_Out_",
          "type": "PVOID",
          "name": "Buffer",
          "description": "Pointer to a caller-allocated buffer that receives the data read from the file."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "Length",
          "description": "The size, in bytes, of the buffer pointed to by Buffer."
        },
        {
          "in_out": "_In_opt_",
          "type": "PLARGE_INTEGER",
          "name": "ByteOffset",
          "description": "Pointer to a variable that specifies the starting byte offset in the file where the read operation will begin. If an attempt is made to read beyond the end of the file, ZwReadFile returns an error. If the call to ZwCreateFile set either of the CreateOptions flags FILE_SYNCHRONOUS_IO_ALERT or FILE_SYNCHRONOUS_IO_NONALERT, the I/O Manager maintains the current file position. If so, the caller of ZwReadFile can specify that the current file position offset be used instead of an explicit ByteOffset value. This specification can be made by using one of the following methods:   Specify a pointer to a LARGE_INTEGER value with the HighPart member set to -1 and the LowPart member set to the system-defined value FILE_USE_FILE_POINTER_POSITION.   Pass a NULL pointer for ByteOffset.   ZwReadFile updates the current file position by adding the number of bytes read when it completes the read operation, if it is using the current file position maintained by the I/O Manager. Even when the I/O Manager is maintaining the current file position, the caller can reset this position by passing an explicit ByteOffset value to ZwReadFile. Doing this automatically changes the current file position to that ByteOffset value, performs the read operation, and then updates the position according to the number of bytes actually read. This technique gives the caller atomic seek-and-read service."
        },
        {
          "in_out": "_In_opt_",
          "type": "PULONG",
          "name": "Key",
          "description": "Device and intermediate drivers should set this pointer to NULL."
        }
      ]
    },
    "ZwReadOnlyEnlistment": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h, Ntddk.h, or Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 2,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "EnlistmentHandle",
          "description": "A handle to an enlistment object that was obtained by a previous call to ZwCreateEnlistment or ZwOpenEnlistment. The handle must have ENLISTMENT_SUBORDINATE_RIGHTS access to the object."
        },
        {
          "in_out": "_In_opt_",
          "type": "PLARGE_INTEGER",
          "name": "TmVirtualClock",
          "description": "A pointer to a virtual clock value. This parameter is optional and can be NULL."
        }
      ]
    },
    "ZwRecoverEnlistment": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h, Ntddk.h, or Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 2,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "EnlistmentHandle",
          "description": "A handle to an enlistment object that was obtained by a previous call to ZwCreateEnlistment or ZwOpenEnlistment. The handle must have ENLISTMENT_RECOVER access to the object."
        },
        {
          "in_out": "_In_opt_",
          "type": "PVOID",
          "name": "EnlistmentKey",
          "description": "A pointer to the enlistment key value that the resource manager previously specified as the EnlistmentKey parameter to ZwCreateEnlistment. This parameter is optional and can be NULL if the resource manager did not provide an enlistment key when it called ZwCreateEnlistment."
        }
      ]
    },
    "ZwRecoverResourceManager": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h or Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 1,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "ResourceManagerHandle",
          "description": "A handle to a resource manager object that was obtained by a previous call to ZwCreateResourceManager or ZwOpenResourceManager. The handle must have RESOURCEMANAGER_RECOVER access to the object."
        }
      ]
    },
    "ZwRecoverTransactionManager": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h or Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 1,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "TransactionManagerHandle",
          "description": "A handle to a transaction manager object that was obtained by a previous call to ZwCreateTransactionManager or ZwOpenTransactionManager. The handle must have TRANSACTIONMANAGER_RECOVER access to the object."
        }
      ]
    },
    "ZwRollbackComplete": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h or Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 2,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "EnlistmentHandle",
          "description": "A handle to an enlistment object that was obtained by a previous call to ZwCreateEnlistment or ZwOpenEnlistment. The handle must have ENLISTMENT_SUBORDINATE_RIGHTS access to the object."
        },
        {
          "in_out": "_In_opt_",
          "type": "PLARGE_INTEGER",
          "name": "TmVirtualClock",
          "description": "A pointer to a virtual clock value. This parameter is optional and can be NULL."
        }
      ]
    },
    "ZwRollbackEnlistment": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h or Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 2,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "EnlistmentHandle",
          "description": "A handle to an enlistment object that was obtained by a previous call to ZwCreateEnlistment or ZwOpenEnlistment. The handle must have ENLISTMENT_SUBORDINATE_RIGHTS access to the object."
        },
        {
          "in_out": "_In_opt_",
          "type": "PLARGE_INTEGER",
          "name": "TmVirtualClock",
          "description": "A pointer to a virtual clock value. This parameter is optional and can be NULL."
        }
      ]
    },
    "ZwRollbackTransaction": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h or Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 2,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "TransactionHandle",
          "description": "A handle to a transaction object that was obtained by a previous call to ZwCreateTransaction or ZwOpenTransaction. The handle must have TRANSACTION_ROLLBACK access to the object."
        },
        {
          "in_out": "_In_",
          "type": "BOOLEAN",
          "name": "Wait",
          "description": "A Boolean value that the caller sets to TRUE for synchronous operation or FALSE for asynchronous operation. If this parameter is set to TRUE, the call does not return until the rollback operation is complete."
        }
      ]
    },
    "ZwRollforwardTransactionManager": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h, Ntddk.h, or Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 2,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "TransactionManagerHandle",
          "description": "A handle to a transaction manager object that was obtained by a previous call to ZwCreateTransactionManager or ZwOpenTransactionManager. The handle must have TRANSACTIONMANAGER_RECOVER access to the object."
        },
        {
          "in_out": "_In_opt_",
          "type": "PLARGE_INTEGER",
          "name": "TmVirtualClock",
          "description": "A pointer to a virtual clock value. This parameter is optional and can be NULL. For more information about this parameter, see the following Remarks section."
        }
      ]
    },
    "ZwSetEvent": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Ntifs.h (include Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 2,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "EventHandle",
          "description": "A handle to an event object."
        },
        {
          "in_out": "_Out_opt_",
          "type": "PLONG",
          "name": "PreviousState",
          "description": "An optional pointer to a variable where the previous state of the event object is stored on output."
        }
      ]
    },
    "ZwSetInformationEnlistment": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h, Ntddk.h, or Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 4,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "EnlistmentHandle",
          "description": "A handle to an enlistment object that was obtained by a previous call to ZwCreateEnlistment or ZwOpenEnlistment. The handle must have ENLISTMENT_SET_INFORMATION access to the object."
        },
        {
          "in_out": "_In_",
          "type": "ENLISTMENT_INFORMATION_CLASS",
          "name": "EnlistmentInformationClass",
          "description": "A ENLISTMENT_INFORMATION_CLASS-typed enumeration value that specifies the type of information to be set. This value must be EnlistmentRecoveryInformation. The enumeration's EnlistmentBasicInformation and EnlistmentFullInformation values are not used with ZwSetInformationEnlistment."
        },
        {
          "in_out": "_In_",
          "type": "PVOID",
          "name": "EnlistmentInformation",
          "description": "A pointer to a caller-allocated buffer that contains caller-defined recovery information for the enlistment."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "EnlistmentInformationLength",
          "description": "The length, in bytes, of the buffer that the EnlistmentInformation parameter points to."
        }
      ]
    },
    "ZwSetInformationFile": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h, Ntddk.h, or Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 5,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "FileHandle",
          "description": "Handle to the file object. This handle is created by a successful call to ZwCreateFile or ZwOpenFile."
        },
        {
          "in_out": "_Out_",
          "type": "PIO_STATUS_BLOCK",
          "name": "IoStatusBlock",
          "description": "Pointer to an IO_STATUS_BLOCK structure that receives the final completion status and information about the requested operation. The Information member receives the number of bytes set on the file."
        },
        {
          "in_out": "_In_",
          "type": "PVOID",
          "name": "FileInformation",
          "description": "Pointer to a buffer that contains the information to set for the file. The particular structure in this buffer is determined by the FileInformationClass parameter. Setting any member of the structure to zero tells ZwSetInformationFile to leave the current information about the file for that member unchanged."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "Length",
          "description": "The size, in bytes, of the FileInformation buffer."
        },
        {
          "in_out": "_In_",
          "type": "FILE_INFORMATION_CLASS",
          "name": "FileInformationClass",
          "description": "The type of information, supplied in the buffer pointed to by FileInformation, to set for the file. Device and intermediate drivers can specify any of the following FILE_INFORMATION_CLASS values.  FileInformationClass ValueMeaning  FileBasicInformation  Change the information that is supplied in a FILE_BASIC_INFORMATION structure. The caller must have opened the file with the FILE_WRITE_ATTRIBUTES flag set in the DesiredAccess parameter.   FileDispositionInformation  Usually, sets the DeleteFile member of a FILE_DISPOSITION_INFORMATION to TRUE, so the file can be deleted when ZwClose is called to release the last open handle to the file object. The caller must have opened the file with the DELETE flag set in the DesiredAccess parameter.   FileEndOfFileInformation  Change the current end-of-file information, supplied in a FILE_END_OF_FILE_INFORMATION structure. The operation can either truncate or extend the file. The caller must have opened the file with the FILE_WRITE_DATA flag set in the DesiredAccess parameter.   FileIoPriorityHintInformation  Change the current default IRP priority hint for the file handle. The new value is supplied in a FILE_IO_PRIORITY_HINT_INFORMATION structure. Note    This structure must be 8-byte aligned.     FileLinkInformation  Create a hard link to an existing file, which is specified in a FILE_LINK_INFORMATION structure. Not all file systems support hard links; for example NTFS does while FAT does not.   FilePositionInformation  Change the current file information, which is stored in a FILE_POSITION_INFORMATION structure.   FileRenameInformation  Change the current file name, which is supplied in a FILE_RENAME_INFORMATION structure. The caller must have DELETE access to the file.   FileShortNameInformation  Change the current short file name, which is supplied in a FILE_NAME_INFORMATION structure. The file must be on an NTFS volume, and the caller must have opened the file with the DesiredAccess DELETE flag set in the DesiredAccess parameter.   FileValidDataLengthInformation  Change the current valid data length for the file, which is supplied in a FILE_VALID_DATA_LENGTH_INFORMATION structure. The file must be on an NTFS volume, and the caller must have opened the file with the FILE_WRITE_DATA flag set in the DesiredAccess parameter. Non-administrators and remote users must have the SeManageVolumePrivilege privilege.   FileReplaceCompletionInformation  Change or remove the I/O completion port for the specified file handle. The caller supplies a pointer to a FILE_COMPLETION_INFORMATION structure that specifies a port handle and a completion key. If the port handle is non-NULL, this handle specifies a new I/O completion port to associate with the file handle. To remove the I/O completion port associated with the file handle, set the port handle in the structure to NULL. To get a port handle, a user-mode caller can call the CreateIoCompletionPort function."
        }
      ]
    },
    "ZwSetInformationResourceManager": {
      "category": "Drivers",
      "dll": "",
      "header": "",
      "return_type": "void",
      "n_arguments": 0,
      "arguments": []
    },
    "ZwSetInformationThread": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Ntddk.h (include Ntddk.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 4,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "ThreadHandle",
          "description": "Handle to the thread object. To create a new thread and get a handle to it, call PsCreateSystemThread. To specify the current thread, use the ZwCurrentThread macro."
        },
        {
          "in_out": "_In_",
          "type": "THREADINFOCLASS",
          "name": "ThreadInformationClass",
          "description": "One of the system-defined values in the THREADINFOCLASS enumeration (see ntddk.h), ThreadPriority,   ThreadBasePriority, or ThreadPagePriority."
        },
        {
          "in_out": "_In_",
          "type": "PVOID",
          "name": "ThreadInformation",
          "description": "Pointer to a variable that specifies the information to set.  If ThreadInformationClass is ThreadPriority, this value must be > LOW_PRIORITY and <= HIGH_PRIORITY.  If ThreadInformationClass is ThreadBasePriority, this value must fall within the system's valid base-priority range and the original priority class for the given thread. That is, if a thread's priority class is variable, that thread's base priority cannot be reset to a real-time priority value, and vice versa. If ThreadInformationClass is ThreadPagePriority, this value is a pointer to a PAGE_PRIORITY_INFORMATION structure, see ntddk.h. The PagePriority member value must be one of these values.   ValueMeaning  MEMORY_PRIORITY_VERY_LOW 1   Very low memory priority.   MEMORY_PRIORITY_LOW 2   Low memory priority.   MEMORY_PRIORITY_MEDIUM 3   Medium memory priority.   MEMORY_PRIORITY_BELOW_NORMAL 4   Below normal memory priority.   MEMORY_PRIORITY_NORMAL 5   Normal memory priority. This is the default priority for all threads and processes on the system."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "ThreadInformationLength",
          "description": "The size, in bytes, of ThreadInformation."
        }
      ]
    },
    "ZwSetInformationToken": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Ntifs.h (include Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 4,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "TokenHandle",
          "description": "Handle for an access token in which information is to be modified."
        },
        {
          "in_out": "_In_",
          "type": "TOKEN_INFORMATION_CLASS",
          "name": "TokenInformationClass",
          "description": "A value from the TOKEN_INFORMATION_CLASS enumerated type identifying the type of information to be modified. The possible values for this parameter are listed in the TokenInformationClass Value column of the table shown in the description of the TokenInformation parameter."
        },
        {
          "in_out": "_In_",
          "type": "PVOID",
          "name": "TokenInformation",
          "description": "Pointer to a caller-supplied buffer containing the information to be modified in the token. The structure of the information in this buffer depends upon the value of TokenInformationClass, as shown in the following table. All structures must be aligned on a 32-bit boundary.   TokenInformationClass valueEffect on TokenInformation buffer  TokenDefaultDacl  The buffer contains a TOKEN_DEFAULT_DACL structure specifying the default DACL for newly created objects. TOKEN_ADJUST_DEFAULT access is required to set this information. The buffer contents are not validated for structural correctness or consistency.    TokenGroups  Not a valid information class. This information is read-only.    TokenOwner  The buffer contains a TOKEN_OWNER structure specifying the default owner SID for newly created objects. TOKEN_ADJUST_DEFAULT access is required to set this information. The owner values that may be specified are restricted to the user and group IDs with an attribute indicating they can be assigned as the owner of objects.    TokenPrimaryGroup  The buffer contains a TOKEN_PRIMARY_GROUP structure specifying the default primary group SID for newly created objects. TOKEN_ADJUST_DEFAULT access is required to set this information. Must be one of the group IDs already in the token.    TokenPrivileges  Not a valid information class. This information is read-only.    TokenSource  Not a valid information class. This information is read-only.    TokenStatistics  Not a valid information class. This information is read-only.    TokenUser  Not a valid information class. This information is read-only."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "TokenInformationLength",
          "description": "Size, in bytes, of the structure passed in the TokenInformation buffer. Must be greater than or equal to the minimum value given in the following table.   TokenInformationClass valueMinimum TokenInformationLength  TokenDefaultDacl  sizeof(TOKEN_DEFAULT_DACL)    TokenOwner  sizeof(TOKEN_OWNER)    TokenPrimaryGroup  sizeof(TOKEN_PRIMARY_GROUP)"
        }
      ]
    },
    "ZwSetInformationTransaction": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h, Ntddk.h, or Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 4,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "TransactionHandle",
          "description": "A handle to a transaction object that was obtained by a previous call to ZwCreateTransaction or ZwOpenTransaction. The handle must have TRANSACTION_SET_INFORMATION access to the object."
        },
        {
          "in_out": "_In_",
          "type": "TRANSACTION_INFORMATION_CLASS",
          "name": "TransactionInformationClass",
          "description": "A TRANSACTION_INFORMATION_CLASS-typed value that specifies the type of information to set. The value must be TransactionPropertiesInformation."
        },
        {
          "in_out": "_In_",
          "type": "PVOID",
          "name": "TransactionInformation",
          "description": "A pointer to a caller-allocated buffer that contains the information to set. The buffer's structure type must be TRANSACTION_PROPERTIES_INFORMATION."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "TransactionInformationLength",
          "description": "The length, in bytes, of the buffer that the TransactionInformation parameter points to."
        }
      ]
    },
    "ZwSetQuotaInformationFile": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Ntifs.h (include Ntifs.h or FltKernel.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 4,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "FileHandle",
          "description": "A handle for the file object that represents the file or volume for which the quota information is to be modified."
        },
        {
          "in_out": "_Out_",
          "type": "PIO_STATUS_BLOCK",
          "name": "IoStatusBlock",
          "description": "The address of the caller's I/O status block."
        },
        {
          "in_out": "_In_",
          "type": "PVOID",
          "name": "Buffer",
          "description": "A buffer containing the new quota entries that should be applied to the volume. The quota information must be formatted as one or more FILE_QUOTA_INFORMATION structures. The NextEntryOffset field in the FILE_QUOTA_INFORMATION structure contains the offset, in bytes, of the next quota entry in the list. If there are no more entries after the current one, this member is zero."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "Length",
          "description": "The length in bytes of the buffer."
        }
      ]
    },
    "ZwSetSecurityObject": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Ntifs.h (include Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 3,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "Handle",
          "description": "Handle for the object whose security state is to be set. This handle must have the access specified in the Meaning column of the table shown in the description of the SecurityInformation parameter."
        },
        {
          "in_out": "_In_",
          "type": "SECURITY_INFORMATION",
          "name": "SecurityInformation",
          "description": "SECURITY_INFORMATION value specifying the information to be set. Can be a combination of one or more of the following.   ValueMeaning  DACL_SECURITY_INFORMATION  Indicates the discretionary access control list (DACL) of the object is to be set. Requires WRITE_DAC access.   GROUP_SECURITY_INFORMATION  Indicates the primary group identifier of the object is to be set. Requires WRITE_OWNER access.   OWNER_SECURITY_INFORMATION  Indicates the owner identifier of the object is to be set. Requires WRITE_OWNER access.   SACL_SECURITY_INFORMATION  Indicates the system ACL (SACL) of the object is to be set. Requires ACCESS_SYSTEM_SECURITY access."
        },
        {
          "in_out": "_In_",
          "type": "PSECURITY_DESCRIPTOR",
          "name": "SecurityDescriptor",
          "description": "Pointer to the security descriptor to be set for the object."
        }
      ]
    },
    "ZwSetValueKey": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h, Ntddk.h, or Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 6,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "KeyHandle",
          "description": "Handle to the registry key to write a value entry for. This handle is created by a successful call to ZwCreateKey or ZwOpenKey."
        },
        {
          "in_out": "_In_",
          "type": "PUNICODE_STRING",
          "name": "ValueName",
          "description": "Pointer to the name of the value entry for which the data is to be written. This parameter can be a NULL pointer if the value entry has no name. If a name string is specified and the given name is not unique relative to its containing key, the data for an existing value entry is replaced."
        },
        {
          "in_out": "_In_opt_",
          "type": "ULONG",
          "name": "TitleIndex",
          "description": "This parameter is reserved. Device and intermediate drivers should set this parameter to zero."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "Type",
          "description": "One of the following system-defined types of data to write.  Type ValueMeaning  REG_BINARY  Binary data in any form.   REG_DWORD  A 4-byte numerical value.   REG_DWORD_LITTLE_ENDIAN  A 4-byte numerical value with the least significant byte at the lowest address. Identical to REG_DWORD.   REG_DWORD_BIG_ENDIAN  A 4-byte numerical  value with the least significant byte at the highest address.   REG_EXPAND_SZ  A null-terminated Unicode string that contains unexpanded references to environment variables, such as \"%PATH%\".   REG_LINK  A Unicode string that names a symbolic link. This type is irrelevant to device and intermediate drivers.   REG_MULTI_SZ  An array of null-terminated strings, terminated by another zero.   REG_NONE  Data with no particular type.   REG_SZ  A null-terminated Unicode string.   REG_RESOURCE_LIST  A device driver's list of hardware resources, used by the driver or one of the physical devices it controls, in the \\ResourceMap tree   REG_RESOURCE_REQUIREMENTS_LIST  A device driver's list of possible hardware resources it or one of the physical devices it controls can use, from which the system writes a subset into the \\ResourceMap tree   REG_FULL_RESOURCE_DESCRIPTOR  A list of hardware resources that a physical device is using, detected and written into the \\HardwareDescription tree by the system     Note   Device drivers should not attempt to call ZwSetValueKey to explicitly write value entries in a subkey of the \\Registry...\\ResourceMap key. Only the system can write value entries to the \\Registry...\\HardwareDescription tree."
        },
        {
          "in_out": "_In_opt_",
          "type": "PVOID",
          "name": "Data",
          "description": "Pointer to a caller-allocated buffer that contains the data for the value entry."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "DataSize",
          "description": "Specifies the size, in bytes, of the Data buffer. If Type is REG_XXX_SZ, this value must include space for any terminating zeros."
        }
      ]
    },
    "ZwSetVolumeInformationFile": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Ntifs.h (include Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 5,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "FileHandle",
          "description": "Handle to a file object for an open file, directory, storage device, or volume whose volume information is to be modified."
        },
        {
          "in_out": "_Out_",
          "type": "PIO_STATUS_BLOCK",
          "name": "IoStatusBlock",
          "description": "Pointer to an IO_STATUS_BLOCK structure that receives the final completion status and information about the operation."
        },
        {
          "in_out": "_In_",
          "type": "PVOID",
          "name": "FsInformation",
          "description": "Pointer to a caller-allocated buffer containing the volume information to be modified. The structure of the information in this buffer depends on the value of FsInformationClass, as shown in the following table."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "Length",
          "description": "Size in bytes of the buffer pointed to by FsInformation. The caller should set this parameter according to the given FsInformationClass."
        },
        {
          "in_out": "_In_",
          "type": "FS_INFORMATION_CLASS",
          "name": "FsInformationClass",
          "description": "Type of volume information to be set. One of the following:   ValueMeaning  FileFsControlInformation  Set FILE_FS_CONTROL_INFORMATION for the volume.    FileFsLabelInformation  Set FILE_FS_LABEL_INFORMATION for the volume.    FileFsObjectIdInformation  Set FILE_FS_OBJECTID_INFORMATION for the volume."
        }
      ]
    },
    "ZwSinglePhaseReject": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h, Ntddk.h, or Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 2,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "EnlistmentHandle",
          "description": "A handle to an enlistment object that was obtained by a previous call to ZwCreateEnlistment or ZwOpenEnlistment. The handle must have ENLISTMENT_SUBORDINATE_RIGHTS access to the object."
        },
        {
          "in_out": "_In_opt_",
          "type": "PLARGE_INTEGER",
          "name": "TmVirtualClock",
          "description": "A pointer to a virtual clock value. This parameter is optional and can be NULL."
        }
      ]
    },
    "ZwTerminateProcess": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Ntddk.h (include Ntddk.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 2,
      "arguments": [
        {
          "in_out": "_In_opt_",
          "type": "HANDLE",
          "name": "ProcessHandle",
          "description": "A handle to the process object that represents the process to be terminated."
        },
        {
          "in_out": "_In_",
          "type": "NTSTATUS",
          "name": "ExitStatus",
          "description": "An NTSTATUS value that the operating system uses as the final status for the process and each of its threads."
        }
      ]
    },
    "ZwUnloadDriver": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h, Ntddk.h, or Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 1,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "PUNICODE_STRING",
          "name": "DriverServiceName",
          "description": "Pointer to a counted Unicode string that specifies a path to the driver's registry key, \\Registry\\Machine\\System\\CurrentControlSet\\Services\\DriverName, where DriverName is the name of the driver."
        }
      ]
    },
    "ZwUnlockFile": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Ntifs.h (include Ntifs.h or FltKernel.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 5,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "FileHandle",
          "description": "A handle for the file object that represents the file whose byte range is to be unlocked."
        },
        {
          "in_out": "_Out_",
          "type": "PIO_STATUS_BLOCK",
          "name": "IoStatusBlock",
          "description": "A pointer to an IO_STATUS_BLOCK structure that contains the final status."
        },
        {
          "in_out": "_In_",
          "type": "PLARGE_INTEGER",
          "name": "ByteOffset",
          "description": "A pointer to a variable that specifies the starting byte offset for the byte range to be unlocked."
        },
        {
          "in_out": "_In_",
          "type": "PLARGE_INTEGER",
          "name": "Length",
          "description": "A pointer to a variable that specifies the length, in bytes, of the byte range to unlock."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "Key",
          "description": "The caller-assigned value used to describe groups of related locks. This value should be set to zero."
        }
      ]
    },
    "ZwUnmapViewOfSection": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h, Ntddk.h, or Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 2,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "ProcessHandle",
          "description": "Handle to a process object that was previously passed to ZwMapViewOfSection."
        },
        {
          "in_out": "_In_opt_",
          "type": "PVOID",
          "name": "BaseAddress",
          "description": "Pointer to the base virtual address of the view to unmap. This value can be any virtual address within the view."
        }
      ]
    },
    "ZwWaitForSingleObject": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Ntifs.h (include Ntifs.h or FltKernel.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 3,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "Handle",
          "description": "A handle to the object."
        },
        {
          "in_out": "_In_",
          "type": "BOOLEAN",
          "name": "Alertable",
          "description": "A boolean value that specifies whether the wait is alertable."
        },
        {
          "in_out": "_In_opt_",
          "type": "PLARGE_INTEGER",
          "name": "Timeout",
          "description": "An optional pointer to a time-out value that specifies the absolute or relative time at which the wait is to be completed. A negative value specifies an interval relative to the current time. The value should be expressed in units of 100 nanoseconds. Absolute expiration times track any changes in the system time. Relative expiration times are not affected by system time changes."
        }
      ]
    },
    "ZwWriteFile": {
      "category": "Drivers",
      "dll": "NtosKrnl.exe",
      "header": "Wdm.h (include Wdm.h, Ntddk.h, or Ntifs.h)",
      "return_type": "NTSTATUS",
      "n_arguments": 9,
      "arguments": [
        {
          "in_out": "_In_",
          "type": "HANDLE",
          "name": "FileHandle",
          "description": "Handle to the file object. This handle is created by a successful call to ZwCreateFile or ZwOpenFile."
        },
        {
          "in_out": "_In_opt_",
          "type": "HANDLE",
          "name": "Event",
          "description": "Optionally, a handle to an event object to set to the signaled state after the write operation completes. Device and intermediate drivers should set this parameter to NULL."
        },
        {
          "in_out": "_In_opt_",
          "type": "PIO_APC_ROUTINE",
          "name": "ApcRoutine",
          "description": "This parameter is reserved. Device and intermediate drivers should set this pointer to NULL."
        },
        {
          "in_out": "_In_opt_",
          "type": "PVOID",
          "name": "ApcContext",
          "description": "This parameter is reserved. Device and intermediate drivers should set this pointer to NULL."
        },
        {
          "in_out": "_Out_",
          "type": "PIO_STATUS_BLOCK",
          "name": "IoStatusBlock",
          "description": "Pointer to an IO_STATUS_BLOCK structure that receives the final completion status and information about the requested write operation. The Information member receives the number of bytes actually written to the file."
        },
        {
          "in_out": "_In_",
          "type": "PVOID",
          "name": "Buffer",
          "description": "Pointer to a caller-allocated buffer that contains the data to write to the file."
        },
        {
          "in_out": "_In_",
          "type": "ULONG",
          "name": "Length",
          "description": "The size, in bytes, of the buffer pointed to by Buffer."
        },
        {
          "in_out": "_In_opt_",
          "type": "PLARGE_INTEGER",
          "name": "ByteOffset",
          "description": "Pointer to a variable that specifies the starting byte offset in the file for beginning the write operation. If Length and ByteOffset specify a write operation past the current end-of-file mark, ZwWriteFile automatically extends the file and updates the end-of-file mark; any bytes that are not explicitly written between such old and new end-of-file marks are defined to be zero. If the call to ZwCreateFile set only the DesiredAccess flag FILE_APPEND_DATA, ByteOffset is ignored. Data in the given Buffer, for Length bytes, is written starting at the current end of file. If the call to ZwCreateFile set either of the CreateOptions flags, FILE_SYNCHRONOUS_IO_ALERT or FILE_SYNCHRONOUS_IO_NONALERT, the I/O Manager maintains the current file position. If so, the caller of ZwWriteFile can specify that the current file position offset be used instead of an explicit ByteOffset value. This specification can be made by using one of the following methods:   Specify a pointer to a LARGE_INTEGER value with the HighPart member set to -1 and the LowPart member set to the system-defined value FILE_USE_FILE_POINTER_POSITION.   Pass a NULL pointer for ByteOffset.   ZwWriteFile updates the current file position by adding the number of bytes written when it completes the write operation, if it is using the current file position maintained by the I/O Manager. Even when the I/O Manager is maintaining the current file position, the caller can reset this position by passing an explicit ByteOffset value to ZwWriteFile. Doing this automatically changes the current file position to that ByteOffsetvalue, performs the write operation, and then updates the position according to the number of bytes actually written. This technique gives the caller atomic seek-and-write service. It is also possible to cause a write operation to start at the current end of file by specifying for ByteOffset a pointer to a LARGE_INTEGER value with HighPart set to -1 and LowPart set to FILE_WRITE_TO_END_OF_FILE. This works regardless of whether the I/O Manager is maintaining the current file position."
        },
        {
          "in_out": "_In_opt_",
          "type": "PULONG",
          "name": "Key",
          "description": "Device and intermediate drivers should set this pointer to NULL."
        }
      ]
    }
  }